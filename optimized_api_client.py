
import asyncio
import aiohttp
import time
from typing import Dict, List, Optional, Set
from concurrent.futures import ThreadPoolExecutor
from logger import bot_logger
from config import config_manager
from cache_manager import cache_manager
from websocket_client import ws_client

class OptimizedAPIClient:
    def __init__(self):
        self.base_url = "https://api.mexc.com/api/v3"
        self.session_pool: List[aiohttp.ClientSession] = []
        self.pool_size = 10  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—É–ª
        self.current_session = 0
        self.rate_limiter = asyncio.Semaphore(25)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
        self.executor = ThreadPoolExecutor(max_workers=10)
        
    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –∏–∑ –ø—É–ª–∞"""
        if not self.session_pool:
            await self._init_session_pool()
            
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–∏ –∏–∑ –ø—É–ª–∞
        session = self.session_pool[self.current_session]
        self.current_session = (self.current_session + 1) % self.pool_size
        
        if session.closed:
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∑–∞–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é
            session = await self._create_session()
            self.session_pool[self.current_session - 1] = session
            
        return session

    async def _init_session_pool(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É–ª —Å–µ—Å—Å–∏–π"""
        self.session_pool = []
        for _ in range(self.pool_size):
            session = await self._create_session()
            self.session_pool.append(session)
        bot_logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω –ø—É–ª –∏–∑ {self.pool_size} HTTP —Å–µ—Å—Å–∏–π")

    async def _create_session(self) -> aiohttp.ClientSession:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é HTTP —Å–µ—Å—Å–∏—é"""
        timeout = aiohttp.ClientTimeout(
            total=5,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π timeout –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            connect=2,
            sock_read=3
        )

        connector = aiohttp.TCPConnector(
            limit=100,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            limit_per_host=50,
            ttl_dns_cache=600,
            use_dns_cache=True,
            keepalive_timeout=60,
            enable_cleanup_closed=True,
            force_close=False
        )

        return aiohttp.ClientSession(
            timeout=timeout,
            connector=connector,
            headers={
                'User-Agent': 'TradingBot/2.1-Optimized',
                'Accept': 'application/json',
                'Connection': 'keep-alive'
            }
        )

    async def get_batch_klines(self, symbols: List[str]) -> Dict[str, Optional[List]]:
        """–ü–æ–ª—É—á–∞–µ—Ç klines –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        async with self.rate_limiter:
            tasks = []
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            for symbol in symbols:
                task = self._get_single_kline(symbol)
                tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            semaphore = asyncio.Semaphore(10)  # –ú–∞–∫—Å–∏–º—É–º 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            
            async def limited_task(task, sym):
                async with semaphore:
                    return sym, await task
            
            results = await asyncio.gather(
                *[limited_task(task, sym) for task, sym in zip(tasks, symbols)],
                return_exceptions=True
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            klines_data = {}
            for result in results:
                if isinstance(result, Exception):
                    continue
                symbol, kline_data = result
                klines_data[symbol] = kline_data
                
            return klines_data

    async def _get_single_kline(self, symbol: str) -> Optional[List]:
        """–ü–æ–ª—É—á–∞–µ—Ç kline –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            session = await self._get_session()
            params = {
                'symbol': f"{symbol}USDT",
                'interval': "1m",
                'limit': 2
            }
            
            async with session.get(f"{self.base_url}/klines", params=params) as response:
                if response.status == 200:
                    return await response.json()
                return None
                
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è kline –¥–ª—è {symbol}: {e}")
            return None

    async def get_batch_trades(self, symbols: List[str]) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
        async with self.rate_limiter:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            loop = asyncio.get_event_loop()
            
            tasks = []
            for symbol in symbols:
                task = loop.run_in_executor(
                    self.executor,
                    self._process_trades_sync,
                    symbol
                )
                tasks.append(task)
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            trades_data = {}
            for i, result in enumerate(results):
                if not isinstance(result, Exception):
                    trades_data[symbols[i]] = result
                else:
                    trades_data[symbols[i]] = 0
                    
            return trades_data

    def _process_trades_sync(self, symbol: str) -> int:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–µ–ª–æ–∫ (–¥–ª—è ThreadPoolExecutor)"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à –∏–ª–∏ WebSocket –¥–∞–Ω–Ω—ã–µ
            # –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
            return 0  # –ó–∞–≥–ª—É—à–∫–∞
        except:
            return 0

    async def get_optimized_coin_data(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∏–∑ –∫–µ—à–∞ –∏ WebSocket"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞ (WebSocket –¥–∞–Ω–Ω—ã–µ)
            ticker_data = cache_manager.get_ticker_cache(symbol)
            book_data = cache_manager.get_book_ticker_cache(symbol)
            
            if not ticker_data or not book_data:
                # Fallback –Ω–∞ HTTP API —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                return await self._fallback_coin_data(symbol)
            
            # –ü–æ–ª—É—á–∞–µ–º klines —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è NATR –∏ —Ç–æ—á–Ω–æ–≥–æ –æ–±—ä–µ–º–∞)
            kline_data = await self._get_single_kline(symbol)
            if not kline_data:
                return None
                
            # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            volume_1m = float(kline_data[-1][7]) if kline_data else 0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑ WebSocket –¥–∞–Ω–Ω—ã—Ö
            change_1m = float(ticker_data.get('priceChangePercent', 0))
            
            # –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç NATR
            natr = self._fast_natr_calculation(kline_data) if kline_data else 0
            
            # –†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞
            bid_price = float(book_data['bidPrice'])
            ask_price = float(book_data['askPrice'])
            spread = ((ask_price - bid_price) / bid_price) * 100 if bid_price > 0 else 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ (–º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ WebSocket)
            trades_count = cache_manager.get_trades_cache(symbol) or 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            vol_thresh = config_manager.get('VOLUME_THRESHOLD')
            spread_thresh = config_manager.get('SPREAD_THRESHOLD') 
            natr_thresh = config_manager.get('NATR_THRESHOLD')
            
            is_active = (
                volume_1m >= vol_thresh and
                spread >= spread_thresh and
                natr >= natr_thresh
            )
            
            return {
                'symbol': symbol,
                'price': float(ticker_data['lastPrice']),
                'volume': volume_1m,
                'change': change_1m,
                'spread': spread,
                'natr': natr,
                'trades': trades_count,
                'active': is_active,
                'has_recent_trades': trades_count > 0,
                'timestamp': time.time()
            }
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None

    def _fast_natr_calculation(self, klines: List) -> float:
        """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç NATR"""
        if not klines or len(klines) < 2:
            return 0.0
            
        try:
            current = klines[-1]
            previous = klines[-2]
            
            high = float(current[2])
            low = float(current[3])
            prev_close = float(previous[4])
            close = float(current[4])
            
            true_range = max(
                high - low,
                abs(high - prev_close),
                abs(low - prev_close)
            )
            
            return (true_range / close) * 100 if close > 0 else 0.0
        except:
            return 0.0

    async def _fallback_coin_data(self, symbol: str) -> Optional[Dict]:
        """Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π HTTP API"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        from api_client import api_client
        return await api_client.get_coin_data(symbol)

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏"""
        for session in self.session_pool:
            if not session.closed:
                await session.close()
        self.executor.shutdown(wait=True)
        bot_logger.info("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
optimized_api_client = OptimizedAPIClient()
