
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç
–†–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞
"""

import asyncio
import time
from typing import Dict, Set
from logger import bot_logger
from config import config_manager
from api_client import api_client
from watchlist_manager import watchlist_manager
from session_recorder import session_recorder


class AutonomousActivityMonitor:
    def __init__(self):
        self.running = False
        self.monitoring_task = None
        self.tracked_coins: Dict[str, Dict] = {}  # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.running:
            bot_logger.warning("–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.running = True
        self.tracked_coins.clear()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        self.monitoring_task = asyncio.create_task(self._monitoring_loop())
        
        bot_logger.info("üîç –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.running:
            return
            
        self.running = False
        
        if self.monitoring_task and not self.monitoring_task.done():
            self.monitoring_task.cancel()
            try:
                await asyncio.wait_for(self.monitoring_task, timeout=2.0)
            except (asyncio.CancelledError, asyncio.TimeoutError):
                pass
                
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self._finalize_all_activities()
        
        bot_logger.info("üîç –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def _chunks(self, lst, size):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞–Ω–∫–∏"""
        for i in range(0, len(lst), size):
            yield lst[i:i + size]
            
    async def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        check_interval = 5  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        while self.running:
            try:
                watchlist = watchlist_manager.get_all()
                if not watchlist:
                    await asyncio.sleep(check_interval)
                    continue
                    
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç –±–∞—Ç—á–∞–º–∏
                batch_size = config_manager.get('CHECK_BATCH_SIZE', 15)
                for batch in self._chunks(list(watchlist), batch_size):
                    if not self.running:
                        break
                        
                    try:
                        batch_data = await api_client.get_batch_coin_data(batch)
                        
                        for symbol, coin_data in batch_data.items():
                            if not self.running:
                                break
                                
                            if coin_data:
                                await self._process_coin_activity(symbol, coin_data)
                                
                    except Exception as e:
                        bot_logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö batch {batch}: {e}")
                        
                    await asyncio.sleep(0.2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
                self._check_inactive_coins()
                
                await asyncio.sleep(check_interval)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ: {e}")
                await asyncio.sleep(5)
                
    async def _process_coin_activity(self, symbol: str, coin_data: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã"""
        current_time = time.time()
        is_active = coin_data.get('active', False)
        
        if is_active:
            # –ú–æ–Ω–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞
            if symbol not in self.tracked_coins:
                # –ù–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                self.tracked_coins[symbol] = {
                    'start_time': current_time,
                    'last_active': current_time,
                    'data_points': [],
                    'max_volume': coin_data.get('volume', 0),
                    'total_trades': 0
                }
                bot_logger.debug(f"üîç –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä: –Ω–∞—á–∞—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {symbol}")
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            tracked = self.tracked_coins[symbol]
            tracked['last_active'] = current_time
            tracked['max_volume'] = max(tracked['max_volume'], coin_data.get('volume', 0))
            tracked['total_trades'] += coin_data.get('trades', 0)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–Ω—É—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            minute_key = int(current_time // 60) * 60
            tracked['data_points'].append({
                'timestamp': current_time,
                'minute': minute_key,
                'volume': coin_data.get('volume', 0),
                'trades': coin_data.get('trades', 0),
                'price': coin_data.get('price', 0),
                'change': coin_data.get('change', 0),
                'spread': coin_data.get('spread', 0),
                'natr': coin_data.get('natr', 0)
            })
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤ Session Recorder
            session_recorder.update_coin_activity(symbol, coin_data)
            
    def _check_inactive_coins(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã"""
        current_time = time.time()
        inactive_threshold = 90  # 90 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        min_duration = 60  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        coins_to_finalize = []
        
        for symbol, tracked in list(self.tracked_coins.items()):
            time_since_active = current_time - tracked['last_active']
            total_duration = current_time - tracked['start_time']
            
            if time_since_active > inactive_threshold:
                if total_duration >= min_duration:
                    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                    coins_to_finalize.append(symbol)
                else:
                    # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º
                    del self.tracked_coins[symbol]
                    bot_logger.debug(f"üîç –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä: —É–¥–∞–ª–µ–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {symbol} ({total_duration:.1f}s)")
                    
        # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        for symbol in coins_to_finalize:
            self._finalize_activity(symbol)
            
    def _finalize_activity(self, symbol: str):
        """–§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã"""
        if symbol not in self.tracked_coins:
            return
            
        tracked = self.tracked_coins[symbol]
        current_time = time.time()
        
        duration = current_time - tracked['start_time']
        data_points = len(tracked['data_points'])
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_summary = {
            'symbol': symbol,
            'start_time': tracked['start_time'],
            'end_time': current_time,
            'duration_seconds': duration,
            'duration_minutes': duration / 60,
            'data_points_count': data_points,
            'max_volume': tracked['max_volume'],
            'total_trades': tracked['total_trades'],
            'summary': f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {symbol}: {duration/60:.1f} –º–∏–Ω, –º–∞–∫—Å. –æ–±—ä–µ–º ${tracked['max_volume']:,.0f}, {data_points} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö"
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        bot_logger.info(
            f"üèÅ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä: –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {symbol} - "
            f"{duration/60:.1f} –º–∏–Ω, –º–∞–∫—Å.–æ–±—ä–µ–º ${tracked['max_volume']:,.0f}, "
            f"{data_points} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
        )
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        del self.tracked_coins[symbol]
        
    def _finalize_all_activities(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        for symbol in list(self.tracked_coins.keys()):
            tracked = self.tracked_coins[symbol]
            duration = time.time() - tracked['start_time']
            
            if duration >= 60:  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
                self._finalize_activity(symbol)
            else:
                del self.tracked_coins[symbol]
                
    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        current_time = time.time()
        
        active_count = len(self.tracked_coins)
        active_symbols = list(self.tracked_coins.keys())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        durations = []
        for tracked in self.tracked_coins.values():
            duration = current_time - tracked['start_time']
            durations.append(duration)
            
        return {
            'running': self.running,
            'active_activities': active_count,
            'active_symbols': active_symbols,
            'avg_duration_minutes': (sum(durations) / len(durations) / 60) if durations else 0,
            'longest_activity_minutes': (max(durations) / 60) if durations else 0
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
autonomous_monitor = AutonomousActivityMonitor()
