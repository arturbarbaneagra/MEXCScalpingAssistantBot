import asyncio
import time
from typing import Dict, Optional, Any
from logger import bot_logger
from circuit_breaker import api_circuit_breakers

class APIRecoveryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è API —Å graceful degradation"""

    def __init__(self):
        self.fallback_data = {}
        self.last_successful_data = {}
        self.recovery_attempts = {}
        self.max_recovery_attempts = 3

    def store_successful_data(self, endpoint: str, symbol: str, data: Any):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback"""
        key = f"{endpoint}:{symbol}"
        self.last_successful_data[key] = {
            'data': data,
            'timestamp': time.time()
        }

    def get_fallback_data(self, endpoint: str, symbol: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        key = f"{endpoint}:{symbol}"
        if key in self.last_successful_data:
            stored = self.last_successful_data[key]
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
            if time.time() - stored['timestamp'] < 300:
                bot_logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è {key}")
                return stored['data']
        return None

    async def attempt_recovery(self, circuit_breaker_name: str) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Circuit Breaker"""
        if circuit_breaker_name not in self.recovery_attempts:
            self.recovery_attempts[circuit_breaker_name] = 0

        if self.recovery_attempts[circuit_breaker_name] >= self.max_recovery_attempts:
            return False

        self.recovery_attempts[circuit_breaker_name] += 1

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º Circuit Breaker –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if circuit_breaker_name in api_circuit_breakers:
            cb = api_circuit_breakers[circuit_breaker_name]
            cb.reset()
            bot_logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Circuit Breaker '{circuit_breaker_name}' #{self.recovery_attempts[circuit_breaker_name]}")

            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(5.0)
            return True

        return False

    def reset_recovery_attempts(self, circuit_breaker_name: str):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        if circuit_breaker_name in self.recovery_attempts:
            del self.recovery_attempts[circuit_breaker_name]

    def get_api_health_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è API"""
        from circuit_breaker import api_circuit_breakers

        status = {
            'recovery_attempts': dict(self.recovery_attempts),
            'circuit_breakers': {},
            'fallback_data_count': len(self.last_successful_data)
        }

        # –°—Ç–∞—Ç—É—Å Circuit Breaker'–æ–≤
        for name, cb in api_circuit_breakers.items():
            status['circuit_breakers'][name] = cb.get_status()

        return status

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
api_recovery_manager = APIRecoveryManager()