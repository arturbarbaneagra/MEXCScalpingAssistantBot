"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Welford
"""

import os
import json
import math
from typing import Dict, List
from datetime import datetime, timedelta
from logger import bot_logger


class ActivityLevelCalculator:
    def __init__(self):
        self.stats_file = "activity_stats.json"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Welford - —Ç–æ–ª—å–∫–æ —Ç—Ä–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.count = 0
        self.mean = 0.0
        self.M2 = 0.0  # –°—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._load_stats()

    def _load_stats(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if os.path.exists(self.stats_file):
            try:
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)

                self.count = data.get('count', 0)
                self.mean = data.get('mean', 0.0)
                self.M2 = data.get('M2', 0.0)

                std = self.get_std_dev()
                bot_logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: count={self.count}, mean={self.mean:.2f}, std={std:.2f}")

            except Exception as e:
                bot_logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                self._reset_stats()
        else:
            self._reset_stats()

    def _save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            data = {
                'count': self.count,
                'mean': self.mean,
                'M2': self.M2,
                'last_updated': datetime.now().isoformat()
            }

            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2)

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

    def _reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.count = 0
        self.mean = 0.0
        self.M2 = 0.0

    def update_with_new_value(self, new_value: float):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É Welford

        Args:
            new_value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        # –ê–ª–≥–æ—Ä–∏—Ç–º Welford –¥–ª—è –æ–Ω–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.count += 1
        delta = new_value - self.mean
        self.mean += delta / self.count
        delta2 = new_value - self.mean
        self.M2 += delta * delta2

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._save_stats()

        std = self.get_std_dev()
        bot_logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∑–Ω–∞—á–µ–Ω–∏–µ={new_value:.1f}–º–∏–Ω, —Å—Ä–µ–¥–Ω–µ–µ={self.mean:.2f}–º–∏–Ω, std={std:.2f}, count={self.count}")

    def get_variance(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Å–ø–µ—Ä—Å–∏—é"""
        if self.count < 2:
            return 0.0
        return self.M2 / (self.count - 1)

    def get_std_dev(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"""
        return math.sqrt(self.get_variance())

    def get_z_score(self, value: float) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç z-score –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è

        Args:
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–µ–Ω z-score

        Returns:
            Z-score (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)
        """
        if self.count < 2:
            return 0.0

        std_dev = self.get_std_dev()
        if std_dev == 0:
            return 0.0

        return (value - self.mean) / std_dev

    def get_last_24_hours_activity(self) -> List[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –Ω—É–ª—è–º–∏"""
        from datetime import datetime, timedelta
        import os
        import json

        now_moscow = datetime.now() + timedelta(hours=3)
        activities = []

        for i in range(24):
            hour_dt = now_moscow - timedelta(hours=i)

            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–∞—Ö —Å–µ—Å—Å–∏–π
            date_str = hour_dt.strftime('%Y-%m-%d')
            activity_found = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∑–∞ —ç—Ç—É –¥–∞—Ç—É
            filepath = os.path.join("session_data", f"sessions_{date_str}.json")
            if os.path.exists(filepath):
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        daily_data = json.load(f)

                    # –ò—â–µ–º —Å–µ—Å—Å–∏–∏ –≤ —ç—Ç–æ–º —á–∞—Å—É
                    hour_sessions = []
                    cutoff_start = hour_dt.replace(minute=0, second=0, microsecond=0).timestamp()
                    cutoff_end = cutoff_start + 3600  # +1 —á–∞—Å

                    for session in daily_data.get('sessions', []):
                        start_time = session.get('start_time', 0)
                        if cutoff_start <= start_time < cutoff_end:
                            hour_sessions.append(session)

                    if hour_sessions:
                        total_activity = sum(s.get('total_duration', 0) / 60 for s in hour_sessions)
                        activities.append(total_activity)
                        activity_found = True

                except Exception as e:
                    bot_logger.debug(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º 0.0
            if not activity_found:
                activities.append(0.0)

        return activities

    def calculate_activity_statistics_welford(self, activities: List[float]) -> Dict[str, float]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É Welford –¥–ª—è –í–°–ï–• 24 —á–∞—Å–æ–≤"""
        if not activities:
            return {'mean': 0.0, 'std': 0.0, 'count': 0}

        # –ê–ª–≥–æ—Ä–∏—Ç–º Welford –¥–ª—è –æ–Ω–ª–∞–π–Ω —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –¥–∏—Å–ø–µ—Ä—Å–∏–∏
        count = 0
        mean = 0.0
        M2 = 0.0  # —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π

        for activity in activities:
            count += 1
            delta = activity - mean
            mean += delta / count
            delta2 = activity - mean
            M2 += delta * delta2

        if count < 2:
            variance = 0.0
        else:
            variance = M2 / (count - 1)  # –≤—ã–±–æ—Ä–æ—á–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è

        std = variance ** 0.5

        return {
            'mean': mean,
            'std': std,
            'count': count,
            'variance': variance
        }

    def get_activity_level_info(self, total_activity_minutes: float) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

        Args:
            total_activity_minutes: –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Ä–æ–≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        z_score = self.get_z_score(total_activity_minutes)

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—â–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ—Ä–æ–≥–∏
        if self.count < 5:
            # –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            if total_activity_minutes >= 20:
                level = "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è"
                emoji = "üî•üî•üî•"
                color = "üü•"  # –ö—Ä–∞—Å–Ω—ã–π
            elif total_activity_minutes >= 15:
                level = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
                emoji = "üî•üî•"
                color = "üüß"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            elif total_activity_minutes >= 10:
                level = "–í—ã—Å–æ–∫–∞—è"
                emoji = "üî•"
                color = "üü®"  # –ñ–µ–ª—Ç—ã–π
            elif total_activity_minutes >= 7:
                level = "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π"
                emoji = "üìà"
                color = "üü©"  # –ó–µ–ª–µ–Ω—ã–π
            elif total_activity_minutes >= 4:
                level = "–°—Ä–µ–¥–Ω—è—è"
                emoji = "üìä"
                color = "üü¶"  # –°–∏–Ω–∏–π
            elif total_activity_minutes >= 2:
                level = "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π"
                emoji = "üìâ"
                color = "üü™"  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            elif total_activity_minutes >= 1:
                level = "–ù–∏–∑–∫–∞—è"
                emoji = "‚ùÑÔ∏è"
                color = "‚¨ú"  # –ë–µ–ª—ã–π
            else:
                level = "–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è"
                emoji = "üí§"
                color = "‚¨õ"  # –ß–µ—Ä–Ω—ã–π
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ z-score
            if z_score >= 2.0:
                level = "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è"
                emoji = "üî•üî•üî•"
                color = "üü•"  # –ö—Ä–∞—Å–Ω—ã–π
            elif z_score >= 1.5:
                level = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
                emoji = "üî•üî•"
                color = "üüß"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            elif z_score >= 1.0:
                level = "–í—ã—Å–æ–∫–∞—è"
                emoji = "üî•"
                color = "üü®"  # –ñ–µ–ª—Ç—ã–π
            elif z_score >= 0.5:
                level = "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π"
                emoji = "üìà"
                color = "üü©"  # –ó–µ–ª–µ–Ω—ã–π
            elif z_score >= -0.5:
                level = "–°—Ä–µ–¥–Ω—è—è"
                emoji = "üìä"
                color = "üü¶"  # –°–∏–Ω–∏–π
            elif z_score >= -1.0:
                level = "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π"
                emoji = "üìâ"
                color = "üü™"  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            elif z_score >= -1.5:
                level = "–ù–∏–∑–∫–∞—è"
                emoji = "‚ùÑÔ∏è"
                color = "‚¨ú"  # –ë–µ–ª—ã–π
            else:
                level = "–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è"
                emoji = "üí§"
                color = "‚¨õ"  # –ß–µ—Ä–Ω—ã–π

        return {
            'level': level,
            'emoji': emoji,
            'color': color,
            'z_score': z_score,
            'value': total_activity_minutes,
            'mean': self.mean,
            'std_dev': self.get_std_dev(),
            'count': self.count
        }

    def calculate_hourly_activity(self, sessions: List[Dict], hour_start: datetime) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —á–∞—Å–∞

        Args:
            sessions: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
            hour_start: –ù–∞—á–∞–ª–æ —á–∞—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞

        Returns:
            –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        total_activity = 0.0

        for session in sessions:
            duration = session.get('total_duration', 0) / 60  # –í –º–∏–Ω—É—Ç–∞—Ö
            total_activity += duration

        return total_activity

    def update_activity_stats(self, activity_value: float, hour_key: str = None):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        
        Args:
            activity_value: –ó–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            hour_key: –ö–ª—é—á —á–∞—Å–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ Welford)
        """
        self.update_with_new_value(activity_value)

    def get_stats_summary(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.count < 2:
            return {
                'count': self.count,
                'mean': self.mean if self.count > 0 else 0.0,
                'std_dev': 0.0,
                'variance': 0.0
            }

        return {
            'count': self.count,
            'mean': self.mean,
            'std_dev': self.get_std_dev(),
            'variance': self.get_variance()
        }

    def generate_24h_activity_report(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ 24 —á–∞—Å–∞
            activities = self.get_last_24_hours_activity()
            
            if not activities:
                return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.calculate_activity_statistics_welford(activities)
            total_activity = sum(activities)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_info = self.get_activity_level_info(total_activity)
            
            # –ù–∞—Ö–æ–¥–∏–º —á–∞—Å—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
            max_activity = max(activities)
            max_hour_index = activities.index(max_activity)
            
            # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã (—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é > 0)
            active_hours = sum(1 for a in activities if a > 0)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_lines = []
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            report_lines.append(f"{activity_info['color']} <b>–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_info['level']}</b> {activity_info['emoji']}")
            report_lines.append("")
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report_lines.append("<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:</b>")
            report_lines.append(f"‚Ä¢ –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{total_activity:.1f} –º–∏–Ω—É—Ç</b>")
            report_lines.append(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤: <b>{active_hours}/24</b>")
            report_lines.append(f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∑–∞ —á–∞—Å: <b>{max_activity:.1f} –º–∏–Ω</b> ({max_hour_index} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)")
            report_lines.append(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ —á–∞—Å: <b>{stats['mean']:.1f} –º–∏–Ω</b>")
            
            if stats['std'] > 0:
                report_lines.append(f"‚Ä¢ Z-score: <b>{activity_info['z_score']:.2f}</b>")
            
            report_lines.append("")
            
            # –¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤
            indexed_activities = [(i, act) for i, act in enumerate(activities) if act > 0]
            indexed_activities.sort(key=lambda x: x[1], reverse=True)
            
            if indexed_activities:
                report_lines.append("<b>üî• –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤:</b>")
                for i, (hour_idx, activity) in enumerate(indexed_activities[:5]):
                    hours_ago = hour_idx
                    if hours_ago == 0:
                        time_label = "—Ç–µ–∫—É—â–∏–π —á–∞—Å"
                    elif hours_ago == 1:
                        time_label = "1 —á–∞—Å –Ω–∞–∑–∞–¥"
                    else:
                        time_label = f"{hours_ago} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
                    
                    report_lines.append(f"‚Ä¢ <b>{activity:.1f} –º–∏–Ω</b> - {time_label}")
                
                report_lines.append("")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 12 —á–∞—Å–æ–≤
            report_lines.append("<b>üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤:</b>")
            visual_line = ""
            for i in range(12):
                activity = activities[i]
                if activity >= 10:
                    visual_line += "üî•"
                elif activity >= 5:
                    visual_line += "üî¥"
                elif activity >= 2:
                    visual_line += "üü°"
                elif activity >= 1:
                    visual_line += "üü¢"
                else:
                    visual_line += "‚ö™"
            
            report_lines.append(f"<code>{visual_line}</code>")
            report_lines.append("<i>üî•‚â•10–º–∏–Ω üî¥‚â•5–º–∏–Ω üü°‚â•2–º–∏–Ω üü¢‚â•1–º–∏–Ω ‚ö™<1–º–∏–Ω</i>")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏
            if self.count >= 5:
                report_lines.append("")
                report_lines.append(f"<i>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ {self.count} –Ω–∞–±–ª—é–¥–µ–Ω–∏—è—Ö</i>")
            else:
                report_lines.append("")
                report_lines.append(f"<i>‚ö†Ô∏è –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ({self.count} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π)</i>")
            
            return "\n".join(report_lines)
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
activity_calculator = ActivityLevelCalculator()