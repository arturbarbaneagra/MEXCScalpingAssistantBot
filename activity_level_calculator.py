"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Welford
"""

import os
import json
import time
import math
from typing import Dict, List, Tuple, Optional
from datetime import datetime, timedelta
from logger import bot_logger


class ActivityLevelCalculator:
    def __init__(self):
        self.stats_file = "activity_stats.json"
        self.processed_hours_file = "processed_hours.json"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Welford –¥–ª—è –æ–Ω–ª–∞–π–Ω —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –¥–∏—Å–ø–µ—Ä—Å–∏–∏
        self.count = 0
        self.mean = 0.0
        self.M2 = 0.0  # –°—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π

        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        self.processed_hours = set()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._load_stats()
        self._load_processed_hours()

    def _load_stats(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if os.path.exists(self.stats_file):
            try:
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)

                self.count = data.get('count', 0)
                self.mean = data.get('mean', 0.0)
                self.M2 = data.get('M2', 0.0)

                bot_logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: count={self.count}, mean={self.mean:.1f}")

            except Exception as e:
                bot_logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                self._reset_stats()
        else:
            self._reset_stats()

    def _save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            data = {
                'count': self.count,
                'mean': self.mean,
                'M2': self.M2,
                'last_updated': datetime.now().isoformat()
            }

            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2)

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

    def _load_processed_hours(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤"""
        if os.path.exists(self.processed_hours_file):
            try:
                with open(self.processed_hours_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.processed_hours = set(data.get('hours', []))

                bot_logger.debug(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.processed_hours)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤")

            except Exception as e:
                bot_logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤: {e}")
                self.processed_hours = set()
        else:
            self.processed_hours = set()

    def _save_processed_hours(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤"""
        try:
            data = {
                'hours': list(self.processed_hours),
                'last_updated': datetime.now().isoformat()
            }

            with open(self.processed_hours_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2)

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤: {e}")

    def _reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.count = 0
        self.mean = 0.0
        self.M2 = 0.0
        self.processed_hours = set()

    def update_activity_stats(self, new_value: float, hour_key: str = None):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (–∞–ª–≥–æ—Ä–∏—Ç–º Welford)
        –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —á–∞—Å—ã –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ, –≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ —á–∞—Å—ã –∫–∞–∫ 0

        Args:
            new_value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            hour_key: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —á–∞—Å–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–ª—é—á —á–∞—Å–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        if hour_key:
            if hour_key in self.processed_hours:
                bot_logger.debug(f"üìä –ß–∞—Å {hour_key} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —á–∞—Å, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if not self.processed_hours:
                self.processed_hours.add(hour_key)
                self._save_processed_hours()

                self.count += 1
                delta = new_value - self.mean
                self.mean += delta / self.count
                delta2 = new_value - self.mean
                self.M2 += delta * delta2

                self._save_stats()
                bot_logger.info(f"üìä –ü–µ—Ä–≤—ã–π —á–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω: —á–∞—Å={hour_key}, –∑–Ω–∞—á–µ–Ω–∏–µ={new_value:.1f}–º–∏–Ω, —Å—Ä–µ–¥–Ω–µ–µ={self.mean:.1f}–º–∏–Ω, count={self.count}")
                return

            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —á–∞—Å—ã –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–º –∏ —Ç–µ–∫—É—â–∏–º
            missing_hours = self._find_missing_hours(hour_key)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —á–∞—Å—ã —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 0
            for missing_hour in missing_hours:
                if missing_hour not in self.processed_hours:
                    bot_logger.debug(f"üìä –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —á–∞—Å {missing_hour} —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 0")
                    self.processed_hours.add(missing_hour)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Welford –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —á–∞—Å–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ = 0)
                    self.count += 1
                    delta = 0.0 - self.mean
                    self.mean += delta / self.count
                    delta2 = 0.0 - self.mean
                    self.M2 += delta * delta2

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å
            self.processed_hours.add(hour_key)
            self._save_processed_hours()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        self.count += 1
        delta = new_value - self.mean
        self.mean += delta / self.count
        delta2 = new_value - self.mean
        self.M2 += delta * delta2

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._save_stats()

        bot_logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: —á–∞—Å={hour_key}, –∑–Ω–∞—á–µ–Ω–∏–µ={new_value:.1f}–º–∏–Ω, —Å—Ä–µ–¥–Ω–µ–µ={self.mean:.1f}–º–∏–Ω, count={self.count}")

    def _find_missing_hours(self, current_hour_key: str) -> List[str]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —á–∞—Å—ã –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–º –∏ —Ç–µ–∫—É—â–∏–º —á–∞—Å–æ–º

        Args:
            current_hour_key: –¢–µ–∫—É—â–∏–π –∫–ª—é—á —á–∞—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD_HH"

        Returns:
            –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤
        """
        try:
            from datetime import datetime, timedelta

            if not self.processed_hours:
                return []

            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–π —á–∞—Å
            current_dt = datetime.strptime(current_hour_key, "%Y-%m-%d_%H")

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π —á–∞—Å
            sorted_hours = sorted(self.processed_hours)
            last_hour_key = sorted_hours[-1]
            last_dt = datetime.strptime(last_hour_key, "%Y-%m-%d_%H")

            missing_hours = []

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ —á–∞—Å—ã –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏ —Ç–µ–∫—É—â–∏–º
            current_check = last_dt + timedelta(hours=1)
            while current_check < current_dt:
                hour_key = current_check.strftime("%Y-%m-%d_%H")
                missing_hours.append(hour_key)
                current_check += timedelta(hours=1)

            return missing_hours

        except Exception as e:
            bot_logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤: {e}")
            return []

    def get_variance(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Å–ø–µ—Ä—Å–∏—é"""
        if self.count < 2:
            return 0.0
        return self.M2 / (self.count - 1)

    def get_std_dev(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"""
        return math.sqrt(self.get_variance())

    def get_z_score(self, value: float) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç z-score –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è

        Args:
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–µ–Ω z-score

        Returns:
            Z-score (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)
        """
        if self.count < 2:
            return 0.0

        std_dev = self.get_std_dev()
        if std_dev == 0:
            return 0.0

        return (value - self.mean) / std_dev

    def get_last_24_hours_activity(self) -> List[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –Ω—É–ª—è–º–∏"""
        from datetime import datetime, timedelta
        import os
        import json

        now_moscow = datetime.now() + timedelta(hours=3)
        activities = []

        for i in range(24):
            hour_dt = now_moscow - timedelta(hours=i)

            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–∞—Ö —Å–µ—Å—Å–∏–π
            date_str = hour_dt.strftime('%Y-%m-%d')
            hour_key = hour_dt.strftime('%H:00')

            activity_found = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∑–∞ —ç—Ç—É –¥–∞—Ç—É
            filepath = os.path.join("session_data", f"sessions_{date_str}.json")
            if os.path.exists(filepath):
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        daily_data = json.load(f)

                    # –ò—â–µ–º —Å–µ—Å—Å–∏–∏ –≤ —ç—Ç–æ–º —á–∞—Å—É
                    hour_sessions = []
                    cutoff_start = hour_dt.replace(minute=0, second=0, microsecond=0).timestamp()
                    cutoff_end = cutoff_start + 3600  # +1 —á–∞—Å

                    for session in daily_data.get('sessions', []):
                        start_time = session.get('start_time', 0)
                        if cutoff_start <= start_time < cutoff_end:
                            hour_sessions.append(session)

                    if hour_sessions:
                        total_activity = sum(s.get('total_duration', 0) / 60 for s in hour_sessions)
                        activities.append(total_activity)
                        activity_found = True

                except Exception as e:
                    bot_logger.debug(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º 0.0
            if not activity_found:
                activities.append(0.0)

        return activities

    def calculate_activity_statistics_welford(self, activities: List[float]) -> Dict[str, float]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É Welford –¥–ª—è –í–°–ï–• 24 —á–∞—Å–æ–≤"""
        if not activities:
            return {'mean': 0.0, 'std': 0.0, 'count': 0}

        # –ê–ª–≥–æ—Ä–∏—Ç–º Welford –¥–ª—è –æ–Ω–ª–∞–π–Ω —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –¥–∏—Å–ø–µ—Ä—Å–∏–∏
        # –í–∞–∂–Ω–æ: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –Ω—É–ª–∏!
        count = 0
        mean = 0.0
        M2 = 0.0  # —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π

        for activity in activities:
            count += 1
            delta = activity - mean
            mean += delta / count
            delta2 = activity - mean
            M2 += delta * delta2

        if count < 2:
            variance = 0.0
        else:
            variance = M2 / (count - 1)  # –≤—ã–±–æ—Ä–æ—á–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è

        std = variance ** 0.5

        return {
            'mean': mean,
            'std': std,
            'count': count,
            'variance': variance
        }

    def get_activity_level_info(self, total_activity_minutes: float) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

        Args:
            total_activity_minutes: –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Ä–æ–≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        z_score = self.get_z_score(total_activity_minutes)

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—â–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ—Ä–æ–≥–∏
        if self.count < 5:
            # –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            if total_activity_minutes >= 20:
                level = "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è"
                emoji = "üî•üî•üî•"
                color = "üü•"  # –ö—Ä–∞—Å–Ω—ã–π
            elif total_activity_minutes >= 15:
                level = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
                emoji = "üî•üî•"
                color = "üüß"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            elif total_activity_minutes >= 10:
                level = "–í—ã—Å–æ–∫–∞—è"
                emoji = "üî•"
                color = "üü®"  # –ñ–µ–ª—Ç—ã–π
            elif total_activity_minutes >= 7:
                level = "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π"
                emoji = "üìà"
                color = "üü©"  # –ó–µ–ª–µ–Ω—ã–π
            elif total_activity_minutes >= 4:
                level = "–°—Ä–µ–¥–Ω—è—è"
                emoji = "üìä"
                color = "üü¶"  # –°–∏–Ω–∏–π
            elif total_activity_minutes >= 2:
                level = "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π"
                emoji = "üìâ"
                color = "üü™"  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            elif total_activity_minutes >= 1:
                level = "–ù–∏–∑–∫–∞—è"
                emoji = "‚ùÑÔ∏è"
                color = "‚¨ú"  # –ë–µ–ª—ã–π
            else:
                level = "–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è"
                emoji = "üí§"
                color = "‚¨õ"  # –ß–µ—Ä–Ω—ã–π
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ z-score
            if z_score >= 2.0:
                level = "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è"
                emoji = "üî•üî•üî•"
                color = "üü•"  # –ö—Ä–∞—Å–Ω—ã–π
            elif z_score >= 1.5:
                level = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
                emoji = "üî•üî•"
                color = "üüß"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            elif z_score >= 1.0:
                level = "–í—ã—Å–æ–∫–∞—è"
                emoji = "üî•"
                color = "üü®"  # –ñ–µ–ª—Ç—ã–π
            elif z_score >= 0.5:
                level = "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π"
                emoji = "üìà"
                color = "üü©"  # –ó–µ–ª–µ–Ω—ã–π
            elif z_score >= -0.5:
                level = "–°—Ä–µ–¥–Ω—è—è"
                emoji = "üìä"
                color = "üü¶"  # –°–∏–Ω–∏–π
            elif z_score >= -1.0:
                level = "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π"
                emoji = "üìâ"
                color = "üü™"  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            elif z_score >= -1.5:
                level = "–ù–∏–∑–∫–∞—è"
                emoji = "‚ùÑÔ∏è"
                color = "‚¨ú"  # –ë–µ–ª—ã–π
            else:
                level = "–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è"
                emoji = "üí§"
                color = "‚¨õ"  # –ß–µ—Ä–Ω—ã–π

        return {
            'level': level,
            'emoji': emoji,
            'color': color,
            'z_score': z_score,
            'value': total_activity_minutes,
            'mean': self.mean,
            'std_dev': self.get_std_dev(),
            'count': self.count
        }

    def calculate_hourly_activity(self, sessions: List[Dict], hour_start: datetime) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —á–∞—Å–∞
        –ü—Ä–æ—Å—Ç–∞—è —Å—É–º–º–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –≤ —ç—Ç–æ–º —á–∞—Å—É

        Args:
            sessions: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
            hour_start: –ù–∞—á–∞–ª–æ —á–∞—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞

        Returns:
            –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        total_activity = 0.0

        for session in sessions:
            duration = session.get('total_duration', 0) / 60  # –í –º–∏–Ω—É—Ç–∞—Ö
            total_activity += duration

        return total_activity

    def get_stats_summary(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if self.count < 2:
            return {
                'count': self.count,
                'mean': self.mean if self.count > 0 else 0.0,
                'std_dev': 0.0,
                'variance': 0.0
            }

        return {
            'count': self.count,
            'mean': self.mean,
            'std_dev': self.get_std_dev(),
            'variance': self.get_variance()
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
activity_calculator = ActivityLevelCalculator()