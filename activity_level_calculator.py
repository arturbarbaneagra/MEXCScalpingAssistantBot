
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Welford
"""

import os
import json
import time
import math
from typing import Dict, List, Tuple, Optional
from datetime import datetime, timedelta
from logger import bot_logger


class ActivityLevelCalculator:
    def __init__(self):
        self.stats_file = "activity_stats.json"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Welford –¥–ª—è –æ–Ω–ª–∞–π–Ω —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –¥–∏—Å–ø–µ—Ä—Å–∏–∏
        self.count = 0
        self.mean = 0.0
        self.M2 = 0.0  # –°—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._load_stats()
    
    def _load_stats(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if os.path.exists(self.stats_file):
            try:
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                self.count = data.get('count', 0)
                self.mean = data.get('mean', 0.0)
                self.M2 = data.get('M2', 0.0)
                
                bot_logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: count={self.count}, mean={self.mean:.1f}")
                
            except Exception as e:
                bot_logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                self._reset_stats()
        else:
            self._reset_stats()
    
    def _save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            data = {
                'count': self.count,
                'mean': self.mean,
                'M2': self.M2,
                'last_updated': datetime.now().isoformat()
            }
            
            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2)
                
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    def _reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.count = 0
        self.mean = 0.0
        self.M2 = 0.0
    
    def update_activity_stats(self, new_value: float):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (–∞–ª–≥–æ—Ä–∏—Ç–º Welford)
        
        Args:
            new_value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        self.count += 1
        delta = new_value - self.mean
        self.mean += delta / self.count
        delta2 = new_value - self.mean
        self.M2 += delta * delta2
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if self.count % 10 == 0:
            self._save_stats()
    
    def get_variance(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Å–ø–µ—Ä—Å–∏—é"""
        if self.count < 2:
            return 0.0
        return self.M2 / (self.count - 1)
    
    def get_std_dev(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"""
        return math.sqrt(self.get_variance())
    
    def get_z_score(self, value: float) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç z-score –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è
        
        Args:
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–µ–Ω z-score
            
        Returns:
            Z-score (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)
        """
        if self.count < 2:
            return 0.0
        
        std_dev = self.get_std_dev()
        if std_dev == 0:
            return 0.0
        
        return (value - self.mean) / std_dev
    
    def get_activity_level_info(self, total_activity_minutes: float) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        Args:
            total_activity_minutes: –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Ä–æ–≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        z_score = self.get_z_score(total_activity_minutes)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ z-score
        if z_score >= 2.0:
            level = "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è"
            emoji = "üî•üî•üî•"
            color = "üü•"  # –ö—Ä–∞—Å–Ω—ã–π
        elif z_score >= 1.5:
            level = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
            emoji = "üî•üî•"
            color = "üüß"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        elif z_score >= 1.0:
            level = "–í—ã—Å–æ–∫–∞—è"
            emoji = "üî•"
            color = "üü®"  # –ñ–µ–ª—Ç—ã–π
        elif z_score >= 0.5:
            level = "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π"
            emoji = "üìà"
            color = "üü©"  # –ó–µ–ª–µ–Ω—ã–π
        elif z_score >= -0.5:
            level = "–°—Ä–µ–¥–Ω—è—è"
            emoji = "üìä"
            color = "üü¶"  # –°–∏–Ω–∏–π
        elif z_score >= -1.0:
            level = "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π"
            emoji = "üìâ"
            color = "üü™"  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        elif z_score >= -1.5:
            level = "–ù–∏–∑–∫–∞—è"
            emoji = "‚ùÑÔ∏è"
            color = "‚¨ú"  # –ë–µ–ª—ã–π
        else:
            level = "–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è"
            emoji = "üí§"
            color = "‚¨õ"  # –ß–µ—Ä–Ω—ã–π
        
        return {
            'level': level,
            'emoji': emoji,
            'color': color,
            'z_score': z_score,
            'value': total_activity_minutes,
            'mean': self.mean,
            'std_dev': self.get_std_dev(),
            'count': self.count
        }
    
    def calculate_hourly_activity(self, sessions: List[Dict], hour_start: datetime) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —á–∞—Å–∞
        
        Args:
            sessions: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
            hour_start: –ù–∞—á–∞–ª–æ —á–∞—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            
        Returns:
            –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        hour_end = hour_start + timedelta(hours=1)
        hour_start_ts = hour_start.timestamp()
        hour_end_ts = hour_end.timestamp()
        
        total_activity = 0.0
        
        for session in sessions:
            session_start = session.get('start_time', 0)
            session_end = session.get('end_time', 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å —á–∞—Å–æ–º
            overlap_start = max(session_start, hour_start_ts)
            overlap_end = min(session_end, hour_end_ts)
            
            if overlap_start < overlap_end:
                overlap_duration = (overlap_end - overlap_start) / 60  # –í –º–∏–Ω—É—Ç–∞—Ö
                total_activity += overlap_duration
        
        return total_activity
    
    def get_stats_summary(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            'count': self.count,
            'mean': self.mean,
            'std_dev': self.get_std_dev(),
            'variance': self.get_variance()
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
activity_calculator = ActivityLevelCalculator()
