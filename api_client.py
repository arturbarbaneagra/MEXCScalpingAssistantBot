import asyncio
import time
import aiohttp
from typing import Optional, Dict, List, Any
from logger import bot_logger
from config import config_manager

class APIClient:
    def __init__(self):
        self.base_url = "https://api.mexc.com/api/v3"
        self.session: Optional[aiohttp.ClientSession] = None
        self.last_request_time = 0
        self.request_count = 0
        self.start_time = time.time()

    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç HTTP —Å–µ—Å—Å–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        if self.session is None or self.session.closed:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤
            timeout = aiohttp.ClientTimeout(
                total=config_manager.get('API_TIMEOUT', 12),
                connect=5,
                sock_read=10
            )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            connector = aiohttp.TCPConnector(
                limit=20,
                limit_per_host=10,
                ttl_dns_cache=300,
                use_dns_cache=True,
                keepalive_timeout=30,
                enable_cleanup_closed=True
            )

            self.session = aiohttp.ClientSession(
                timeout=timeout,
                connector=connector,
                headers={
                    'User-Agent': 'TradingBot/2.0',
                    'Accept': 'application/json'
                }
            )
            bot_logger.debug("üîÑ HTTP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")

        return self.session

    async def _make_request(self, endpoint: str, params: Dict = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ retry –ª–æ–≥–∏–∫–æ–π"""
        url = f"{self.base_url}{endpoint}"

        # Rate limiting
        await self._rate_limit()

        max_retries = config_manager.get('MAX_RETRIES', 2)

        for attempt in range(max_retries + 1):
            start_time = time.time()

            try:
                session = await self._get_session()

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
                async with session.get(url, params=params) as response:
                    request_time = time.time() - start_time

                    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                    bot_logger.api_request("GET", url, response.status, request_time)

                    if response.status == 200:
                        data = await response.json()
                        return data
                    elif response.status == 429:  # Rate limit
                        bot_logger.warning(f"Rate limit hit, waiting...")
                        await asyncio.sleep(2 ** attempt)
                        continue
                    else:
                        bot_logger.warning(f"API error {response.status} for {endpoint}")
                        return None

            except asyncio.TimeoutError:
                bot_logger.debug(f"Timeout on attempt {attempt + 1} for {endpoint}")
                if attempt < max_retries:
                    await asyncio.sleep(1)
                    continue
                return None
            except aiohttp.ClientError as e:
                bot_logger.debug(f"Client error on attempt {attempt + 1}: {type(e).__name__}")
                if attempt < max_retries:
                    await asyncio.sleep(1)
                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    await self.close()
                    continue
                return None
            except Exception as e:
                error_msg = str(e)
                # –°–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ timeout context manager
                if "timeout context manager" in error_msg.lower():
                    bot_logger.debug(f"Timeout context error on attempt {attempt + 1}")
                else:
                    bot_logger.debug(f"Request exception on attempt {attempt + 1}: {type(e).__name__}")

                if attempt < max_retries:
                    await asyncio.sleep(1)
                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    await self.close()
                    continue
                return None

        return None

    async def get_ticker_data(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        params = {'symbol': f"{symbol}USDT"}
        return await self._make_request("/ticker/24hr", params)

    async def get_book_ticker(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤ (bid/ask)"""
        params = {'symbol': f"{symbol}USDT"}
        return await self._make_request("/ticker/bookTicker", params)

    async def get_klines(self, symbol: str, interval: str = "1m", limit: int = 2) -> Optional[List]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π"""
        params = {
            'symbol': f"{symbol}USDT",
            'interval': interval,
            'limit': limit
        }
        return await self._make_request("/klines", params)

    async def get_multiple_tickers_batch(self, symbols: List[str]) -> Dict[str, Optional[Dict]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        results = {}

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        try:
            all_tickers = await self._make_request("/ticker/24hr")
            if all_tickers:
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ —Å–∏–º–≤–æ–ª–∞–º
                ticker_dict = {ticker['symbol'].replace('USDT', ''): ticker 
                             for ticker in all_tickers 
                             if ticker['symbol'].endswith('USDT')}

                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for symbol in symbols:
                    results[symbol] = ticker_dict.get(symbol)
            else:
                # Fallback - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É
                for symbol in symbols:
                    results[symbol] = await self.get_ticker_data(symbol)
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ batch –∑–∞–ø—Ä–æ—Å–∞ —Ç–∏–∫–µ—Ä–æ–≤: {e}")
            # Fallback - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É
            for symbol in symbols:
                try:
                    results[symbol] = await self.get_ticker_data(symbol)
                except Exception as sym_e:
                    bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ {symbol}: {sym_e}")
                    results[symbol] = None

        return results

    def _calculate_natr(self, klines: List) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç NATR (Normalized Average True Range)"""
        if not klines or len(klines) < 2:
            return 0.0

        try:
            # klines —Ñ–æ—Ä–º–∞—Ç: [timestamp, open, high, low, close, volume, ...]
            current = klines[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞
            previous = klines[-2]  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞

            high = float(current[2])
            low = float(current[3])
            prev_close = float(previous[4])
            close = float(current[4])

            # True Range
            tr1 = high - low
            tr2 = abs(high - prev_close)
            tr3 = abs(low - prev_close)
            true_range = max(tr1, tr2, tr3)

            # Normalized –ø–æ —Ü–µ–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            if close > 0:
                natr = (true_range / close) * 100
                return round(natr, 2)
            return 0.0
        except (IndexError, ValueError, TypeError):
            return 0.0

    async def get_recent_trades(self, symbol: str, limit: int = 500) -> Optional[List]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        params = {
            'symbol': f"{symbol}USDT",
            'limit': limit
        }
        return await self._make_request("/trades", params)

    async def get_trades_last_minute(self, symbol: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            trades = await self.get_recent_trades(symbol, 1000)
            if not trades:
                return 0

            current_time = time.time() * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            minute_ago = current_time - 60000  # 60 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥

            # –°—á–∏—Ç–∞–µ–º —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
            trades_count = 0
            for trade in trades:
                if isinstance(trade, dict) and 'time' in trade:
                    trade_time = int(trade['time'])
                    if trade_time >= minute_ago:
                        trades_count += 1
                    else:
                        # –°–¥–µ–ª–∫–∏ –∏–¥—É—Ç –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏, –º–æ–∂–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å
                        break

            bot_logger.debug(f"{symbol}: –°–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É: {trades_count}")
            return trades_count

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –¥–ª—è {symbol}: {e}")
            return 0

    async def get_coin_data(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–æ–Ω–µ—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ 1-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [
                self.get_ticker_data(symbol),  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                self.get_book_ticker(symbol),
                self.get_klines(symbol, "1m", 2),
                self.get_trades_last_minute(symbol)
            ]

            ticker_data, book_data, klines_data, trades_1m = await asyncio.gather(*tasks, return_exceptions=True)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if isinstance(ticker_data, Exception) or not ticker_data:
                bot_logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω—ã –¥–ª—è {symbol}")
                return None

            if isinstance(book_data, Exception) or not book_data:
                bot_logger.warning(f"–ù–µ—Ç book ticker –¥–ª—è {symbol}")
                return None

            if isinstance(klines_data, Exception) or not klines_data:
                bot_logger.warning(f"–ù–µ—Ç 1–º klines –¥–ª—è {symbol}")
                volume_1m_usdt = 0
                change_1m = 0
                natr = 0
            else:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—ë–º –∑–∞ 1 –º–∏–Ω—É—Ç—É –∏–∑ klines
                last_candle = klines_data[-1] if klines_data else None
                if last_candle:
                    volume_1m_usdt = float(last_candle[7])  # quoteAssetVolume - –æ–±–æ—Ä–æ—Ç –≤ USDT
                    open_price = float(last_candle[1])
                    close_price = float(last_candle[4])
                    high_price = float(last_candle[2])
                    low_price = float(last_candle[3])

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 1 –º–∏–Ω—É—Ç—É
                    if open_price > 0:
                        change_1m = ((close_price - open_price) / open_price) * 100
                    else:
                        change_1m = 0

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º NATR –∑–∞ 1 –º–∏–Ω—É—Ç—É
                    if open_price > 0:
                        true_range = max(
                            high_price - low_price,
                            abs(high_price - open_price),
                            abs(low_price - open_price)
                        )
                        natr = (true_range / open_price) * 100
                    else:
                        natr = 0
                else:
                    volume_1m_usdt = 0
                    change_1m = 0
                    natr = 0

            bot_logger.info(f"{symbol}: 1m volume={volume_1m_usdt:.2f} USDT –∏–∑ klines")

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∑–∞ 1 –º–∏–Ω—É—Ç—É
            trades_count = 0
            if not isinstance(trades_1m, Exception) and isinstance(trades_1m, int):
                trades_count = trades_1m

            bot_logger.info(f"{symbol}: –¢–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - volume={volume_1m_usdt:.2f} USDT, trades={trades_count}")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
            bid_price = float(book_data['bidPrice'])
            ask_price = float(book_data['askPrice'])
            mid_price = (bid_price + ask_price) / 2
            spread = ((ask_price - bid_price) / mid_price) * 100 if mid_price > 0 else 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ 1-–º–∏–Ω—É—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            vol_thresh = config_manager.get('VOLUME_THRESHOLD')
            spread_thresh = config_manager.get('SPREAD_THRESHOLD')
            natr_thresh = config_manager.get('NATR_THRESHOLD')

            is_active = (
                volume_1m_usdt >= vol_thresh and
                spread >= spread_thresh and
                natr >= natr_thresh
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥)
            has_recent_trades = trades_count > 0

            price = float(ticker_data['lastPrice']) if ticker_data else 0

            return {
                'symbol': symbol,
                'price': price,
                'volume': volume_1m_usdt,  # 1-–º–∏–Ω—É—Ç–Ω—ã–π –æ–±–æ—Ä–æ—Ç –≤ USDT
                'change': change_1m,  # 1-–º–∏–Ω—É—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                'spread': spread,
                'natr': natr,  # 1-–º–∏–Ω—É—Ç–Ω—ã–π NATR
                'trades': trades_count,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∑–∞ 1 –º–∏–Ω—É—Ç—É
                'active': is_active,
                'has_recent_trades': has_recent_trades,
                'timestamp': time.time()
            }

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None

    async def _rate_limit(self):
        """–†–µ–∞–ª–∏–∑—É–µ—Ç rate limiting"""
        interval = time.time() - self.last_request_time
        if interval < 0.1:
            await asyncio.sleep(0.1 - interval)
        self.last_request_time = time.time()

    async def close(self):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç HTTP —Å–µ—Å—Å–∏—é –∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã"""
        if self.session and not self.session.closed:
            try:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                await self.session.close()

                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                await asyncio.sleep(0.1)

                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º event loop –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                if hasattr(self.session, '_connector') and self.session._connector:
                    await self.session._connector.close()

                bot_logger.debug("HTTP —Å–µ—Å—Å–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                bot_logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ HTTP —Å–µ—Å—Å–∏–∏: {type(e).__name__}")
            finally:
                self.session = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
api_client = APIClient()