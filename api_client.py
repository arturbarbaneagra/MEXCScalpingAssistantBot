import asyncio
import time
import aiohttp
from typing import Optional, Dict, List, Any
from logger import bot_logger
from config import config_manager

class APIClient:
    def __init__(self):
        self.base_url = "https://api.mexc.com/api/v3"
        self.session: Optional[aiohttp.ClientSession] = None
        self.session_created_at = 0
        self.session_lifetime = 300  # 5 –º–∏–Ω—É—Ç
        self.request_timeout = 10
        self.max_retries = 2

    async def _ensure_session(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        current_time = time.time()

        if (self.session is None or 
            self.session.closed or 
            current_time - self.session_created_at > self.session_lifetime):

            if self.session and not self.session.closed:
                try:
                    await self.session.close()
                except Exception as e:
                    bot_logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç–∞—Ä–æ–π —Å–µ—Å—Å–∏–∏: {e}")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            timeout = aiohttp.ClientTimeout(total=self.request_timeout)
            connector = aiohttp.TCPConnector(
                limit=100,
                limit_per_host=50,
                ttl_dns_cache=300,
                use_dns_cache=True,
                keepalive_timeout=60,
                enable_cleanup_closed=True
            )

            self.session = aiohttp.ClientSession(
                timeout=timeout,
                connector=connector,
                headers={'User-Agent': 'TradingBot/2.0'}
            )
            self.session_created_at = current_time
            bot_logger.info("üîÑ –ù–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTTP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")

    async def _make_request(self, endpoint: str, params: Dict = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        await self._ensure_session()

        url = f"{self.base_url}{endpoint}"

        for attempt in range(1, self.max_retries + 1):
            try:
                start_time = time.time()

                async with self.session.get(url, params=params) as response:
                    response_time = time.time() - start_time

                    if response.status == 200:
                        data = await response.json()
                        bot_logger.api_request("GET", url, response.status, response_time)
                        return data
                    else:
                        bot_logger.warning(f"API –æ—à–∏–±–∫–∞ {response.status} –¥–ª—è {endpoint}")
                        if attempt == self.max_retries:
                            return None
                        await asyncio.sleep(1)

            except asyncio.TimeoutError:
                bot_logger.warning(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {endpoint}")
                if attempt == self.max_retries:
                    return None
                await asyncio.sleep(1)

            except Exception as e:
                error_msg = str(e)
                bot_logger.error(f"Request exception on attempt {attempt}: {error_msg}")

                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
                if any(phrase in error_msg.lower() for phrase in [
                    "session is closed", "timeout context manager", 
                    "connection", "ssl", "server disconnected"
                ]):
                    self.session = None
                    await self._ensure_session()

                if attempt == self.max_retries:
                    return None
                await asyncio.sleep(1)

        return None

    async def get_ticker_data(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        params = {'symbol': f"{symbol}USDT"}
        return await self._make_request("/ticker/24hr", params)

    async def get_book_ticker(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤ (bid/ask)"""
        params = {'symbol': f"{symbol}USDT"}
        return await self._make_request("/ticker/bookTicker", params)

    async def get_klines(self, symbol: str, interval: str = "1m", limit: int = 2) -> Optional[List]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π"""
        params = {
            'symbol': f"{symbol}USDT",
            'interval': interval,
            'limit': limit
        }
        return await self._make_request("/klines", params)

    async def get_multiple_tickers_batch(self, symbols: List[str]) -> Dict[str, Optional[Dict]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        results = {}

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        try:
            all_tickers = await self._make_request("/ticker/24hr")
            if all_tickers:
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ —Å–∏–º–≤–æ–ª–∞–º
                ticker_dict = {ticker['symbol'].replace('USDT', ''): ticker 
                             for ticker in all_tickers 
                             if ticker['symbol'].endswith('USDT')}

                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for symbol in symbols:
                    results[symbol] = ticker_dict.get(symbol)
            else:
                # Fallback - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É
                for symbol in symbols:
                    results[symbol] = await self.get_ticker_data(symbol)
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ batch –∑–∞–ø—Ä–æ—Å–∞ —Ç–∏–∫–µ—Ä–æ–≤: {e}")
            # Fallback - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É
            for symbol in symbols:
                try:
                    results[symbol] = await self.get_ticker_data(symbol)
                except Exception as sym_e:
                    bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ {symbol}: {sym_e}")
                    results[symbol] = None

        return results

    def _calculate_natr(self, klines: List) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç NATR (Normalized Average True Range)"""
        if not klines or len(klines) < 2:
            return 0.0

        try:
            # klines —Ñ–æ—Ä–º–∞—Ç: [timestamp, open, high, low, close, volume, ...]
            current = klines[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞
            previous = klines[-2]  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞

            high = float(current[2])
            low = float(current[3])
            prev_close = float(previous[4])
            close = float(current[4])

            # True Range
            tr1 = high - low
            tr2 = abs(high - prev_close)
            tr3 = abs(low - prev_close)
            true_range = max(tr1, tr2, tr3)

            # Normalized –ø–æ —Ü–µ–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            if close > 0:
                natr = (true_range / close) * 100
                return round(natr, 2)
            return 0.0
        except (IndexError, ValueError, TypeError):
            return 0.0

    async def get_coin_data(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –≤–∫–ª—é—á–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫"""
        try:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            ticker_task = self.get_ticker_data(symbol)
            book_task = self.get_book_ticker(symbol)
            klines_task = self.get_klines(symbol)

            ticker_data, book_data, klines_data = await asyncio.gather(
                ticker_task, book_task, klines_task, return_exceptions=True
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if isinstance(ticker_data, Exception) or not ticker_data:
                return None
            if isinstance(book_data, Exception) or not book_data:
                return None
            if isinstance(klines_data, Exception) or not klines_data:
                return None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            price = float(ticker_data['lastPrice'])
            change_24h = float(ticker_data['priceChangePercent'])
            volume_24h = float(ticker_data['quoteVolume'])

            # –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∑–∞ 1 –º–∏–Ω—É—Ç—É –∏–∑ ticker_data!
            trades_1m = int(ticker_data.get('count', 0))  # count = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∑–∞ 24—á

            # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ 1–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            # –ù–æ ticker/24hr –Ω–µ –¥–∞–µ—Ç 1–º –¥–∞–Ω–Ω—ã–µ, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º klines
            if klines_data and len(klines_data) > 0:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–Ω–∞—è —Å–≤–µ—á–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
                last_candle = klines_data[-1]
                if len(last_candle) > 8:
                    trades_1m = int(last_candle[8])  # 8-–π —ç–ª–µ–º–µ–Ω—Ç = count (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫)

            bid_price = float(book_data['bidPrice'])
            ask_price = float(book_data['askPrice'])

            # –í—ã—á–∏—Å–ª—è–µ–º —Å–ø—Ä–µ–¥
            spread = ((ask_price - bid_price) / bid_price) * 100 if bid_price > 0 else 0

            # –í—ã—á–∏—Å–ª—è–µ–º NATR
            natr = self._calculate_natr(klines_data) if klines_data else 0.0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            from config import config_manager
            vol_threshold = config_manager.get('VOLUME_THRESHOLD')
            spread_threshold = config_manager.get('SPREAD_THRESHOLD')
            natr_threshold = config_manager.get('NATR_THRESHOLD')

            is_active = (
                volume_24h >= vol_threshold and
                spread >= spread_threshold and
                natr >= natr_threshold
            )

            return {
                'symbol': symbol,
                'price': price,
                'change': change_24h,
                'volume': volume_24h,
                'trades': trades_1m,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∑–∞ 1 –º–∏–Ω—É—Ç—É
                'spread': round(spread, 2),
                'natr': natr,
                'active': is_active,
                'timestamp': time.time()
            }

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é"""
        if self.session and not self.session.closed:
            try:
                await self.session.close()
                bot_logger.debug("API —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                bot_logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è API —Å–µ—Å—Å–∏–∏: {e}")
        self.session = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
api_client = APIClient()