"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞
"""

import os
import time
from datetime import datetime, timedelta
from typing import Dict, List
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from logger import bot_logger
from user_manager import user_manager
import asyncio
#from activity_monitor import ActivityMonitor #Fixed import error
#from activity_monitor import activity_monitor


class AdminHandlers:
    def __init__(self, bot_instance):
        self.bot = bot_instance

    def get_admin_keyboard(self) -> ReplyKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return ReplyKeyboardMarkup([
            ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ûñ –£–¥–∞–ª–∏—Ç—å"],
            ["üìã –°–ø–∏—Å–æ–∫", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
            ["üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á", "‚Ñπ –°—Ç–∞—Ç—É—Å"],
            ["üë• –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", "üìã –õ–æ–≥–∏"],
            ["üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
            ["üõë –°—Ç–æ–ø"]
        ], resize_keyboard=True, one_time_keyboard=False)

    async def handle_pending_requests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫'"""
        if not user_manager.is_admin(update.effective_chat.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        pending_requests = user_manager.get_pending_requests()

        if not pending_requests:
            await update.message.reply_text(
                "üì≠ <b>–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</b>",
                parse_mode=ParseMode.HTML,
                reply_markup=self.bot.admin_keyboard
            )
            return

        text = f"üë• <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ({len(pending_requests)}):</b>\n\n"

        keyboard = []

        for request in pending_requests:
            username = request.get('username', 'Unknown')
            first_name = request.get('first_name', 'Unknown')
            request_time = datetime.fromisoformat(request['request_datetime']).strftime('%d.%m %H:%M')

            text += (
                f"üë§ <b>{first_name}</b>\n"
                f"‚Ä¢ Username: @{username}\n"
                f"‚Ä¢ ID: <code>{request['chat_id']}</code>\n"
                f"‚Ä¢ –í—Ä–µ–º—è: {request_time}\n\n"
            )

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
            row = [
                InlineKeyboardButton(
                    f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å {first_name}", 
                    callback_data=f"approve_{request['chat_id']}"
                ),
                InlineKeyboardButton(
                    f"‚ùå –û—Ç–∫–∞–∑–∞—Ç—å {first_name}", 
                    callback_data=f"reject_{request['chat_id']}"
                )
            ]
            keyboard.append(row)

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )

    async def handle_approve_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_manager.is_admin(update.effective_chat.id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        target_chat_id = int(chat_id)

        if user_manager.approve_user(chat_id):
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            try:
                await self.bot.app.bot.send_message(
                    chat_id=target_chat_id,
                    text=(
                        "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞."
                    ),
                    parse_mode=ParseMode.HTML
                )

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX

                user_watchlist = user_manager.get_user_watchlist(target_chat_id)

                welcome_text = (
                    "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MEXCScalping Assistant!</b>\n\n"
                    "üìä <b>–í–∞—à–∏ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</b>\n"
                    "‚Ä¢ üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n"
                    "‚Ä¢ üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –º–æ–Ω–µ—Ç\n\n"
                    "‚öô <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
                    "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫\n"
                    "‚Ä¢ ‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                    "‚Ä¢ üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã\n"
                    "‚Ä¢ ‚öô –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
                )

                # –ï—Å–ª–∏ –Ω–µ—Ç –º–æ–Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                if not user_watchlist:
                    welcome_text += (
                        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –£ –≤–∞—Å –Ω–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!\n"
                        "–ù–∞–∂–º–∏—Ç–µ ‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å</b> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É.\n\n"
                        "üí° <b>–°–æ–≤–µ—Ç:</b> –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ ‚öô <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
                        "–¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.\n\n"
                    )
                else:
                    welcome_text += f"üìã <b>–í–∞—à–∏ –º–æ–Ω–µ—Ç—ã:</b> {len(user_watchlist)} —à—Ç.\n\n"

                welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

                await self.bot.app.bot.send_message(
                    chat_id=target_chat_id,
                    text=welcome_text,
                    reply_markup=self.bot.user_keyboard,
                    parse_mode=ParseMode.HTML
                )

            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")

            await update.callback_query.edit_message_text(
                text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ–¥–æ–±—Ä–µ–Ω –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω",
                parse_mode=ParseMode.HTML
            )


        else:
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    async def handle_reject_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_manager.is_admin(update.effective_chat.id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        if user_manager.reject_user(chat_id):
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            try:
                await self.bot.app.bot.send_message(
                    chat_id=chat_id,
                    text=(
                        "üòî <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ, –Ω–∞–∂–∞–≤ /start"
                    ),
                    parse_mode=ParseMode.HTML
                )

                await update.callback_query.edit_message_text(
                    text=f"‚ùå –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
                )

            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
                await update.callback_query.edit_message_text(
                    text=f"‚ùå –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                )
        else:
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")

    async def handle_logs_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–õ–æ–≥–∏' - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è"""
        if not user_manager.is_admin(update.effective_chat.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        try:
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
            log_files = []

            # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
            if os.path.exists("trading_bot.log"):
                log_files.append(("trading_bot.log", "–û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥"))

            # –†–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2)
            for i in range(1, 3):
                log_file = f"trading_bot.log.{i}"
                if os.path.exists(log_file):
                    log_files.append((log_file, f"–õ–æ–≥ {i}"))

            if not log_files:
                await update.message.reply_text(
                    "üìã –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    reply_markup=self.bot.admin_keyboard
                )
                return

            await update.message.reply_text(
                f"üìã <b>–û—Ç–ø—Ä–∞–≤–ª—è—é –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏...</b>\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(log_files)}",
                parse_mode=ParseMode.HTML
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ª–æ–≥–∞
            for log_file, description in log_files:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    file_size = os.path.getsize(log_file)

                    if file_size > 50 * 1024 * 1024:  # 50MB –ª–∏–º–∏—Ç Telegram
                        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                        with open(log_file, 'r', encoding='utf-8') as f:
                            lines = f.readlines()
                            last_lines = lines[-1000:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫

                        content = ''.join(last_lines)

                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        temp_file = f"temp_{log_file}"
                        with open(temp_file, 'w', encoding='utf-8') as f:
                            f.write(f"=== –ü–û–°–õ–ï–î–ù–ò–ï 1000 –°–¢–†–û–ö –ò–ó {log_file} ===\n\n")
                            f.write(content)

                        with open(temp_file, 'rb') as f:
                            await update.message.reply_document(
                                document=f,
                                caption=f"üìã {description} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫)",
                                reply_markup=self.bot.admin_keyboard
                            )

                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        os.remove(temp_file)
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ñ–∞–π–ª
                        with open(log_file, 'rb') as f:
                            await update.message.reply_document(
                                document=f,
                                caption=f"üìã {description} ({file_size // 1024} KB)",
                                filename=log_file,
                                reply_markup=self.bot.admin_keyboard
                            )

                    await context.bot.send_chat_action(
                        chat_id=update.effective_chat.id, 
                        action="upload_document"
                    )

                except Exception as e:
                    bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ {log_file}: {e}")
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {description}: {str(e)[:100]}"
                    )

            await update.message.reply_text(
                "‚úÖ <b>–õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</b>",
                parse_mode=ParseMode.HTML,
                reply_markup=self.bot.admin_keyboard
            )

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–æ–≤: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)[:100]}",
                reply_markup=self.bot.admin_keyboard
            )

    async def handle_clear_all_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞"""
        if not user_manager.is_admin(update.effective_chat.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
        stats_before = user_manager.get_stats()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–µ–∂–∏–º—ã –ö–†–û–ú–ï –∞–¥–º–∏–Ω–∞
        if hasattr(self.bot, 'user_modes_manager') and self.bot.user_modes_manager:
            admin_id = str(update.effective_chat.id)

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞
            for user_id in list(self.bot.user_modes_manager.user_modes.keys()):
                if user_id != admin_id:
                    await self.bot.user_modes_manager.stop_user_mode(user_id)

        # –û—á–∏—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞
        cleared_count = user_manager.clear_all_users_except_admin()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_keyboard = self.get_admin_keyboard()

        await update.message.reply_text(
            f"üßπ <b>–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {cleared_count}\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {stats_before['pending_requests']}\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {stats_before.get('rejected_users', 0)}\n\n"
            f"‚úÖ –û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"‚öôÔ∏è –†–µ–∂–∏–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            reply_markup=self.bot.admin_keyboard,
            parse_mode=ParseMode.HTML
        )

    async def handle_user_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        if not user_manager.is_admin(update.effective_chat.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        stats = user_manager.get_stats()
        users = user_manager.get_all_users()

        text = (
            f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"‚Ä¢ –ó–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending_requests']}\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É: {stats['completed_setup']}\n\n"
        )

        keyboard = []

        if users:
            text += "üë§ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                setup_status = "‚úÖ" if user.get('setup_completed', False) else "‚öôÔ∏è"
                watchlist_count = len(user.get('watchlist', []))
                last_activity = datetime.fromtimestamp(user['last_activity']).strftime('%d.%m %H:%M')

                user_data = user_manager.get_user_data(user['chat_id'])
                user_config = user_data.get('config', {}) if user_data else {}

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_watchlist = user_manager.get_user_watchlist(user['chat_id'])

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                current_mode = self.bot.user_modes_manager.get_user_mode(user['chat_id'])
                mode_status = f"üü¢ {current_mode}" if current_mode else "üî¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

                text += (
                    f"üë§ <b>{user['first_name']}</b>\n"
                    f"‚Ä¢ ID: <code>{user['chat_id']}</code>\n"
                    f"‚Ä¢ Username: @{user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚Ä¢ –†–µ–∂–∏–º: {mode_status}\n"
                    f"‚Ä¢ –ú–æ–Ω–µ—Ç: {len(user_watchlist)}\n"
                    f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: V${user_config.get('VOLUME_THRESHOLD', 1000)}, "
                    f"S{user_config.get('SPREAD_THRESHOLD', 0.1)}%, "
                    f"N{user_config.get('NATR_THRESHOLD', 0.5)}%\n\n"
                )

                # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                row = [
                    InlineKeyboardButton(
                        f"üö´ –û—Ç–∫–ª—é—á–∏—Ç—å {user['first_name']}", 
                        callback_data=f"revoke_{user['chat_id']}"
                    )
                ]
                keyboard.append(row)

            if len(users) > 10:
                text += f"\n... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 10
        if len(users) > 10:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)})", 
                    callback_data="show_all_users"
                )
            ])

        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )

    async def handle_revoke_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_manager.is_admin(update.effective_chat.id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º
        if hasattr(self.bot, 'user_modes_manager') and self.bot.user_modes_manager:
            await self.bot.user_modes_manager.stop_user_mode(chat_id)
            bot_logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ä–µ–∂–∏–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º")

        if user_manager.revoke_user_access(chat_id):
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
            try:
                await self.bot.app.bot.send_message(
                    chat_id=chat_id,
                    text=(
                        "üö´ <b>–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫–ª—é—á–µ–Ω</b>\n\n"
                        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–æ–∑–≤–∞–ª –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.\n"
                        "–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    ),
                    parse_mode=ParseMode.HTML
                )

                await update.callback_query.edit_message_text(
                    text=f"üö´ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –æ—Ç–∫–ª—é—á–µ–Ω –∏ –æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω",
                    parse_mode=ParseMode.HTML
                )

            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {e}")
                await update.callback_query.edit_message_text(
                    text=f"üö´ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                )
        else:
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    async def handle_show_all_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not user_manager.is_admin(update.effective_chat.id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        users = user_manager.get_all_users()

        if not users:
            await update.callback_query.edit_message_text(
                "üë• –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                parse_mode=ParseMode.HTML
            )
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 15
        page_size = 15
        total_pages = (len(users) - 1) // page_size + 1

        text = f"üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):</b>\n\n"

        keyboard = []

        for i, user in enumerate(users[:page_size]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            setup_status = "‚úÖ" if user.get('setup_completed', False) else "‚öôÔ∏è"
            watchlist_count = len(user.get('watchlist', []))
            last_activity = datetime.fromtimestamp(user['last_activity']).strftime('%d.%m %H:%M')

            text += (
                f"{i+1}. {setup_status} <b>{user['first_name']}</b> "
                f"(@{user.get('username', 'no_username')})\n"
                f"    ‚Ä¢ –ú–æ–Ω–µ—Ç: {watchlist_count} ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n"
            )

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            row = [
                InlineKeyboardButton(
                    f"üö´ –û—Ç–∫–ª—é—á–∏—Ç—å {user['first_name']}", 
                    callback_data=f"revoke_{user['chat_id']}"
                )
            ]
            keyboard.append(row)

        if total_pages > 1:
            text += f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            nav_row = []
            if total_pages > 1:
                nav_row.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="users_page_2"))
            keyboard.append(nav_row)

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )

    def _get_user_keyboard(self) -> ReplyKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return ReplyKeyboardMarkup([
            ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ûñ –£–¥–∞–ª–∏—Ç—å"],
            ["üìã –°–ø–∏—Å–æ–∫", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
            ["üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á", "‚Ñπ –°—Ç–∞—Ç—É—Å"],
            ["üõë –°—Ç–æ–ø"]
        ], resize_keyboard=True, one_time_keyboard=False)

    async def handle_status_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å'"""
        if not user_manager.is_admin(update.effective_chat.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        active_coins = self.bot.coin_manager.get_active_coins_count()
        total_coins = len(user_manager.get_user_watchlist(update.effective_chat.id)) # total_coins should be the number of coins in YOUR watchlist, not global
        last_update_time = self.bot.coin_manager.get_last_update_time()

        status_text = (
            "‚Ñπ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
            f"ü§ñ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> üü¢ –†–∞–±–æ—Ç–∞–µ—Ç\n"
            f"üî• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç:</b> {active_coins}\n"
            f"üìã <b>–í–∞—à —Å–ø–∏—Å–æ–∫:</b> {total_coins} –º–æ–Ω–µ—Ç\n" # Changed to "–í–∞—à —Å–ø–∏—Å–æ–∫"
            f"‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {last_update_time}\n"
        )

        # Rearrange buttons, move refresh button after start and stop buttons
        admin_keyboard = ReplyKeyboardMarkup([
            ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ûñ –£–¥–∞–ª–∏—Ç—å"],
            ["üìã –°–ø–∏—Å–æ–∫", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
            ["üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á", "‚Ñπ –°—Ç–∞—Ç—É—Å"],
            ["üë• –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", "üìã –õ–æ–≥–∏"],
            ["üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
            ["üõë –°—Ç–æ–ø", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"] # Move update button here
        ], resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            status_text,
            parse_mode=ParseMode.HTML,
            reply_markup=admin_keyboard
        )

    async def handle_activity_24h(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á'"""
        if not user_manager.is_admin(update.effective_chat.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        try:
            # Get activity data from the ActivityMonitor instance
            activity_data = self.bot.activity_monitor.get_activity_data()

            if not activity_data:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.",
                                                  parse_mode=ParseMode.HTML)
                return

            text = "üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞:</b>\n\n"
            for coin, count in activity_data.items():
                text += f"‚Ä¢ <b>{coin}:</b> {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"

            await update.message.reply_text(text, parse_mode=ParseMode.HTML)

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ 24 —á–∞—Å–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}",
                                              parse_mode=ParseMode.HTML)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def create_admin_handlers(bot_instance):
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    return AdminHandlers(bot_instance)