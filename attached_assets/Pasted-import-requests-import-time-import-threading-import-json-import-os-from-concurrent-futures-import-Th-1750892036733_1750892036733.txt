import requests
import time
import threading
import json
import os
from concurrent.futures import ThreadPoolExecutor, as_completed
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, ContextTypes
import asyncio
from flask import Flask
from threading import Thread

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MEXC_BASE_URL = "https://api.mexc.com/api/v3"
WATCHLIST_FILE = "watchlist.json"
CONFIG_FILE = "config.json"
TELEGRAM_TOKEN = "8180368589:AAHgiD22KRFzXHTiFkw4n5WPwN3Ho2hA4rA"
TELEGRAM_CHAT_ID = "1090477927"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_CONFIG = {
    'VOLUME_THRESHOLD': 1000,
    'SPREAD_THRESHOLD': 0.1,
    'NATR_THRESHOLD': 0.5,
    'CHECK_BATCH_SIZE': 10,
    'CHECK_BATCH_INTERVAL': 1.0,
    'CHECK_FULL_CYCLE_INTERVAL': 2,
    'INACTIVITY_TIMEOUT': 30,
    'COIN_DATA_DELAY': 0.5,
    'MONITORING_UPDATE_INTERVAL': 15,
    'MAX_API_REQUESTS_PER_SECOND': 8,
    'MESSAGE_RATE_LIMIT': 20
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_RUNNING = False
BOT_MODE = None  # 'notification' –∏–ª–∏ 'monitoring'
ACTIVE_COINS = {}
monitoring_message_id = None
last_message_time = 0
WATCHLIST = set()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'w') as f:
            json.dump(DEFAULT_CONFIG, f)
        return DEFAULT_CONFIG

    try:
        with open(CONFIG_FILE, 'r') as f:
            config = json.load(f)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
            return {**DEFAULT_CONFIG, **{k: v for k, v in config.items() if k in DEFAULT_CONFIG}}
    except (json.JSONDecodeError, IOError):
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
        with open(CONFIG_FILE, 'w') as f:
            json.dump(DEFAULT_CONFIG, f)
        return DEFAULT_CONFIG

def save_config():
    with open(CONFIG_FILE, 'w') as f:
        json.dump({k: v for k, v in globals().items() if k in DEFAULT_CONFIG}, f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
config = load_config()
globals().update(config)

def load_watchlist():
    if os.path.exists(WATCHLIST_FILE):
        return set([c.upper().replace("_USDT", "") for c in json.load(open(WATCHLIST_FILE, "r", encoding="utf-8"))])
    return set()

def save_watchlist():
    with open(WATCHLIST_FILE, "w", encoding="utf-8") as f:
        json.dump(list(WATCHLIST), f)

WATCHLIST = load_watchlist()

# ‚Äî‚Äî‚Äî API —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî‚Äî‚Äî
def get_candle(symbol, interval='1m'):
    sym = symbol if symbol.endswith("USDT") else symbol + "USDT"
    params = {'symbol': sym, 'interval': interval, 'limit': 1}
    try:
        response = requests.get(f"{MEXC_BASE_URL}/klines", params=params, timeout=5)
        response.raise_for_status()
        j = response.json()
        if not isinstance(j, list) or not j:
            return None
        c = j[0]
        return {
            'open': float(c[1]), 'close': float(c[4]),
            'high': float(c[2]), 'low': float(c[3]),
            'volume': float(c[7])
        }
    except Exception as e:
        print(f"Error getting candle for {symbol}: {e}")
        return None

def get_depth(symbol):
    sym = symbol if symbol.endswith("USDT") else symbol + "USDT"
    params = {'symbol': sym, 'limit': 1}
    try:
        response = requests.get(f"{MEXC_BASE_URL}/depth", params=params, timeout=5)
        response.raise_for_status()
        j = response.json()
        bids, asks = j.get('bids'), j.get('asks')
        if not bids or not asks:
            return None
        bid, ask = float(bids[0][0]), float(asks[0][0])
        return (ask - bid) / bid * 100
    except Exception as e:
        print(f"Error getting depth for {symbol}: {e}")
        return None

def get_trade_count(symbol):
    sym = symbol if symbol.endswith("USDT") else symbol + "USDT"
    params = {'symbol': sym, 'limit': 1000}
    try:
        response = requests.get(f"{MEXC_BASE_URL}/trades", params=params, timeout=5)
        response.raise_for_status()
        trades = response.json()
        one_min_ago = int(time.time() * 1000) - 60_000
        return sum(1 for t in trades if t.get('time', 0) >= one_min_ago)
    except Exception as e:
        print(f"Error getting trades for {symbol}: {e}")
        return 0

def get_coin_data(symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–æ–Ω–µ—Ç–µ"""
    time.sleep(COIN_DATA_DELAY)

    candle = get_candle(symbol)
    if not candle:
        return None

    spread = get_depth(symbol)
    if spread is None:
        spread = 0

    natr = (candle['high'] - candle['low']) / candle['close'] * 100 if candle['close'] != 0 else 0
    volume = candle['volume']
    change = (candle['close'] - candle['open']) / candle['open'] * 100 if candle['open'] != 0 else 0
    trades = get_trade_count(symbol)

    return {
        'symbol': symbol,
        'volume': volume,
        'spread': spread,
        'natr': natr,
        'change': change,
        'trades': trades,
        'active': (volume >= VOLUME_THRESHOLD and spread >= SPREAD_THRESHOLD and natr >= NATR_THRESHOLD)
    }

# ‚Äî‚Äî‚Äî Telegram —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî‚Äî‚Äî
async def send_telegram_message(text, parse_mode="HTML", reply_markup=None):
    global last_message_time

    current_time = time.time()
    if current_time - last_message_time < 3:
        await asyncio.sleep(3 - (current_time - last_message_time))

    try:
        data = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': text,
            'parse_mode': parse_mode
        }
        if reply_markup:
            data['reply_markup'] = reply_markup

        r = requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", 
                         data=data, timeout=5)
        if r.ok:
            last_message_time = time.time()
            return r.json().get("result", {}).get("message_id")
    except Exception as e:
        print(f"Error sending Telegram message: {e}")
    return None

async def edit_message(message_id, text, parse_mode="HTML", reply_markup=None):
    try:
        data = {
            "chat_id": TELEGRAM_CHAT_ID,
            "message_id": message_id,
            "text": text,
            "parse_mode": parse_mode
        }
        if reply_markup:
            data['reply_markup'] = reply_markup

        requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/editMessageText", 
                     data=data, timeout=5)
    except Exception as e:
        print(f"Error editing Telegram message: {e}")

async def delete_message(message_id):
    try:
        requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteMessage", data={
            "chat_id": TELEGRAM_CHAT_ID,
            "message_id": message_id
        }, timeout=5)
    except Exception as e:
        print(f"Error deleting Telegram message: {e}")

# ‚Äî‚Äî‚Äî –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ‚Äî‚Äî‚Äî
def chunks(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

async def notification_mode_loop():
    """–¶–∏–∫–ª –¥–ª—è —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global BOT_RUNNING, ACTIVE_COINS

    while BOT_RUNNING and BOT_MODE == 'notification':
        if not WATCHLIST:
            await asyncio.sleep(CHECK_FULL_CYCLE_INTERVAL)
            continue

        for batch in chunks(list(WATCHLIST), CHECK_BATCH_SIZE):
            if not BOT_RUNNING or BOT_MODE != 'notification':
                break

            tasks = []
            with ThreadPoolExecutor(max_workers=min(CHECK_BATCH_SIZE, 10)) as pool:
                futures = {pool.submit(get_coin_data, coin): coin for coin in batch}
                for f in as_completed(futures):
                    symbol = futures[f]
                    result = f.result()
                    if not result:
                        continue

                    now = time.time()
                    active = symbol in ACTIVE_COINS

                    if result['active']:
                        if not active:
                            # –ù–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–Ω–µ—Ç–∞
                            msg = (
                                f"üö® <b>{symbol}_USDT –∞–∫—Ç–∏–≤–µ–Ω</b>\n"
                                f"üîÑ –ò–∑–º: {result['change']:.2f}%  üîÅ –°–¥–µ–ª–æ–∫: {result['trades']}\n"
                                f"üìä –û–±—ä—ë–º: ${result['volume']:,.2f}  NATR: {result['natr']:.2f}%\n"
                                f"‚áÑ –°–ø—Ä–µ–¥: {result['spread']:.2f}%"
                            )
                            msg_id = await send_telegram_message(msg)
                            if msg_id:
                                ACTIVE_COINS[symbol] = {
                                    'start': now,
                                    'last_active': now,
                                    'msg_id': msg_id,
                                    'data': result
                                }
                        else:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–Ω–µ—Ç–µ
                            ACTIVE_COINS[symbol]['last_active'] = now
                            ACTIVE_COINS[symbol]['data'] = result

                            msg = (
                                f"üö® <b>{symbol}_USDT –∞–∫—Ç–∏–≤–µ–Ω</b>\n"
                                f"üîÑ –ò–∑–º: {result['change']:.2f}%  üîÅ –°–¥–µ–ª–æ–∫: {result['trades']}\n"
                                f"üìä –û–±—ä—ë–º: ${result['volume']:,.2f}  NATR: {result['natr']:.2f}%\n"
                                f"‚áÑ –°–ø—Ä–µ–¥: {result['spread']:.2f}%"
                            )
                            await edit_message(ACTIVE_COINS[symbol]['msg_id'], msg)
                    elif active:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        if now - ACTIVE_COINS[symbol]['last_active'] > INACTIVITY_TIMEOUT:
                            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            msg_id = ACTIVE_COINS[symbol]['msg_id']
                            if msg_id:
                                await delete_message(msg_id)

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                            duration = now - ACTIVE_COINS[symbol]['start']
                            if duration >= 60:
                                duration_min = int(duration // 60)
                                duration_sec = int(duration % 60)
                                end_msg = (
                                    f"‚úÖ <b>{symbol}_USDT –∑–∞–≤–µ—Ä—à–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n"
                                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_min} –º–∏–Ω {duration_sec} —Å–µ–∫"
                                )
                                await send_telegram_message(end_msg)

                            del ACTIVE_COINS[symbol]

            await asyncio.sleep(CHECK_BATCH_INTERVAL)
        await asyncio.sleep(CHECK_FULL_CYCLE_INTERVAL)

async def monitoring_mode_loop():
    """–¶–∏–∫–ª –¥–ª—è —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global BOT_RUNNING, monitoring_message_id

    initial_text = "üîÑ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    monitoring_message_id = await send_telegram_message(initial_text)

    while BOT_RUNNING and BOT_MODE == 'monitoring':
        if not WATCHLIST:
            await asyncio.sleep(MONITORING_UPDATE_INTERVAL)
            continue

        results = []
        failed_coins = []

        for batch in chunks(sorted(WATCHLIST), CHECK_BATCH_SIZE):
            if not BOT_RUNNING or BOT_MODE != 'monitoring':
                break

            batch_results = []
            for symbol in batch:
                try:
                    data = get_coin_data(symbol)
                    if data:
                        batch_results.append(data)
                    else:
                        failed_coins.append(symbol)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                    failed_coins.append(symbol)
                await asyncio.sleep(COIN_DATA_DELAY)

            results.extend(batch_results)
            await asyncio.sleep(CHECK_BATCH_INTERVAL)

        if not results:
            text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –ø–æ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç–µ."
            if monitoring_message_id:
                await edit_message(monitoring_message_id, text)
            else:
                monitoring_message_id = await send_telegram_message(text)
            await asyncio.sleep(MONITORING_UPDATE_INTERVAL)
            continue

        results.sort(key=lambda x: x['volume'], reverse=True)

        report_parts = ["<b>üìä –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):</b>\n"]
        report_parts.append(f"<i>–§–∏–ª—å—Ç—Ä—ã: –û–±—ä—ë–º ‚â•${VOLUME_THRESHOLD}, –°–ø—Ä–µ–¥ ‚â•{SPREAD_THRESHOLD}%, NATR ‚â•{NATR_THRESHOLD}%</i>")

        if failed_coins:
            report_parts.append(f"\n‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {', '.join(failed_coins)}\n")

        max_coins_to_show = 20
        for coin in results[:max_coins_to_show]:
            status = "üü¢ –ê–ö–¢–ò–í–ù–ê" if coin['active'] else "üî¥ –ù–ï–ê–ö–¢–ò–í–ù–ê"
            coin_info = (
                f"\n<b>{coin['symbol']}_USDT</b> {status}\n"
                f"üìä –û–±—ä—ë–º: ${coin['volume']:,.2f}\n"
                f"üîÑ –ò–∑–º: {coin['change']:.2f}%\n"
                f"‚áÑ –°–ø—Ä–µ–¥: {coin['spread']:.2f}%\n"
                f"üìà NATR: {coin['natr']:.2f}%\n"
                f"üîÅ –°–¥–µ–ª–æ–∫: {coin['trades']}"
            )
            report_parts.append(coin_info)

        if len(results) > max_coins_to_show:
            report_parts.append(f"\n... –∏ –µ—â—ë {len(results) - max_coins_to_show} –º–æ–Ω–µ—Ç")

        full_message = "\n".join(report_parts)
        if len(full_message) > 4000:
            full_message = full_message[:4000] + "\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"

        if monitoring_message_id:
            await edit_message(monitoring_message_id, full_message)
        else:
            monitoring_message_id = await send_telegram_message(full_message)

        await asyncio.sleep(MONITORING_UPDATE_INTERVAL)

    if monitoring_message_id:
        await delete_message(monitoring_message_id)
        monitoring_message_id = None

def start_bot_loop():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ü–∏–∫–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    if BOT_MODE == 'notification':
        loop.run_until_complete(notification_mode_loop())
    elif BOT_MODE == 'monitoring':
        loop.run_until_complete(monitoring_mode_loop())

# ‚Äî‚Äî‚Äî Telegram Handlers ‚Äî‚Äî‚Äî
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update)

async def show_main_menu(update: Update, text=None):
    reply_text = text or "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await update.message.reply_text(
        reply_text,
        reply_markup=MAIN_MENU_KEYBOARD
    )

async def show_settings_menu(update: Update):
    current_settings = (
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º: ${VOLUME_THRESHOLD}\n"
        f"‚áÑ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {SPREAD_THRESHOLD}%\n"
        f"üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π NATR: {NATR_THRESHOLD}%"
    )
    await update.message.reply_text(
        current_settings,
        reply_markup=SETTINGS_KEYBOARD
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
MAIN_MENU_KEYBOARD = ReplyKeyboardMarkup([
    ["üîî –†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "üìä –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"],
    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É", "‚ûñ –ò—Å–∫–ª—é—á–∏—Ç—å –º–æ–Ω–µ—Ç—É"],
    ["üìã –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
    ["üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"]
], resize_keyboard=True)

SETTINGS_KEYBOARD = ReplyKeyboardMarkup([
    ["üìä –ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—ë–º", "‚áÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø—Ä–µ–¥"],
    ["üìà –ò–∑–º–µ–Ω–∏—Ç—å NATR", "üîô –ù–∞–∑–∞–¥"]
], resize_keyboard=True)

BACK_KEYBOARD = ReplyKeyboardMarkup([
    ["üîô –ù–∞–∑–∞–¥"]
], resize_keyboard=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ADDING, REMOVING = range(2)
SETTING_VOLUME, SETTING_SPREAD, SETTING_NATR = range(3, 6)

async def stop_current_mode():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º"""
    global BOT_RUNNING, ACTIVE_COINS, monitoring_message_id

    if BOT_RUNNING:
        BOT_RUNNING = False
        await asyncio.sleep(2)

        if BOT_MODE == 'monitoring' and monitoring_message_id:
            await delete_message(monitoring_message_id)
            monitoring_message_id = None
        elif BOT_MODE == 'notification':
            ACTIVE_COINS = {}

async def button_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global BOT_RUNNING, BOT_MODE, ACTIVE_COINS, monitoring_message_id

    text = update.message.text

    if text == "üîî –†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
        if BOT_RUNNING and BOT_MODE == 'notification':
            await update.message.reply_text("–ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", reply_markup=MAIN_MENU_KEYBOARD)
            return ConversationHandler.END

        await stop_current_mode()
        BOT_MODE = 'notification'
        BOT_RUNNING = True
        ACTIVE_COINS = {}
        threading.Thread(target=start_bot_loop, daemon=True).start()

        await update.message.reply_text(
            "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ë—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö.",
            reply_markup=MAIN_MENU_KEYBOARD
        )

    elif text == "üìä –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞":
        if BOT_RUNNING and BOT_MODE == 'monitoring':
            await update.message.reply_text("–ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.", reply_markup=MAIN_MENU_KEYBOARD)
            return ConversationHandler.END

        await stop_current_mode()
        BOT_MODE = 'monitoring'
        BOT_RUNNING = True
        threading.Thread(target=start_bot_loop, daemon=True).start()

        await update.message.reply_text(
            "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –ë—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤—Å–µ–º –º–æ–Ω–µ—Ç–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=MAIN_MENU_KEYBOARD
        )

    elif text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞":
        await stop_current_mode()
        await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=MAIN_MENU_KEYBOARD)

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É":
        await stop_current_mode()
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC –∏–ª–∏ BTC_USDT):",
            reply_markup=BACK_KEYBOARD
        )
        return ADDING

    elif text == "‚ûñ –ò—Å–∫–ª—é—á–∏—Ç—å –º–æ–Ω–µ—Ç—É":
        await stop_current_mode()
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è:",
            reply_markup=BACK_KEYBOARD
        )
        return REMOVING

    elif text == "üìã –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç":
        await stop_current_mode()
        text = "\n".join(sorted(WATCHLIST)) or "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        await update.message.reply_text(
            f"üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç:\n{text}",
            reply_markup=MAIN_MENU_KEYBOARD
        )

    elif text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await stop_current_mode()
        await show_settings_menu(update)

    elif text == "üìä –ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—ë–º":
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º: ${VOLUME_THRESHOLD}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö):",
            reply_markup=BACK_KEYBOARD
        )
        return SETTING_VOLUME

    elif text == "‚áÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø—Ä–µ–¥":
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {SPREAD_THRESHOLD}%\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):",
            reply_markup=BACK_KEYBOARD
        )
        return SETTING_SPREAD

    elif text == "üìà –ò–∑–º–µ–Ω–∏—Ç—å NATR":
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π NATR: {NATR_THRESHOLD}%\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):",
            reply_markup=BACK_KEYBOARD
        )
        return SETTING_NATR

    elif text == "üîô –ù–∞–∑–∞–¥":
        await show_main_menu(update)
        return ConversationHandler.END

    return ConversationHandler.END

async def add_coin(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    coin = update.message.text.upper().strip().replace("_USDT", "")

    if coin == "üîô –ù–ê–ó–ê–î":
        await show_main_menu(update)
        return ConversationHandler.END

    try:
        candle = get_candle(coin)
        depth = get_depth(coin)

        if not candle or not depth:
            await update.message.reply_text(
                f"‚ùå {coin}_USDT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è.",
                reply_markup=MAIN_MENU_KEYBOARD
            )
            return ConversationHandler.END

        WATCHLIST.add(coin)
        save_watchlist()
        await update.message.reply_text(
            f"‚úÖ {coin}_USDT –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫.",
            reply_markup=MAIN_MENU_KEYBOARD
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {coin}_USDT: {str(e)}",
            reply_markup=MAIN_MENU_KEYBOARD
        )

    return ConversationHandler.END

async def remove_coin(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    coin = update.message.text.upper().strip().replace("_USDT", "")

    if coin == "üîô –ù–ê–ó–ê–î":
        await show_main_menu(update)
        return ConversationHandler.END

    if coin in WATCHLIST:
        WATCHLIST.remove(coin)
        save_watchlist()
        await update.message.reply_text(
            f"‚úÖ {coin} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=MAIN_MENU_KEYBOARD
        )
    else:
        await update.message.reply_text(
            f"‚ùå {coin} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ.",
            reply_markup=MAIN_MENU_KEYBOARD
        )
    return ConversationHandler.END

async def set_volume(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global VOLUME_THRESHOLD

    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥":
        await show_settings_menu(update)
        return ConversationHandler.END

    try:
        new_value = float(text)
        if new_value <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

        VOLUME_THRESHOLD = new_value
        save_config()
        await update.message.reply_text(
            f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${new_value}",
            reply_markup=MAIN_MENU_KEYBOARD
        )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000)",
            reply_markup=BACK_KEYBOARD
        )
        return SETTING_VOLUME

    return ConversationHandler.END

async def set_spread(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global SPREAD_THRESHOLD

    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥":
        await show_settings_menu(update)
        return ConversationHandler.END

    try:
        new_value = float(text)
        if new_value <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

        SPREAD_THRESHOLD = new_value
        save_config()
        await update.message.reply_text(
            f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_value}%",
            reply_markup=MAIN_MENU_KEYBOARD
        )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.1)",
            reply_markup=BACK_KEYBOARD
        )
        return SETTING_SPREAD

    return ConversationHandler.END

async def set_natr(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global NATR_THRESHOLD

    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥":
        await show_settings_menu(update)
        return ConversationHandler.END

    try:
        new_value = float(text)
        if new_value <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

        NATR_THRESHOLD = new_value
        save_config()
        await update.message.reply_text(
            f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π NATR –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_value}%",
            reply_markup=MAIN_MENU_KEYBOARD
        )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5)",
            reply_markup=BACK_KEYBOARD
        )
        return SETTING_NATR

    return ConversationHandler.END

app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run_flask)
    t.start()

if __name__ == '__main__':
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ

    app = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler)],
        states={
            ADDING: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_coin)],
            REMOVING: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_coin)],
            SETTING_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_volume)],
            SETTING_SPREAD: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_spread)],
            SETTING_NATR: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_natr)],
        },
        fallbacks=[CommandHandler("start", start)],
        per_message=False
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()