import asyncio
import time
from typing import Dict, Optional, List, Any
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode
from logger import bot_logger
from config import config_manager
from api_client import api_client
from watchlist_manager import watchlist_manager
from bot_state import bot_state_manager
from advanced_alerts import advanced_alert_manager, AlertType, AlertSeverity
from input_validator import input_validator
from user_manager import user_manager
from user_session_recorder import UserSessionRecorder
from admin_handlers import create_admin_handlers
from user_modes_manager import UserModesManager
import os

class TradingTelegramBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')

        if not self.token or not self.chat_id:
            raise ValueError("TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        self.app = None
        self.bot_running = False
        self.last_message_time = 0
        self.message_cache = {}
        self._message_queue = asyncio.Queue()
        self._queue_processor_task = None

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self._operation_lock = asyncio.Lock()
        self._switching_mode = False
        self._last_operation_time = 0

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._active_coins: Dict[str, Dict] = {}
        self.processing_coins = set()
        self.notification_locks = set()

        # ID —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_message_id: Optional[int] = None

        # –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥—É–ª–∏
        self.admin_handlers = create_admin_handlers(self)
        self.user_session_recorders: Dict[str, UserSessionRecorder] = {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∂–∏–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from user_modes_manager import UserModesManager
        self.user_modes_manager = UserModesManager(self)

        # –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
        self.ADDING_COIN, self.REMOVING_COIN = range(2)

        self._setup_keyboards()

    @property
    def active_coins(self):
        """–°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º health check"""
        return self._active_coins

    def get_user_keyboard(self, chat_id: str) -> ReplyKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_manager.is_admin(chat_id):
            return self.admin_keyboard
        else:
            return self.user_keyboard

    def get_user_session_recorder(self, chat_id: str) -> UserSessionRecorder:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ä–µ–∫–æ—Ä–¥–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id_str = str(chat_id)
        if chat_id_str not in self.user_session_recorders:
            self.user_session_recorders[chat_id_str] = UserSessionRecorder(chat_id_str)
        return self.user_session_recorders[chat_id_str]

    def get_user_watchlist(self, chat_id: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_manager.get_user_watchlist(chat_id)

    def get_user_config(self, chat_id: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∞) –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return user_manager.get_user_config(chat_id)

    def _setup_keyboards(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.admin_keyboard = ReplyKeyboardMarkup([
            ["üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞", "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞"],
            ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ûñ –£–¥–∞–ª–∏—Ç—å"],
            ["üìã –°–ø–∏—Å–æ–∫", "‚Ñπ –°—Ç–∞—Ç—É—Å"],
            ["üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á"],
            ["üë• –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", "üìã –õ–æ–≥–∏"],
            ["üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"]
        ], resize_keyboard=True, one_time_keyboard=False)

        # –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_keyboard = ReplyKeyboardMarkup([
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å', '‚ûñ –£–¥–∞–ª–∏—Ç—å'],
            ['üìã –°–ø–∏—Å–æ–∫']
        ], resize_keyboard=True)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_keyboard = ReplyKeyboardMarkup([
            ["üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞", "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞"],
            ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ûñ –£–¥–∞–ª–∏—Ç—å"],
            ["üìã –°–ø–∏—Å–æ–∫", "‚Ñπ –°—Ç–∞—Ç—É—Å"],
            ["üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á"]
        ], resize_keyboard=True, one_time_keyboard=False)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∞)
        self.main_keyboard = self.admin_keyboard

        self.back_keyboard = ReplyKeyboardMarkup([
            ["üîô –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)

    async def _start_message_queue_processor(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –≤ —Ç–µ–∫—É—â–µ–º event loop
            try:
                current_loop = asyncio.get_running_loop()
                if self._message_queue is not None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ event loop
                    try:
                        self._message_queue.qsize()  # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                    except RuntimeError:
                        # –û—á–µ—Ä–µ–¥—å –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –¥—Ä—É–≥–æ–º—É loop
                        self._message_queue = None

                if self._message_queue is None:
                    self._message_queue = asyncio.Queue()
                    bot_logger.debug("üîÑ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π")

            except Exception as e:
                bot_logger.debug(f"–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
                self._message_queue = asyncio.Queue()

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if self._queue_processor_task and not self._queue_processor_task.done():
                self._queue_processor_task.cancel()
                try:
                    await self._queue_processor_task
                except asyncio.CancelledError:
                    pass

            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            self._queue_processor_task = asyncio.create_task(self._process_message_queue())
            bot_logger.debug("üîÑ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")

    async def _process_message_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
        consecutive_errors = 0
        max_consecutive_errors = 5

        while self.bot_running and consecutive_errors < max_consecutive_errors:
            try:
                if self._message_queue is None:
                    await asyncio.sleep(1.0)
                    continue

                # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    message_data = await asyncio.wait_for(
                        self._message_queue.get(), 
                        timeout=2.0
                    )
                    consecutive_errors = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ

                    await self._execute_telegram_message(message_data)
                    await asyncio.sleep(0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

                except asyncio.TimeoutError:
                    consecutive_errors = 0  # –¢–∞–π–º–∞—É—Ç –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π
                    continue
                except RuntimeError as e:
                    if "different event loop" in str(e):
                        bot_logger.warning("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –∏–∑-–∑–∞ —Å–º–µ–Ω—ã event loop")
                        self._message_queue = asyncio.Queue()
                        consecutive_errors = 0
                        continue
                    else:
                        raise

            except Exception as e:
                consecutive_errors += 1
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ({consecutive_errors}/{max_consecutive_errors}): {e}")
                await asyncio.sleep(min(0.5 * consecutive_errors, 3.0))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

        if consecutive_errors >= max_consecutive_errors:
            bot_logger.error("üö® –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
            self._queue_processor_task = None

    async def _execute_telegram_message(self, message_data: Dict):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É Telegram —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            action = message_data['action']

            if action == 'send':
                response = await self._direct_telegram_send(
                    message_data['text'],
                    message_data.get('reply_markup'),
                    message_data.get('parse_mode', ParseMode.HTML)
                )

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ callback –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'callback' in message_data:
                    message_data['callback'](response)

            elif action == 'edit':
                await self._direct_telegram_edit(
                    message_data['message_id'],
                    message_data['text'],
                    message_data.get('reply_markup')
                )

            elif action == 'delete':
                await self._direct_telegram_delete(message_data['message_id'])

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Telegram –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")

    async def _direct_telegram_send(self, text: str, reply_markup=None, parse_mode=ParseMode.HTML):
        """–ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram API"""
        if not self.app or not self.app.bot:
            return None

        try:
            current_time = time.time()
            if current_time - self.last_message_time < 0.5:
                await asyncio.sleep(0.5 - (current_time - self.last_message_time))

            message = await self.app.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )

            self.last_message_time = time.time()

            if message and hasattr(message, 'message_id'):
                return message.message_id
            return None

        except Exception as e:
            bot_logger.debug(f"–ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {type(e).__name__}")
            return None

    async def _direct_telegram_edit(self, message_id: int, text: str, reply_markup=None):
        """–ü—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API"""
        if not self.app or not self.app.bot:
            return

        try:
            await self.app.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            if "message is not modified" not in str(e).lower():
                bot_logger.debug(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –Ω–µ —É–¥–∞–ª–æ—Å—å: {type(e).__name__}")

    async def _direct_telegram_delete(self, message_id: int):
        """–ü—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API"""
        if not self.app or not self.app.bot:
            return

        try:
            await self.app.bot.delete_message(chat_id=self.chat_id, message_id=message_id)
            if message_id in self.message_cache:
                del self.message_cache[message_id]
        except Exception as e:
            bot_logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –Ω–µ —É–¥–∞–ª–æ—Å—å: {type(e).__name__}")

    async def send_message(self, text: str, reply_markup=None, parse_mode=ParseMode.HTML) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å —Å callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if not self.bot_running:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—á–µ—Ä–µ–¥–∏
        if self._message_queue is None:
            bot_logger.warning("–û—á–µ—Ä–µ–¥—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
            return await self._direct_telegram_send(text, reply_markup, parse_mode)

        # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_future = asyncio.Future()

        def callback(result):
            if not result_future.done():
                result_future.set_result(result)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        message_data = {
            'action': 'send',
            'text': text,
            'reply_markup': reply_markup,
            'parse_mode': parse_mode,
            'callback': callback
        }

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
            try:
                await self._message_queue.put(message_data)
            except RuntimeError as e:
                if "different event loop" in str(e):
                    bot_logger.warning("Event loop –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
                    return await self._direct_telegram_send(text, reply_markup, parse_mode)
                else:
                    raise

            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            result = await asyncio.wait_for(result_future, timeout=10.0)

            if result:
                bot_logger.info(f"[SEND_MESSAGE_SUCCESS] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, msg_id: {result}")
            return result

        except asyncio.TimeoutError:
            bot_logger.error("[SEND_MESSAGE_TIMEOUT] –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return None
        except Exception as e:
            bot_logger.error(f"[SEND_MESSAGE_ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            # Fallback –Ω–∞ –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            return await self._direct_telegram_send(text, reply_markup, parse_mode)

    async def edit_message(self, message_id: int, text: str, reply_markup=None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"""
        if not self.bot_running:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–µ—à–µ
        cached_message = self.message_cache.get(message_id)
        if cached_message == text:
            return

        message_data = {
            'action': 'edit',
            'message_id': message_id,
            'text': text,
            'reply_markup': reply_markup
        }

        try:
            await self._message_queue.put(message_data)
            self.message_cache[message_id] = text
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è edit –≤ –æ—á–µ—Ä–µ–¥—å: {e}")

    async def delete_message(self, message_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"""
        if not message_id or not isinstance(message_id, int) or message_id <= 0:
            return False

        if not self.bot_running:
            return False

        message_data = {
            'action': 'delete',
            'message_id': message_id
        }

        try:
            await self._message_queue.put(message_data)
            return True
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è delete –≤ –æ—á–µ—Ä–µ–¥—å: {e}")

    async def _send_personal_message(self, chat_id: str, text: str, reply_markup=None) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not self.app or not self.app.bot:
            return None

        try:
            message = await self.app.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            return message.message_id if message else None
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")
            return None

    async def _edit_personal_message(self, chat_id: str, message_id: int, text: str, reply_markup=None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.app or not self.app.bot:
            return

        try:
            await self.app.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")

    async def _delete_personal_message(self, chat_id: str, message_id: int):
        """–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.app or not self.app.bot:
            return

        try:
            await self.app.bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")

    async def _fetch_user_data(self, watchlist: List[str], chat_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        results = []
        failed_coins = []

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_config = user_manager.get_user_config(chat_id)
        vol_threshold = user_config.get('VOLUME_THRESHOLD', 1000)
        spread_threshold = user_config.get('SPREAD_THRESHOLD', 0.1)
        natr_threshold = user_config.get('NATR_THRESHOLD', 0.5)

        batch_size = 10
        for batch in self._chunks(watchlist, batch_size):
            try:
                batch_data = await api_client.get_batch_coin_data(batch)
                for symbol, coin_data in batch_data.items():
                    if coin_data:
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        coin_data['active'] = (
                            coin_data.get('volume', 0) >= vol_threshold and
                            coin_data.get('spread', 0) >= spread_threshold and
                            coin_data.get('natr', 0) >= natr_threshold and
                            coin_data.get('trades', 0) > 0
                        )
                        results.append(coin_data)
                    else:
                        failed_coins.append(symbol)
            except Exception as e:
                bot_logger.warning(f"API –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è {chat_id}: {e}")
                failed_coins.extend(batch)

            await asyncio.sleep(0.5)  # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞

        return results, failed_coins

    def _chunks(self, lst: List, size: int):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞–Ω–∫–∏"""
        for i in range(0, len(lst), size):
            yield lst[i:i + size]

    async def _stop_bot(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        async with self._operation_lock:
            if self._switching_mode:
                bot_logger.debug("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return

            if not self.bot_running:
                return

            self._switching_mode = True

            try:
                bot_logger.info(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞")

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏
                if self._queue_processor_task and not self._queue_processor_task.done():
                    self._queue_processor_task.cancel()
                    try:
                        await asyncio.wait_for(self._queue_processor_task, timeout=1.0)
                    except (asyncio.CancelledError, asyncio.TimeoutError):
                        pass
                    self._queue_processor_task = None

                # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ
                try:
                    if self._message_queue:
                        queue_size = 0
                        while not self._message_queue.empty() and queue_size < 100:
                            try:
                                self._message_queue.get_nowait()
                                queue_size += 1
                            except asyncio.QueueEmpty:
                                break

                        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                        self._message_queue = asyncio.Queue()

                except Exception as e:
                    bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                    self._message_queue = asyncio.Queue()

                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                deleted_count = 0
                for symbol, coin_data in list(self._active_coins.items()):
                    msg_id = coin_data.get('msg_id')
                    if msg_id and isinstance(msg_id, int) and msg_id > 0:
                        await self.delete_message(msg_id)
                        deleted_count += 1

                if deleted_count > 0:
                    bot_logger.info(f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if self.monitoring_message_id:
                    await self.delete_message(self.monitoring_message_id)
                    bot_logger.info("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω–æ")

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.bot_running = False
                self._active_coins.clear()
                self.processing_coins.clear()
                self.notification_locks.clear()
                self.monitoring_message_id = None
                self.message_cache.clear()

                # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
                await asyncio.sleep(0.3)

                bot_logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            finally:
                self._switching_mode = False

    # Telegram Handlers
    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = update.effective_chat.id
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_manager.is_admin(chat_id):
            await self._handle_admin_start(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–¥–æ–±—Ä–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_manager.is_user_approved(chat_id):
            return await self._handle_approved_user_start(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_manager.is_user_pending(chat_id):
            await update.message.reply_text(
                "‚è≥ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        user_info = {
            'username': user.username or 'no_username',
            'first_name': user.first_name or 'Unknown',
            'last_name': user.last_name or ''
        }

        if user_manager.add_pending_request(chat_id, user_info):
            await update.message.reply_text(
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MEXCScalping Assistant!</b>\n\n"
                "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                "‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è</b>\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É.\n\n"
                "üí° –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode=ParseMode.HTML
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
            try:
                await self.app.bot.send_message(
                    chat_id=user_manager.admin_chat_id,
                    text=(
                        f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!</b>\n\n"
                        f"üë§ <b>{user_info['first_name']}</b>\n"
                        f"‚Ä¢ Username: @{user_info['username']}\n"
                        f"‚Ä¢ ID: <code>{chat_id}</code>\n\n"
                        f"–ù–∞–∂–º–∏—Ç–µ 'üë• –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                    ),
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ: {e}")

        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.HTML
            )

    async def _handle_admin_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        welcome_text = (
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n\n"
            "üöÄ <b>–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞</b> - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "üõë <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞</b> - –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n\n"
            "üë• <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ üë• –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ üìã –õ–æ–≥–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤\n"
            "‚Ä¢ üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
        )

        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await update.message.reply_text(welcome_text, reply_markup=self.admin_keyboard, parse_mode=ParseMode.HTML)

    async def _handle_approved_user_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = update.effective_chat.id
        user_watchlist = user_manager.get_user_watchlist(chat_id)

        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        welcome_text = (
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MEXCScalping Assistant!</b>\n\n"
            "üöÄ <b>–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞</b> - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "üõë <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞</b> - –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n\n"
            "‚öô <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
            "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫\n"
            "‚Ä¢ ‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
            "‚Ä¢ üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã\n\n"
        )

        # –ï—Å–ª–∏ –Ω–µ—Ç –º–æ–Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if not user_watchlist:
            welcome_text += (
                "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –£ –≤–∞—Å –Ω–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!\n"
                "–ù–∞–∂–º–∏—Ç–µ ‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å</b> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É.\n\n"
                "üí° <b>–°–æ–≤–µ—Ç:</b> –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ ‚öô <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
                "–¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.\n\n"
            )
        else:
            welcome_text += (
                f"üìã <b>–í–∞—à–∏ –º–æ–Ω–µ—Ç—ã:</b> {len(user_watchlist)} —à—Ç.\n\n"
                "üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ‚öô <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞.\n\n"
            )

        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        await update.message.reply_text(
            welcome_text, 
            reply_markup=self.user_keyboard, 
            parse_mode=ParseMode.HTML
        )

        # –û—Ç–º–µ—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_manager.mark_setup_completed(chat_id)
        user_manager.update_user_data(chat_id, {'setup_state': 'completed'})
        return ConversationHandler.END

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç spam"""
        text = update.message.text
        chat_id = update.effective_chat.id
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user_manager.is_admin(chat_id) and not user_manager.is_user_approved(chat_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        # –ó–∞—â–∏—Ç–∞ –æ—Ç spam –Ω–∞–∂–∞—Ç–∏–π (–º–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏)
        if current_time - self._last_operation_time < 1.0:
            bot_logger.debug("–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–µ –Ω–∞–∂–∞—Ç–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return ConversationHandler.END

        self._last_operation_time = current_time
        user_keyboard = self.get_user_keyboard(chat_id)

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
            if self._switching_mode:
                await update.message.reply_text(
                    "‚è≥ –ò–¥–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                    reply_markup=user_keyboard
                )
                return ConversationHandler.END

            message_text = update.message.text

            # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if message_text == "üë• –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫":
                if user_manager.is_admin(chat_id):
                    await self.admin_handlers.handle_pending_requests(update, context)
                else:
                    await update.message.reply_text(
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
                        reply_markup=user_keyboard
                    )
            elif message_text == "üìã –õ–æ–≥–∏":
                if user_manager.is_admin(chat_id):
                    await self.admin_handlers.handle_logs_request(update, context)
                else:
                    await update.message.reply_text(
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
                        reply_markup=user_keyboard
                    )
            elif message_text == "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏":
                if user_manager.is_admin(chat_id):
                    await self.admin_handlers.handle_user_management(update, context)
                else:
                    await update.message.reply_text(
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
                        reply_markup=user_keyboard
                    )
            elif message_text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
                if user_manager.is_admin(chat_id):
                    await self.admin_handlers.handle_clear_all_users(update, context)
                else:
                    await update.message.reply_text(
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
                        reply_markup=user_keyboard
                    )

            # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            elif text == "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞":
                await self._handle_start_bot(update)
            elif text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞":
                await self._handle_stop_bot(update)
            elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
                return await self._handle_add_coin_start(update)
            elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å":
                return await self._handle_remove_coin_start(update)
            elif text == "üìã –°–ø–∏—Å–æ–∫":
                await self._handle_show_list(update)
            elif text == "‚Ñπ –°—Ç–∞—Ç—É—Å":
                await self._handle_status(update)
            elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
                await self._handle_refresh_monitoring(update)
            elif text == "üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á":
                bot_logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} {'(–∞–¥–º–∏–Ω)' if user_manager.is_admin(chat_id) else '(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)'}")
                await self._handle_activity_24h(update)
            elif text == "üîô –ù–∞–∑–∞–¥":
                await self._handle_back(update)
            else:
                await update.message.reply_text(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                    reply_markup=user_keyboard
                )
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}", exc_info=True)
            try:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                    reply_markup=user_keyboard
                )
            except Exception as reply_error:
                bot_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {reply_error}")

        return ConversationHandler.END

    async def _handle_activity_24h(self, update: Update, context: ContextTypes.DEFAULT_TYPE = None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ 24 —á–∞—Å–∞"""
        try:
            chat_id = update.effective_chat.id
            bot_logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from user_activity_calculator import user_activity_manager

            report = user_activity_manager.get_user_activity_report(chat_id)

            user_keyboard = self.get_user_keyboard(chat_id)

            await update.message.reply_text(
                report,
                parse_mode="HTML",
                reply_markup=user_keyboard
            )

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 24—á: {e}")
            user_keyboard = self.get_user_keyboard(update.effective_chat.id)
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                reply_markup=user_keyboard
            )

    async def _handle_start_bot(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user_manager.is_admin(chat_id) and not user_manager.is_user_approved(chat_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.",
                reply_markup=user_keyboard,
                parse_mode="HTML"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_watchlist = user_manager.get_user_watchlist(chat_id)
        if not user_watchlist:
            await update.message.reply_text(
                "‚ö†Ô∏è <b>–í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç!</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–µ—Ç—ã –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –Ω–∞–∂–∞–≤ ‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å</b>",
                reply_markup=user_keyboard,
                parse_mode="HTML"
            )
            return

        if self.user_modes_manager.is_user_mode_running(chat_id):
            await update.message.reply_text(
                "‚úÖ –í–∞—à –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.",
                reply_markup=user_keyboard
            )
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await self.user_modes_manager.start_user_mode(chat_id)

        if success:
            await update.message.reply_text(
                f"‚úÖ <b>–í–∞—à –±–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>\n"
                f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è {len(user_watchlist)} –≤–∞—à–∏—Ö –º–æ–Ω–µ—Ç",
                reply_markup=user_keyboard,
                parse_mode="HTML"
            )
            bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª —Å–≤–æ–π —Ä–µ–∂–∏–º")
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∂–∏–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=user_keyboard,
                parse_mode="HTML"
            )

    async def _handle_stop_bot(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user_manager.is_admin(chat_id) and not user_manager.is_user_approved(chat_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.",
                reply_markup=user_keyboard,
                parse_mode="HTML"
            )
            return

        if not self.user_modes_manager.is_user_mode_running(chat_id):
            await update.message.reply_text(
                "‚ÑπÔ∏è –í–∞—à –±–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                reply_markup=user_keyboard
            )
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await self.user_modes_manager.stop_user_mode(chat_id)

        if success:
            await update.message.reply_text(
                "üõë <b>–í–∞—à –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )
            bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–≤–æ–π —Ä–µ–∂–∏–º")
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º.",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )

    async def _start_bot_mode(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        if self.bot_running:
            bot_logger.warning("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.bot_running = True
        self._active_coins.clear()
        self.processing_coins.clear()
        self.notification_locks.clear()
        self.monitoring_message_id = None

        bot_logger.info("üöÄ –ó–∞–ø—É—Å–∫ MEXCScalping Assistant")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏
        await self._start_message_queue_processor()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        initial_text = "üîÑ <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...</b>"
        self.monitoring_message_id = await self.send_message(initial_text)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        self.task = asyncio.create_task(self._main_loop())

    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        cycle_count = 0
        cleanup_counter = 0

        while self.bot_running:
            try:
                cycle_count += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                watchlist = watchlist_manager.get_all()
                if not watchlist:
                    no_coins_text = "‚ùå <b>–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç</b>\n–î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
                    if self.monitoring_message_id:
                        await self.edit_message(self.monitoring_message_id, no_coins_text)
                    await asyncio.sleep(config_manager.get('MONITORING_UPDATE_INTERVAL'))
                    continue

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
                cleanup_counter += 1
                if cleanup_counter >= 10:
                    await self._cleanup_stale_processes()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                    try:
                        from session_recorder import session_recorder
                        session_recorder.check_inactive_sessions(self._active_coins)
                    except Exception as e:
                        bot_logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
                    cleanup_counter = 0

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏)
                results, failed_coins = await self._fetch_bot_data()

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –º–æ–Ω–µ—Ç—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                for coin_data in results:
                    if not self.bot_running:
                        break

                    symbol = coin_data['symbol']

                    # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if symbol in self.processing_coins:
                        continue

                    try:
                        self.processing_coins.add(symbol)
                        await self._process_coin_notification(symbol, coin_data)
                    except Exception as e:
                        bot_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
                    finally:
                        self.processing_coins.discard(symbol)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç –≤ —Å–µ—Å—Å–∏–∏
                for coin_data in results:
                    if coin_data.get('active'):
                        try:
                            from session_recorder import session_recorder
                            session_recorder.update_coin_activity(coin_data['symbol'], coin_data)
                        except Exception as e:
                            bot_logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–∏ {coin_data['symbol']}: {e}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if results:
                    report = self._format_monitoring_report(results, failed_coins)
                    if self.monitoring_message_id:
                        await self.edit_message(self.monitoring_message_id, report)
                    else:
                        self.monitoring_message_id = await self.send_message(report)

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
                if cycle_count % 50 == 0:
                    import gc
                    gc.collect()
                    try:
                        from cache_manager import cache_manager
                        cache_manager.clear_expired()
                    except:
                        pass

                await asyncio.sleep(config_manager.get('MONITORING_UPDATE_INTERVAL'))

            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(1.0)

    async def _fetch_bot_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        watchlist = list(watchlist_manager.get_all())
        results = []
        failed_coins = []

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_config = user_manager.get_user_config(user_manager.admin_chat_id)
        vol_threshold = admin_config.get('VOLUME_THRESHOLD', 1000)
        spread_threshold = admin_config.get('SPREAD_THRESHOLD', 0.1)
        natr_threshold = admin_config.get('NATR_THRESHOLD', 0.5)

        batch_size = config_manager.get('CHECK_BATCH_SIZE', 15)
        for batch in self._chunks(watchlist, batch_size):
            if not self.bot_running:
                break

            try:
                batch_data = await api_client.get_batch_coin_data(batch)
                for symbol, coin_data in batch_data.items():
                    if coin_data:
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        coin_data['active'] = (
                            coin_data.get('volume', 0) >= vol_threshold and
                            coin_data.get('spread', 0) >= spread_threshold and
                            coin_data.get('natr', 0) >= natr_threshold and
                            coin_data.get('trades', 0) > 0
                        )
                        results.append(coin_data)
                    else:
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
                        try:
                            from cache_manager import cache_manager
                            cached_data = cache_manager.get_ticker_cache(symbol)
                            if cached_data:
                                # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
                                simplified_data = {
                                    'symbol': symbol,
                                    'price': float(cached_data.get('lastPrice', 0)),
                                    'volume': 0,  # –ù–µ –∑–Ω–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º
                                    'change': 0,  # –ù–µ –∑–Ω–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                                    'spread': 0,
                                    'natr': 0,
                                    'trades': 0,
                                    'active': False,  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é
                                    'has_recent_trades': False,
                                    'timestamp': time.time(),
                                    'from_cache': True  # –§–ª–∞–≥ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
                                }
                                results.append(simplified_data)
                            else:
                                failed_coins.append(symbol)
                        except:
                            failed_coins.append(symbol)
            except Exception as e:
                bot_logger.warning(f"API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è batch {batch}: {e}")
                # –ü—Ä–∏ –ø–æ–ª–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à
                for symbol in batch:
                    try:
                        from cache_manager import cache_manager
                        cached_data = cache_manager.get_ticker_cache(symbol)
                        if cached_data:
                            simplified_data = {
                                'symbol': symbol,
                                'price': float(cached_data.get('lastPrice', 0)),
                                'volume': 0,
                                'change': 0,
                                'spread': 0,
                                'natr': 0,
                                'trades': 0,
                                'active': False,
                                'has_recent_trades': False,
                                'timestamp': time.time(),
                                'from_cache': True
                            }
                            results.append(simplified_data)
                        else:
                            failed_coins.append(symbol)
                    except:
                        failed_coins.append(symbol)

            await asyncio.sleep(config_manager.get('CHECK_BATCH_INTERVAL', 0.4))

        return results, failed_coins

    async def _process_coin_notification(self, symbol: str, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–Ω–µ—Ç"""
        now = time.time()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç –≤ —Å–µ—Å—Å–∏–∏
        if data.get('active'):
            try:
                from session_recorder import session_recorder
                session_recorder.update_coin_activity(symbol, data)
                bot_logger.debug(f"üìä –î–∞–Ω–Ω—ã–µ {symbol} –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ Session Recorder")
            except Exception as e:
                bot_logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–∏ {symbol}: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
        try:
            from advanced_alerts import advanced_alert_manager
            advanced_alert_manager.check_coin_alerts(symbol, data)
        except:
            pass

        if data['active']:
            # –ú–æ–Ω–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞
            if symbol not in self._active_coins:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                if symbol in self.notification_locks:
                    return

                self.notification_locks.add(symbol)
                try:
                    await self._create_coin_notification(symbol, data, now)
                finally:
                    self.notification_locks.discard(symbol)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–Ω–µ—Ç—É
                await self._update_coin_notification(symbol, data, now)
        else:
            # –ú–æ–Ω–µ—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if symbol in self._active_coins:
                coin_info = self._active_coins[symbol]

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è
                if coin_info.get('creating', False):
                    return

                inactivity_timeout = config_manager.get('INACTIVITY_TIMEOUT')
                if now - coin_info['last_active'] > inactivity_timeout:
                    await self._end_coin_activity(symbol, now)

    async def _create_coin_notification(self, symbol: str, data: Dict, now: float):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã"""
        if not self.bot_running:
            return

        bot_logger.info(f"[NOTIFICATION_START] {symbol} - –Ω–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–Ω–µ—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å —Ñ–ª–∞–≥–æ–º creating
        self._active_coins[symbol] = {
            'start': now,
            'last_active': now,
            'data': data.copy(),
            'creating': True,
            'creation_start': now
        }

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üö® <b>{symbol}_USDT –∞–∫—Ç–∏–≤–µ–Ω</b>\n"
            f"üîÑ –ò–∑–º: {data['change']:+.2f}%  üîÅ –°–¥–µ–ª–æ–∫: {data['trades']}\n"
            f"üìä –û–±—ä—ë–º: ${data['volume']:,.2f}  NATR: {data['natr']:.2f}%\n"
            f"‚áÑ –°–ø—Ä–µ–¥: {data['spread']:.2f}%"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_id = await self.send_message(message)

        if msg_id and symbol in self._active_coins:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º msg_id
            self._active_coins[symbol].update({
                'msg_id': msg_id,
                'creating': False
            })
            bot_logger.trade_activity(symbol, "STARTED", f"Volume: ${data['volume']:,.2f}")
            bot_logger.info(f"[NOTIFICATION_SUCCESS] {symbol} - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            # –£–¥–∞–ª—è–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –∑–∞–ø–∏—Å—å
            if symbol in self._active_coins:
                del self._active_coins[symbol]
            bot_logger.warning(f"[NOTIFICATION_FAILED] {symbol} - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

    async def _update_coin_notification(self, symbol: str, data: Dict, now: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if not self.bot_running:
            return

        coin_info = self._active_coins[symbol]

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è
        if coin_info.get('creating', False):
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        coin_info['last_active'] = now
        coin_info['data'] = data

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å msg_id
        msg_id = coin_info.get('msg_id')
        if msg_id and isinstance(msg_id, int):
            new_message = (
                f"üö® <b>{symbol}_USDT –∞–∫—Ç–∏–≤–µ–Ω</b>\n"
                f"üîÑ –ò–∑–º: {data['change']:+.2f}%  üîÅ –°–¥–µ–ª–æ–∫: {data['trades']}\n"
                f"üìä –û–±—ä—ë–º: ${data['volume']:,.2f}  NATR: {data['natr']:.2f}%\n"
                f"‚áÑ –°–ø—Ä–µ–¥: {data['spread']:.2f}%"
            )

            await self.edit_message(msg_id, new_message)

    async def _end_coin_activity(self, symbol: str, end_time: float):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã"""
        if symbol not in self._active_coins:
            return

        coin_info = self._active_coins[symbol]
        duration = end_time - coin_info['start']

        bot_logger.info(f"[END] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {symbol}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}—Å")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        msg_id = coin_info.get('msg_id')
        if msg_id and isinstance(msg_id, int) and msg_id > 0:
            await self.delete_message(msg_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ >= 60 —Å–µ–∫—É–Ω–¥
        if duration >= 60:
            duration_min = int(duration // 60)
            duration_sec = int(duration % 60)
            end_message = (
                f"‚úÖ <b>{symbol}_USDT –∑–∞–≤–µ—Ä—à–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_min} –º–∏–Ω {duration_sec} —Å–µ–∫"
            )
            await self.send_message(end_message)
            bot_logger.trade_activity(symbol, "ENDED", f"Duration: {duration_min}m {duration_sec}s")

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
        del self._active_coins[symbol]

    async def _cleanup_stale_processes(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        current_time = time.time()
        to_remove = []

        for symbol, coin_info in list(self._active_coins.items()):
            # –ú–æ–Ω–µ—Ç—ã –±–µ–∑ msg_id (orphaned)
            if not coin_info.get('msg_id') and not coin_info.get('creating', False):
                to_remove.append(symbol)
            # –ó–∞–≤–∏—Å—à–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–æ–∑–¥–∞–Ω–∏—è (–±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥)
            elif coin_info.get('creating', False):
                start_time = coin_info.get('creation_start', current_time)
                if current_time - start_time > 10:
                    to_remove.append(symbol)

        for symbol in to_remove:
            try:
                del self._active_coins[symbol]
                bot_logger.info(f"[CLEANUP] –û—á–∏—â–µ–Ω–∞ –∑–∞–≤–∏—Å—à–∞—è –º–æ–Ω–µ—Ç–∞ {symbol}")
            except Exception as e:
                bot_logger.error(f"[CLEANUP] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {symbol}: {e}")

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        self.processing_coins.clear()

    def _format_monitoring_report(self, results: List[Dict], failed_coins: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        results.sort(key=lambda x: x['volume'], reverse=True)

        parts = ["<b>üìä –°–∫–∞–ª—å–ø–∏–Ω–≥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (1–º –¥–∞–Ω–Ω—ã–µ)</b>\n"]

        # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∏—Ö –ª–∏—á–Ω—ã–µ
        if user_manager.is_admin(self.chat_id):
            vol_thresh = 1000
            spread_thresh = 0.1
            natr_thresh = 0.5
            filter_prefix = "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            admin_config = user_manager.get_user_config(user_manager.admin_chat_id)
            vol_thresh = admin_config.get('VOLUME_THRESHOLD', 1000)
            spread_thresh = admin_config.get('SPREAD_THRESHOLD', 0.1)
            natr_thresh = admin_config.get('NATR_THRESHOLD', 0.5)
            filter_prefix = "–§–∏–ª—å—Ç—Ä—ã"

        parts.append(
            f"<i>{filter_prefix}: 1–º –æ–±–æ—Ä–æ—Ç ‚â•${vol_thresh:,}, "
            f"–°–ø—Ä–µ–¥ ‚â•{spread_thresh}%, NATR ‚â•{natr_thresh}%</i>\n"
        )

        if failed_coins:
            parts.append(f"‚ö† <i>–û—à–∏–±–∫–∏: {', '.join(failed_coins[:5])}</i>\n")

        active_coins = [r for r in results if r['active']]
        if active_coins:
            parts.append("<b>üü¢ –ê–ö–¢–ò–í–ù–´–ï:</b>")
            for coin in active_coins[:10]:
                trades_icon = "üî•" if coin.get('has_recent_trades') else "üìä"
                cache_icon = "üíæ" if coin.get('from_cache') else ""
                parts.append(
                    f"‚Ä¢ <b>{coin['symbol']}</b>{cache_icon} "
                    f"${coin['volume']:,.0f} | {coin['change']:+.1f}% | "
                    f"{trades_icon}T:{coin['trades']} | S:{coin['spread']:.2f}% | N:{coin['natr']:.2f}%"
                )
            parts.append("")

        inactive_coins = [r for r in results if not r['active']]
        if inactive_coins:
            parts.append("<b>üî¥ –ù–ï–ê–ö–¢–ò–í–ù–´–ï (—Ç–æ–ø –ø–æ –æ–±—ä—ë–º—É):</b>")
            for coin in inactive_coins[:8]:
                trades_status = "‚úÖ" if coin['trades'] > 0 else "‚ùå"
                cache_icon = "üíæ" if coin.get('from_cache') else ""
                parts.append(
                    f"‚Ä¢ <b>{coin['symbol']}</b>{cache_icon} "
                    f"${coin['volume']:,.0f} | {coin['change']:+.1f}% | "
                    f"{trades_status}T:{coin['trades']} | S:{coin['spread']:.2f}% | N:{coin['natr']:.2f}%"
                )

        parts.append(f"\nüìà –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_coins)}/{len(results)}")

        report = "\n".join(parts)
        if len(report) > 4000:
            report = report[:4000] + "\n... <i>(–æ—Ç—á–µ—Ç –æ–±—Ä–µ–∑–∞–Ω)</i>"

        return report

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    # [–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞]

    async def _handle_add_coin_start(self, update: Update):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
        chat_id = update.effective_chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user_manager.is_admin(chat_id) and not user_manager.is_user_approved(chat_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        await update.message.reply_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>BTC</code> –∏–ª–∏ <code>BTC_USDT</code>):",
            reply_markup=self.back_keyboard,
            parse_mode=ParseMode.HTML
        )
        return self.ADDING_COIN

    async def _handle_remove_coin_start(self, update: Update):
        """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user_manager.is_admin(chat_id) and not user_manager.is_user_approved(chat_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        coins = user_manager.get_user_watchlist(chat_id)
        list_title = "–≤–∞—à —Å–ø–∏—Å–æ–∫"

        if len(coins) == 0:
            await update.message.reply_text(
                f"‚ùå {list_title.capitalize()} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç.",
                reply_markup=user_keyboard
            )
            return ConversationHandler.END

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –æ–±—Ä–µ–∑–∞–Ω–∏—è
        coins_list = ", ".join(sorted(coins))

        await update.message.reply_text(
            f"‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π {list_title}: {coins_list}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=self.back_keyboard,
            parse_mode=ParseMode.HTML
        )
        return self.REMOVING_COIN

    async def setup_application(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        from telegram.error import Conflict, NetworkError, TimedOut

        builder = Application.builder()
        builder.token(self.token)
        builder.connection_pool_size(4)
        builder.pool_timeout(15.0)
        builder.read_timeout(20.0)
        builder.write_timeout(20.0)

        async def error_handler(update, context):
            error = context.error

            if isinstance(error, Conflict):
                bot_logger.warning("–ö–æ–Ω—Ñ–ª–∏–∫—Ç Telegram API - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
                return
            elif isinstance(error, (NetworkError, TimedOut)):
                bot_logger.debug(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Telegram: {type(error).__name__}")
                return
            else:
                bot_logger.error(f"–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {error}")

        self.app = builder.build()
        self.app.add_error_handler(error_handler)

        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.TEXT & ~filters.COMMAND, self.button_handler)
            ],
            states={
                self.ADDING_COIN: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.add_coin_handler)
                ],
                self.REMOVING_COIN: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.remove_coin_handler)
                ]
            },
            fallbacks=[
                CommandHandler("start", self.start_handler),
                MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥$"), self._handle_back)
            ],
            per_message=False
        )

        self.app.add_handler(CommandHandler("start", self.start_handler))
        self.app.add_handler(conv_handler)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
        self.app.add_handler(CallbackQueryHandler(self.callback_query_handler))

        return self.app

    async def add_coin_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)
        text = update.message.text

        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_back(update)
            return ConversationHandler.END

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
        if not input_validator.validate_symbol(text):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC –∏–ª–∏ ETH)",
                reply_markup=self.back_keyboard,
                parse_mode=ParseMode.HTML
            )
            return self.ADDING_COIN

        symbol = text.upper().replace('_USDT', '').replace('USDT', '')

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ API
            ticker_data = await api_client.get_ticker_data(symbol)
            if not ticker_data:
                await update.message.reply_text(
                    f"‚ùå –ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ MEXC",
                    reply_markup=self.back_keyboard,
                    parse_mode=ParseMode.HTML
                )
                return self.ADDING_COIN

            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_manager.add_coin_to_user_watchlist(chat_id, symbol):
                await update.message.reply_text(
                    f"‚úÖ –ú–æ–Ω–µ—Ç–∞ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫",
                    reply_markup=user_keyboard,
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    f"‚ÑπÔ∏è –ú–æ–Ω–µ—Ç–∞ {symbol} —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ",
                    reply_markup=user_keyboard,
                    parse_mode=ParseMode.HTML
                )

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–Ω–µ—Ç—ã {symbol}: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–Ω–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )

        return ConversationHandler.END

    async def remove_coin_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)
        text = update.message.text

        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_back(update)
            return ConversationHandler.END

        symbol = text.upper().replace('_USDT', '').replace('USDT', '')

        # –£–¥–∞–ª—è–µ–º –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_manager.remove_coin_from_user_watchlist(chat_id, symbol):
            await update.message.reply_text(
                f"‚úÖ –ú–æ–Ω–µ—Ç–∞ {symbol} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )

        return ConversationHandler.END

    async def _handle_show_list(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        coins = user_manager.get_user_watchlist(chat_id)
        list_title = "üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"

        if not coins:
            await update.message.reply_text(
                f"üìã {list_title} –ø—É—Å—Ç",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )
            return

        coins.sort()
        coins_text = "\n".join([f"‚Ä¢ {coin}" for coin in coins])

        message = f"üìã <b>{list_title}</b> ({len(coins)} –º–æ–Ω–µ—Ç):\n\n{coins_text}"

        if len(message) > 4000:
            message = message[:4000] + "\n... <i>(—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)</i>"

        await update.message.reply_text(
            message,
            reply_markup=user_keyboard,
            parse_mode=ParseMode.HTML
        )

    async def _handle_status(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        user_running = self.user_modes_manager.is_user_mode_running(chat_id)
        user_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if user_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        user_watchlist = user_manager.get_user_watchlist(chat_id)
        user_config = user_manager.get_user_config(chat_id)
        
        vol_thresh = user_config.get('VOLUME_THRESHOLD', 1000)
        spread_thresh = user_config.get('SPREAD_THRESHOLD', 0.1)
        natr_thresh = user_config.get('NATR_THRESHOLD', 0.5)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = self.user_modes_manager.get_user_mode_stats(chat_id)
        active_coins_count = user_stats.get('active_coins', 0)
        
        message = (
            f"‚Ñπ <b>–í–∞—à —Å—Ç–∞—Ç—É—Å</b>\n\n"
            f"ü§ñ –í–∞—à –±–æ—Ç: <code>{user_status}</code>\n"
            f"üìã –í–∞—à —Å–ø–∏—Å–æ–∫: {len(user_watchlist)} –º–æ–Ω–µ—Ç\n"
            f"üìä –í–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç: <code>{active_coins_count}</code>\n"
            f"üéØ –í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã: 1–º –æ–±–æ—Ä–æ—Ç ‚â•${vol_thresh:,}, –°–ø—Ä–µ–¥ ‚â•{spread_thresh}%, NATR ‚â•{natr_thresh}%\n"
        )
        
        if user_running:
            uptime = user_stats.get('uptime', 0)
            uptime_str = f"{int(uptime//3600)}—á {int((uptime%3600)//60)}–º" if uptime > 0 else "< 1–º"
            message += f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n"
            
        # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if user_manager.is_admin(chat_id):
            all_stats = self.user_modes_manager.get_all_stats()
            message += (
                f"\nüë• <b>–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω):</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_stats['total_users']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤: {all_stats['running_modes']}\n"
            )
            
        message += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <code>{time.strftime('%H:%M:%S')}</code>"

        await update.message.reply_text(
            message,
            reply_markup=user_keyboard,
            parse_mode=ParseMode.HTML
        )

    async def _handle_refresh_monitoring(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        if not self.user_modes_manager.is_user_mode_running(chat_id):
            await update.message.reply_text(
                "‚ÑπÔ∏è –í–∞—à –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω.\n–î–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞–∂–º–∏—Ç–µ üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )
            return

        await update.message.reply_text(
            "‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>\n–í–∞—à –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ",
            reply_markup=user_keyboard,
            parse_mode=ParseMode.HTML
        )



    async def _handle_back(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        await update.message.reply_text(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=user_keyboard,
            parse_mode=ParseMode.HTML
        )

    async def callback_query_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        chat_id = query.from_user.id
        data = query.data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        admin_actions = ["approve_", "reject_", "revoke_", "show_all_users", "users_page_"]
        is_admin_action = any(data.startswith(action) for action in admin_actions)

        if is_admin_action and not user_manager.is_admin(chat_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if data.startswith("approve_"):
            target_chat_id = data.replace("approve_", "")
            await self.admin_handlers.handle_approve_user(update, context, target_chat_id)
        elif data.startswith("reject_"):
            target_chat_id = data.replace("reject_", "")
            await self.admin_handlers.handle_reject_user(update, context, target_chat_id)
        elif data.startswith("revoke_"):
            target_chat_id = data.replace("revoke_", "")
            await self.admin_handlers.handle_revoke_user(update, context, target_chat_id)
        elif data == "show_all_users":
            await self.admin_handlers.handle_show_all_users(update, context)
        elif data == "activity_24h":
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from user_activity_calculator import user_activity_manager

            activity_report = user_activity_manager.get_user_detailed_activity_report(str(chat_id))

            await query.edit_message_text(
                text=activity_report,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")]
                ]),
                parse_mode=ParseMode.HTML
            )

# Creates an instance of the bot
telegram_bot = TradingTelegramBot()