
#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–í–µ—Ä—Å–∏—è: 2.1
"""

import asyncio
import time
import json
from datetime import datetime
from typing import Dict, Any, Optional, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler

from logger import bot_logger
from config import config_manager
from watchlist_manager import watchlist_manager

class TradingTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    def __init__(self):
        self.bot_running = False
        self.bot_mode = None
        self.active_coins = {}
        self.monitoring_message_id = None
        self.application = None
        
    def setup_application(self) -> Application:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            token = config_manager.get('telegram_token')
            if not token:
                raise ValueError("TELEGRAM_TOKEN not found")
                
            self.application = Application.builder().token(token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
            self.application.add_handler(CallbackQueryHandler(self.callback_handler))
            
            bot_logger.info("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            return self.application
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            raise
    
    async def send_startup_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            welcome_message = """
üëã *–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—É—Ç!*

ü§ñ *–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç v2.1* –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="start_monitoring"),
                    InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å", callback_data="show_status")
                ],
                [
                    InlineKeyboardButton("üìã Watchlist", callback_data="show_watchlist"),
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings")
                ],
                [
                    InlineKeyboardButton("üõë –°—Ç–æ–ø", callback_data="stop_bot"),
                    InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            chat_id = config_manager.get('telegram_chat_id')
            if chat_id and self.application and self.application.bot:
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=welcome_message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                
                self.bot_running = True
                bot_logger.info("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            welcome_message = """
ü§ñ *–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç v2.1*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="start_monitoring"),
                    InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å", callback_data="show_status")
                ],
                [
                    InlineKeyboardButton("üìã Watchlist", callback_data="show_watchlist"),
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings")
                ],
                [
                    InlineKeyboardButton("üõë –°—Ç–æ–ø", callback_data="stop_bot"),
                    InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                welcome_message, 
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            self.bot_running = True
            bot_logger.info(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            status_info = f"""
üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ v2.1*

ü§ñ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if self.bot_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üìà –†–µ–∂–∏–º: {self.bot_mode or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üí∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç: {len(self.active_coins)}
üìã –†–∞–∑–º–µ—Ä watchlist: {watchlist_manager.size()}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
            """
            
            await update.message.reply_text(
                status_info,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            help_text = """
üÜò *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

*–ö–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–§—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–ø—Ä–µ–¥–æ–≤

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞.
            """
            
            await update.message.reply_text(
                help_text,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")
    
    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        try:
            query = update.callback_query
            await query.answer()  # –£–±–∏—Ä–∞–µ–º "loading" —Å –∫–Ω–æ–ø–∫–∏
            
            data = query.data
            bot_logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {data}")
            
            if data == "start_monitoring":
                await self.start_monitoring(query)
            elif data == "show_status":
                await self.show_status_callback(query)
            elif data == "show_watchlist":
                await self.show_watchlist_callback(query)
            elif data == "show_settings":
                await self.show_settings_callback(query)
            elif data == "stop_bot":
                await self.stop_bot_callback(query)
            elif data == "show_help":
                await self.show_help_callback(query)
            else:
                await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
                
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ callback handler: {e}")
            try:
                await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
            except:
                pass

    async def start_monitoring(self, query):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.bot_mode = "monitoring"
        message = """
üìä *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!*

üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –º–æ–Ω–µ—Ç—ã –∏–∑ watchlist...
üìà –ò—â—É —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
‚ö° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üõë –°—Ç–æ–ø"
        """
        await query.edit_message_text(message, parse_mode='Markdown')
        bot_logger.info("–†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

    async def show_status_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ callback"""
        status_info = f"""
üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ v2.1*

ü§ñ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if self.bot_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üìà –†–µ–∂–∏–º: {self.bot_mode or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üí∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç: {len(self.active_coins)}
üìã –†–∞–∑–º–µ—Ä watchlist: {watchlist_manager.size()}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
        """
        await query.edit_message_text(status_info, parse_mode='Markdown')

    async def show_watchlist_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å watchlist"""
        coins = watchlist_manager.get_symbols()
        if coins:
            coins_text = ", ".join(coins[:20])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            message = f"""
üìã *Watchlist ({len(coins)} –º–æ–Ω–µ—Ç)*

{coins_text}

{f"...–∏ –µ—â–µ {len(coins) - 20} –º–æ–Ω–µ—Ç" if len(coins) > 20 else ""}
            """
        else:
            message = "üìã *Watchlist –ø—É—Å—Ç*\n\n–î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
            
        await query.edit_message_text(message, parse_mode='Markdown')

    async def show_settings_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        volume_threshold = config_manager.get('VOLUME_THRESHOLD', 1500)
        spread_threshold = config_manager.get('SPREAD_THRESHOLD', 0.1)
        natr_threshold = config_manager.get('NATR_THRESHOLD', 0.4)
        
        settings_text = f"""
‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*

üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º: ${volume_threshold:,.0f}
‚áÑ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {spread_threshold:.1%}
üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π NATR: {natr_threshold:.1%}

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ config.json
        """
        await query.edit_message_text(settings_text, parse_mode='Markdown')

    async def stop_bot_callback(self, query):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
        self.bot_mode = None
        self.active_coins.clear()
        message = """
üõë *–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*

üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω
üí∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –æ—á–∏—â–µ–Ω—ã
‚è∏Ô∏è –†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è

–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start
        """
        await query.edit_message_text(message, parse_mode='Markdown')
        bot_logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    async def show_help_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
        help_text = """
üÜò *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É v2.1*

*–ö–Ω–æ–ø–∫–∏:*
üìä –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
üìà –°—Ç–∞—Ç—É—Å - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
üìã Watchlist - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
üõë –°—Ç–æ–ø - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
‚ÑπÔ∏è –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/status - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å
/help - —Å–ø—Ä–∞–≤–∫–∞

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!
        """
        await query.edit_message_text(help_text, parse_mode='Markdown')

    async def send_notification(self, message: str, parse_mode: str = 'Markdown'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        try:
            if not self.application or not self.application.bot:
                bot_logger.warning("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                return False
                
            chat_id = config_manager.get('telegram_chat_id')
            if not chat_id:
                bot_logger.error("TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode=parse_mode
            )
            
            return True
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_bot = TradingTelegramBot()
