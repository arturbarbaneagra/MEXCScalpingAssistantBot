import asyncio
import time
import threading
from typing import Dict, Optional, List
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode
from logger import bot_logger
from config import config_manager
from api_client import api_client
from optimized_api_client import optimized_api_client
from watchlist_manager import watchlist_manager
from bot_state import bot_state_manager
from advanced_alerts import advanced_alert_manager, AlertType, AlertSeverity
import os

class TradingTelegramBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')

        if not self.token or not self.chat_id:
            raise ValueError("TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        self.app = None
        self.bot_running = False
        self.bot_mode = None
        self.active_coins: Dict[str, Dict] = {}
        self.monitoring_message_id = None
        self.last_message_time = 0

        # –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
        self.ADDING_COIN, self.REMOVING_COIN = range(2)
        self.SETTING_VOLUME, self.SETTING_SPREAD, self.SETTING_NATR = range(2, 5)

        self._setup_keyboards()

    def _setup_keyboards(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        self.main_keyboard = ReplyKeyboardMarkup([
            ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ûñ –£–¥–∞–ª–∏—Ç—å"],
            ["üìã –°–ø–∏—Å–æ–∫", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
            ["üõë –°—Ç–æ–ø", "‚Ñπ –°—Ç–∞—Ç—É—Å"]
        ], resize_keyboard=True, one_time_keyboard=False)

        self.settings_keyboard = ReplyKeyboardMarkup([
            ["üìä –û–±—ä—ë–º", "‚áÑ –°–ø—Ä–µ–¥"],
            ["üìà NATR", "üö® –ê–ª–µ—Ä—Ç—ã"],
            ["üîÑ –°–±—Ä–æ—Å", "üîô –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)

        self.back_keyboard = ReplyKeyboardMarkup([
            ["üîô –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)

    async def _rate_limit_message(self):
        """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        current_time = time.time()
        min_interval = 0.5  # –£–º–µ–Ω—å—à–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        if current_time - self.last_message_time < min_interval:
            await asyncio.sleep(min_interval - (current_time - self.last_message_time))

        self.last_message_time = time.time()

    async def send_message(self, text: str, reply_markup=None, parse_mode=ParseMode.HTML) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        if not self.app or not self.app.bot:
            return None

        try:
            current_loop = asyncio.get_running_loop()
            if current_loop.is_closed():
                return None
        except RuntimeError:
            return None

        await self._rate_limit_message()

        try:
            message = await self.app.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            return message.message_id
        except Exception as e:
            error_message = str(e).lower()
            if any(phrase in error_message for phrase in [
                "event loop", "different event loop", "asyncio.locks.event",
                "is bound to a different event loop", "runtimeerror"
            ]):
                bot_logger.debug(f"Event loop –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {type(e).__name__}")
                return None
            else:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                return None

    async def edit_message(self, message_id: int, text: str, reply_markup=None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            await self.app.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {type(e).__name__}")

    async def delete_message(self, message_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ"""
        if not message_id or not isinstance(message_id, int) or message_id <= 0:
            return False

        if not self.app or not self.app.bot:
            return False

        try:
            await asyncio.wait_for(
                self.app.bot.delete_message(chat_id=self.chat_id, message_id=message_id),
                timeout=2.0
            )
            return True

        except asyncio.TimeoutError:
            return False
        except Exception as e:
            error_message = str(e).lower()
            ignored_errors = [
                "message to delete not found", "message can't be deleted", "message is too old",
                "bad request", "not found", "event loop", "different event loop", 
                "asyncio.locks.event", "runtimeerror", "is bound to a different event loop",
                "cannot be called from a running event loop", "event loop is closed",
                "networkerror", "unknown error in http implementation"
            ]

            if any(phrase in error_message for phrase in ignored_errors):
                return False
            else:
                bot_logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
                return False

    def _chunks(self, lst: List, size: int):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞–Ω–∫–∏"""
        for i in range(0, len(lst), size):
            yield lst[i:i + size]

    async def _stop_current_mode(self):
        """–ë—ã—Å—Ç—Ä–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if self.bot_mode:
            bot_logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞: {self.bot_mode}")
            self.bot_running = False

            # –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            try:
                if self.monitoring_message_id:
                    asyncio.create_task(self.delete_message(self.monitoring_message_id))
                    self.monitoring_message_id = None

                if self.active_coins:
                    for coin_data in self.active_coins.values():
                        if coin_data.get('msg_id'):
                            asyncio.create_task(self.delete_message(coin_data['msg_id']))
                    self.active_coins.clear()

            except Exception as e:
                bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {type(e).__name__}")
                self.monitoring_message_id = None
                self.active_coins.clear()

            self.bot_mode = None
            bot_state_manager.set_last_mode(None)

    async def _notification_mode_loop_ultra(self):
        """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        bot_logger.info("üöÄ –ó–∞–ø—É—â–µ–Ω —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

        while self.bot_running and self.bot_mode == 'notification':
            watchlist = watchlist_manager.get_all()
            if not watchlist:
                await asyncio.sleep(0.5)
                continue

            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
                coin_data_batch = await optimized_api_client.get_batch_coin_data_ultra(watchlist)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                tasks = []
                for symbol, data in coin_data_batch.items():
                    if data:
                        task = self._process_coin_notification_fast(symbol, data)
                        tasks.append(task)

                if tasks:
                    await asyncio.gather(*tasks, return_exceptions=True)

            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            await asyncio.sleep(0.3)  # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    async def _process_coin_notification_fast(self, symbol: str, data: Dict):
        """–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–µ—Ç—ã"""
        now = time.time()
        is_currently_active = symbol in self.active_coins

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        try:
            advanced_alert_manager.check_coin_alerts(symbol, data)
        except Exception:
            pass

        if data['active']:
            if not is_currently_active:
                # –ù–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–Ω–µ—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                message = (
                    f"üö® <b>{symbol}_USDT –∞–∫—Ç–∏–≤–µ–Ω</b>\n"
                    f"üí∞ ${data['price']:.6f} | üîÑ {data['change']:+.2f}%\n"
                    f"üìä ${data['volume']:,.0f} | ‚áÑ {data['spread']:.2f}%\n"
                    f"üìà NATR: {data['natr']:.2f}% | üîÅ {data['trades']}"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
                msg_task = asyncio.create_task(self.send_message(message))

                self.active_coins[symbol] = {
                    'start': now,
                    'last_active': now,
                    'msg_id': None,  # –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ
                    'data': data,
                    'msg_task': msg_task
                }

                bot_logger.trade_activity(symbol, "STARTED", f"Volume: ${data['volume']:,.0f}")

                # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                try:
                    msg_id = await msg_task
                    if msg_id:
                        self.active_coins[symbol]['msg_id'] = msg_id
                except Exception:
                    pass

            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–Ω–µ—Ç—ã
                self.active_coins[symbol]['last_active'] = now
                self.active_coins[symbol]['data'] = data

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å ID
                msg_id = self.active_coins[symbol].get('msg_id')
                if msg_id:
                    message = (
                        f"üö® <b>{symbol}_USDT –∞–∫—Ç–∏–≤–µ–Ω</b>\n"
                        f"üí∞ ${data['price']:.6f} | üîÑ {data['change']:+.2f}%\n"
                        f"üìä ${data['volume']:,.0f} | ‚áÑ {data['spread']:.2f}%\n"
                        f"üìà NATR: {data['natr']:.2f}% | üîÅ {data['trades']}"
                    )
                    asyncio.create_task(self.edit_message(msg_id, message))

        elif is_currently_active:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            inactivity_timeout = config_manager.get('INACTIVITY_TIMEOUT', 180)
            if now - self.active_coins[symbol]['last_active'] > inactivity_timeout:
                asyncio.create_task(self._end_coin_activity_fast(symbol, now))

    async def _end_coin_activity_fast(self, symbol: str, end_time: float):
        """–ë—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã"""
        try:
            coin_info = self.active_coins[symbol]
            duration = end_time - coin_info['start']

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            msg_id = coin_info.get('msg_id')
            if msg_id:
                asyncio.create_task(self.delete_message(msg_id))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ >= 60 —Å–µ–∫—É–Ω–¥
            if duration >= 60:
                duration_min = int(duration // 60)
                duration_sec = int(duration % 60)
                end_message = (
                    f"‚úÖ <b>{symbol}_USDT –∑–∞–≤–µ—Ä—à–∏–ª</b>\n"
                    f"‚è± {duration_min}–º {duration_sec}—Å"
                )
                asyncio.create_task(self.send_message(end_message))
                bot_logger.trade_activity(symbol, "ENDED", f"Duration: {duration_min}m {duration_sec}s")

            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
            del self.active_coins[symbol]

        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {symbol}: {e}")

    async def _monitoring_mode_loop_ultra(self):
        """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        bot_logger.info("üöÄ –ó–∞–ø—É—â–µ–Ω —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        initial_text = "üöÄ <b>–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>"
        self.monitoring_message_id = await self.send_message(initial_text)

        cycle_count = 0
        while self.bot_running and self.bot_mode == 'monitoring':
            cycle_count += 1

            watchlist = watchlist_manager.get_all()
            if not watchlist:
                await asyncio.sleep(2)
                continue

            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
                coin_data_batch = await optimized_api_client.get_batch_coin_data_ultra(watchlist)

                if coin_data_batch:
                    results = list(coin_data_batch.values())
                    failed_coins = [symbol for symbol in watchlist if symbol not in coin_data_batch]

                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                    report = self._format_monitoring_report_fast(results, failed_coins)
                    if self.monitoring_message_id:
                        asyncio.create_task(self.edit_message(self.monitoring_message_id, report))

            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

            # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 100 —Ü–∏–∫–ª–æ–≤
            if cycle_count % 100 == 0:
                import gc
                gc.collect()

            # –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await asyncio.sleep(0.5)  # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    def _format_monitoring_report_fast(self, results: List[Dict], failed_coins: List[str]) -> str:
        """–ë—ã—Å—Ç—Ä–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
        results.sort(key=lambda x: x['volume'], reverse=True)

        parts = ["<b>üöÄ –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n"]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        active_coins = [r for r in results if r['active']]
        if active_coins:
            parts.append(f"<b>üü¢ –ê–ö–¢–ò–í–ù–´–ï ({len(active_coins)}):</b>")
            for coin in active_coins[:8]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                parts.append(
                    f"‚Ä¢ <b>{coin['symbol']}</b> "
                    f"${coin['volume']:,.0f} | {coin['change']:+.1f}% | "
                    f"S:{coin['spread']:.2f}% | N:{coin['natr']:.2f}%"
                )
            parts.append("")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã (—Ç–æ–ø)
        inactive_coins = [r for r in results if not r['active']]
        if inactive_coins:
            parts.append(f"<b>üî¥ –ù–ï–ê–ö–¢–ò–í–ù–´–ï (—Ç–æ–ø {min(6, len(inactive_coins))}):</b>")
            for coin in inactive_coins[:6]:
                parts.append(
                    f"‚Ä¢ <b>{coin['symbol']}</b> "
                    f"${coin['volume']:,.0f} | {coin['change']:+.1f}%"
                )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        parts.append(f"\nüìä {len(active_coins)}/{len(results)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        if failed_coins:
            parts.append(f"‚ö† {len(failed_coins)} –æ—à–∏–±–æ–∫")

        report = "\n".join(parts)

        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(report) > 3500:
            report = report[:3500] + "\n..."

        return report

    def start_monitoring_loop(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run_loop():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            if self.bot_mode == 'notification':
                loop.run_until_complete(self._notification_mode_loop_ultra())
            elif self.bot_mode == 'monitoring':
                loop.run_until_complete(self._monitoring_mode_loop_ultra())

        thread = threading.Thread(target=run_loop, daemon=True)
        thread.start()
        return thread

    # Telegram Handlers (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        last_mode = bot_state_manager.get_last_mode()

        welcome_text = (
            "üöÄ <b>–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç v2.1</b>\n\n"
            "‚ö° <b>–†–µ–∂–∏–º—ã:</b>\n"
            "‚Ä¢ üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã\n"
            "‚Ä¢ üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b> - —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è\n\n"
        )

        # –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        if last_mode and not self.bot_running:
            if last_mode == 'notification':
                welcome_text += "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...</b>\n\n"
                await update.message.reply_text(welcome_text + "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML)

                self.bot_mode = 'notification'
                self.bot_running = True
                self.start_monitoring_loop()

                await self.send_message("‚úÖ <b>–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã</b>")
                return

            elif last_mode == 'monitoring':
                welcome_text += "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...</b>\n\n"
                await update.message.reply_text(welcome_text + "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML)

                self.bot_mode = 'monitoring'
                self.bot_running = True
                self.start_monitoring_loop()

                await self.send_message("‚úÖ <b>–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω</b>")
                return

        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await update.message.reply_text(welcome_text, reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
        text = update.message.text

        try:
            if text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
                await self._handle_notification_mode(update)
            elif text == "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
                await self._handle_monitoring_mode(update)
            elif text == "üõë –°—Ç–æ–ø":
                await self._handle_stop(update)
            elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
                return await self._handle_add_coin_start(update)
            elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å":
                return await self._handle_remove_coin_start(update)
            elif text == "üìã –°–ø–∏—Å–æ–∫":
                await self._handle_show_list(update)
            elif text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                await self._handle_settings(update)
            elif text == "üìä –û–±—ä—ë–º":
                return await self._handle_volume_setting_start(update)
            elif text == "‚áÑ –°–ø—Ä–µ–¥":
                return await self._handle_spread_setting_start(update)
            elif text == "üìà NATR":
                return await self._handle_natr_setting_start(update)
            elif text == "üö® –ê–ª–µ—Ä—Ç—ã":
                await self._handle_alerts(update)
            elif text == "üîÑ –°–±—Ä–æ—Å":
                await self._handle_reset_settings(update)
            elif text == "‚Ñπ –°—Ç–∞—Ç—É—Å":
                await self._handle_status(update)
            elif text == "üîô –ù–∞–∑–∞–¥":
                await self._handle_back(update)
            else:
                await update.message.reply_text(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                    reply_markup=self.main_keyboard
                )
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self.main_keyboard
            )

        return ConversationHandler.END

    async def _handle_notification_mode(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.bot_running and self.bot_mode == 'notification':
            await update.message.reply_text(
                "‚úÖ –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã.",
                reply_markup=self.main_keyboard
            )
            return

        await self._stop_current_mode()
        await asyncio.sleep(0.5)

        self.bot_mode = 'notification'
        self.bot_running = True
        bot_state_manager.set_last_mode('notification')

        try:
            await update.message.reply_text(
                "üöÄ <b>–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã</b>\n"
                "‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö\n"
                "üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 0.3 —Å–µ–∫—É–Ω–¥—ã",
                reply_markup=self.main_keyboard,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {type(e).__name__}")

        self.start_monitoring_loop()

    async def _handle_monitoring_mode(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.bot_running and self.bot_mode == 'monitoring':
            await update.message.reply_text(
                "‚úÖ –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.",
                reply_markup=self.main_keyboard
            )
            return

        await self._stop_current_mode()
        await asyncio.sleep(0.5)

        self.bot_mode = 'monitoring'
        self.bot_running = True
        bot_state_manager.set_last_mode('monitoring')

        try:
            await update.message.reply_text(
                "üöÄ <b>–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n"
                "üìä –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                "‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥",
                reply_markup=self.main_keyboard,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {type(e).__name__}")

        self.start_monitoring_loop()

    async def _handle_stop(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        await self._stop_current_mode()

        try:
            await update.message.reply_text(
                "üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>",
                reply_markup=self.main_keyboard,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {type(e).__name__}")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ, –Ω–æ —Å–æ–∫—Ä–∞—â–µ–Ω—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
    async def _handle_add_coin_start(self, update: Update):
        await self._stop_current_mode()
        await update.message.reply_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>BTC</code>):",
            reply_markup=self.back_keyboard, parse_mode=ParseMode.HTML
        )
        return self.ADDING_COIN

    async def _handle_remove_coin_start(self, update: Update):
        await self._stop_current_mode()
        if watchlist_manager.size() == 0:
            await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=self.main_keyboard)
            return ConversationHandler.END

        await update.message.reply_text(
            "‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=self.back_keyboard, parse_mode=ParseMode.HTML
        )
        return self.REMOVING_COIN

    async def _handle_show_list(self, update: Update):
        await self._stop_current_mode()
        coins = watchlist_manager.get_all()
        if not coins:
            text = "üìã <b>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</b>"
        else:
            text = f"üìã <b>–°–ø–∏—Å–æ–∫ ({len(coins)} –º–æ–Ω–µ—Ç):</b>\n\n"
            sorted_coins = sorted(coins)
            for i in range(0, len(sorted_coins), 5):
                batch = sorted_coins[i:i+5]
                text += " ‚Ä¢ ".join(batch) + "\n"

        await update.message.reply_text(text, reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML)

    async def _handle_settings(self, update: Update):
        await self._stop_current_mode()
        text = (
            "‚öô <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n\n"
            f"üìä –û–±—ä—ë–º: <code>${config_manager.get('VOLUME_THRESHOLD'):,}</code>\n"
            f"‚áÑ –°–ø—Ä–µ–¥: <code>{config_manager.get('SPREAD_THRESHOLD')}%</code>\n"
            f"üìà NATR: <code>{config_manager.get('NATR_THRESHOLD')}%</code>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:"
        )
        await update.message.reply_text(text, reply_markup=self.settings_keyboard, parse_mode=ParseMode.HTML)

    async def _handle_status(self, update: Update):
        status_parts = ["‚Ñπ <b>–°—Ç–∞—Ç—É—Å —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–≥–æ –±–æ—Ç–∞:</b>\n"]
        if self.bot_running:
            status_parts.append(f"üöÄ –†–∞–±–æ—Ç–∞–µ—Ç: <b>{self.bot_mode}</b>")
            if self.bot_mode == 'notification':
                status_parts.append(f"‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{len(self.active_coins)}</b>")
        else:
            status_parts.append("üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        status_parts.append(f"üìã –ú–æ–Ω–µ—Ç: <b>{watchlist_manager.size()}</b>")
        status_parts.append(f"üìä –û–±—ä—ë–º: ${config_manager.get('VOLUME_THRESHOLD'):,}")

        await update.message.reply_text(
            "\n".join(status_parts), reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML
        )

    async def _handle_back(self, update: Update):
        await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=self.main_keyboard)

    # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ handlers –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    async def _handle_volume_setting_start(self, update: Update):
        await self._stop_current_mode()
        current_value = config_manager.get('VOLUME_THRESHOLD')
        await update.message.reply_text(
            f"üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—ä—ë–º–∞</b>\n\n–¢–µ–∫—É—â–µ–µ: <code>${current_value:,}</code>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=self.back_keyboard, parse_mode=ParseMode.HTML
        )
        return self.SETTING_VOLUME

    async def _handle_spread_setting_start(self, update: Update):
        await self._stop_current_mode()
        current_value = config_manager.get('SPREAD_THRESHOLD')
        await update.message.reply_text(
            f"‚áÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø—Ä–µ–¥–∞</b>\n\n–¢–µ–∫—É—â–µ–µ: <code>{current_value}%</code>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=self.back_keyboard, parse_mode=ParseMode.HTML
        )
        return self.SETTING_SPREAD

    async def _handle_natr_setting_start(self, update: Update):
        await self._stop_current_mode()
        current_value = config_manager.get('NATR_THRESHOLD')
        await update.message.reply_text(
            f"üìà <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ NATR</b>\n\n–¢–µ–∫—É—â–µ–µ: <code>{current_value}%</code>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=self.back_keyboard, parse_mode=ParseMode.HTML
        )
        return self.SETTING_NATR

    async def _handle_alerts(self, update: Update):
        await self._stop_current_mode()
        await update.message.reply_text(
            "üö® <b>–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞</b>\n\n"
            "‚ö° –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ\n"
            "üéØ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö",
            reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML
        )

    async def _handle_reset_settings(self, update: Update):
        await self._stop_current_mode()
        config_manager.set('VOLUME_THRESHOLD', 1000)
        config_manager.set('SPREAD_THRESHOLD', 0.1)
        config_manager.set('NATR_THRESHOLD', 0.5)

        await update.message.reply_text(
            "üîÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã</b>\n\n"
            "üìä –û–±—ä—ë–º: $1,000\n‚áÑ –°–ø—Ä–µ–¥: 0.1%\nüìà NATR: 0.5%",
            reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML
        )

    # Handlers –¥–ª—è ConversationHandler
    async def add_coin_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_back(update)
            return ConversationHandler.END

        symbol = text.upper().replace("_USDT", "").replace("USDT", "")
        if not symbol or len(symbol) < 2:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª.", reply_markup=self.back_keyboard)
            return self.ADDING_COIN

        if watchlist_manager.contains(symbol):
            await update.message.reply_text(
                f"‚ö† <b>{symbol}</b> —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.",
                reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é...")
        try:
            coin_data = await optimized_api_client.get_optimized_coin_data(symbol)
            if coin_data:
                watchlist_manager.add(symbol)
                await update.message.reply_text(
                    f"‚úÖ <b>{symbol}_USDT</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞\n"
                    f"üí∞ ${coin_data['price']:.6f} | üìä ${coin_data['volume']:,.0f}",
                    reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    f"‚ùå <b>{symbol}_USDT</b> –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                    reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML
                )
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ <b>{symbol}</b>.",
                reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML
            )

        return ConversationHandler.END

    async def remove_coin_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_back(update)
            return ConversationHandler.END

        symbol = text.upper().replace("_USDT", "").replace("USDT", "")
        if watchlist_manager.remove(symbol):
            await update.message.reply_text(
                f"‚úÖ <b>{symbol}</b> —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                f"‚ùå <b>{symbol}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML
            )
        return ConversationHandler.END

    async def volume_setting_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):text = update.message.text.strip()
        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_settings(update)
            return ConversationHandler.END

        try:
            value = int(text)
            if value < 100:
                await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º—É–º $100.", reply_markup=self.back_keyboard)
                return self.SETTING_VOLUME

            config_manager.set('VOLUME_THRESHOLD', value)
            await update.message.reply_text(
                f"‚úÖ <b>–û–±—ä—ë–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> ${value:,}",
                reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML
            )
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=self.back_keyboard)
            return self.SETTING_VOLUME
        return ConversationHandler.END

    async def spread_setting_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_settings(update)
            return ConversationHandler.END

        try:
            value = float(text)
            if value < 0 or value > 10:
                await update.message.reply_text("‚ùå –û—Ç 0 –¥–æ 10%.", reply_markup=self.back_keyboard)
                return self.SETTING_SPREAD

            config_manager.set('SPREAD_THRESHOLD', value)
            await update.message.reply_text(
                f"‚úÖ <b>–°–ø—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {value}%",
                reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML
            )
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=self.back_keyboard)
            return self.SETTING_SPREAD
        return ConversationHandler.END

    async def natr_setting_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_settings(update)
            return ConversationHandler.END

        try:
            value = float(text)
            if value < 0 or value > 20:
                await update.message.reply_text("‚ùå –û—Ç 0 –¥–æ 20%.", reply_markup=self.back_keyboard)
                return self.SETTING_NATR

            config_manager.set('NATR_THRESHOLD', value)
            await update.message.reply_text(
                f"‚úÖ <b>NATR —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {value}%",
                reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML
            )
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=self.back_keyboard)
            return self.SETTING_NATR
        return ConversationHandler.END

    def setup_application(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        from telegram.error import Conflict, NetworkError, TimedOut

        builder = Application.builder()
        builder.token(self.token)
        builder.connection_pool_size(16)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        builder.pool_timeout(10.0)  # –£–º–µ–Ω—å—à–∏–ª–∏ timeout
        builder.read_timeout(15.0)
        builder.write_timeout(15.0)

        async def error_handler(update, context):
            error = context.error
            error_str = str(error).lower()

            if any(phrase in error_str for phrase in [
                "event loop", "different event loop", "asyncio.locks.event",
                "is bound to a different event loop", "unknown error in http implementation"
            ]):
                return

            if isinstance(error, Conflict):
                bot_logger.warning("–ö–æ–Ω—Ñ–ª–∏–∫—Ç Telegram API")
                await asyncio.sleep(2)
                return
            elif isinstance(error, (NetworkError, TimedOut)):
                bot_logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {error}")
                await asyncio.sleep(1)
                return
            else:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {error}", exc_info=True)

        self.app = builder.build()
        self.app.add_error_handler(error_handler)

        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, self.button_handler)],
            states={
                self.ADDING_COIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.add_coin_handler)],
                self.REMOVING_COIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.remove_coin_handler)],
                self.SETTING_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.volume_setting_handler)],
                self.SETTING_SPREAD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.spread_setting_handler)],
                self.SETTING_NATR: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.natr_setting_handler)]
            },
            fallbacks=[
                CommandHandler("start", self.start_handler),
                MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥$"), self._handle_back)
            ],
            per_message=False
        )

        self.app.add_handler(CommandHandler("start", self.start_handler))
        self.app.add_handler(conv_handler)

        return self.app

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = TradingTelegramBot()