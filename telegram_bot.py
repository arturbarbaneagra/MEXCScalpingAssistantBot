import asyncio
import time
from typing import Dict, Optional, List, Any
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode
from logger import bot_logger
from config import config_manager
from api_client import api_client
from watchlist_manager import watchlist_manager
from bot_state import bot_state_manager
from advanced_alerts import advanced_alert_manager, AlertType, AlertSeverity
from notification_mode import NotificationMode
from monitoring_mode import MonitoringMode
from input_validator import input_validator
from user_manager import user_manager
from user_session_recorder import UserSessionRecorder
from admin_handlers import create_admin_handlers
from user_modes_manager import UserModesManager
import os

class TradingTelegramBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')

        if not self.token or not self.chat_id:
            raise ValueError("TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        self.app = None
        self.bot_running = False
        self.bot_mode = None
        self.last_message_time = 0
        self.message_cache = {}
        self._message_queue = asyncio.Queue()
        self._queue_processor_task = None

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self._operation_lock = asyncio.Lock()
        self._switching_mode = False
        self._last_operation_time = 0

        # –ú–æ–¥—É–ª–∏ —Ä–µ–∂–∏–º–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞ - –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        self.notification_mode = NotificationMode(self)
        self.monitoring_mode = MonitoringMode(self)

        # –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_modes_manager = UserModesManager(self)

        # –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥—É–ª–∏
        self.admin_handlers = create_admin_handlers(self)
        self.user_session_recorders: Dict[str, UserSessionRecorder] = {}

        # –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
        self.ADDING_COIN, self.REMOVING_COIN = range(2)
        self.SETTING_VOLUME, self.SETTING_SPREAD, self.SETTING_NATR = range(2, 5)

        self._setup_keyboards()

    @property
    def active_coins(self):
        """–°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º health check"""
        # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
        admin_mode = self.user_modes_manager.get_user_mode(self.chat_id)
        if admin_mode == 'notification':
            admin_stats = self.user_modes_manager.get_user_stats(self.chat_id)
            mode_stats = admin_stats.get('modes', {}).get('notification', {})
            active_coins = mode_stats.get('active_coins', [])
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç {symbol: {}} –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            return {coin: {'active': True} for coin in active_coins}
        elif self.bot_mode == 'notification':
            return self.notification_mode.active_coins
        return {}

    def get_user_keyboard(self, chat_id: str) -> ReplyKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_manager.is_admin(chat_id):
            return self.admin_keyboard
        else:
            return self.user_keyboard

    def get_user_session_recorder(self, chat_id: str) -> UserSessionRecorder:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ä–µ–∫–æ—Ä–¥–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id_str = str(chat_id)
        if chat_id_str not in self.user_session_recorders:
            self.user_session_recorders[chat_id_str] = UserSessionRecorder(chat_id_str)
        return self.user_session_recorders[chat_id_str]

    def get_user_watchlist(self, chat_id: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_manager.is_admin(chat_id):
            # –î–ª—è –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            return watchlist_manager.get_all()
        else:
            # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
            return user_manager.get_user_watchlist(chat_id)

    def get_user_config(self, chat_id: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_manager.is_admin(chat_id):
            # –î–ª—è –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            return {
                'VOLUME_THRESHOLD': config_manager.get('VOLUME_THRESHOLD'),
                'SPREAD_THRESHOLD': config_manager.get('SPREAD_THRESHOLD'),
                'NATR_THRESHOLD': config_manager.get('NATR_THRESHOLD')
            }
        else:
            # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –ª–∏—á–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            return user_manager.get_user_config(chat_id)

    def _setup_keyboards(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.admin_keyboard = ReplyKeyboardMarkup([
            ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ûñ –£–¥–∞–ª–∏—Ç—å"],
            ["üìã –°–ø–∏—Å–æ–∫", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
            ["üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á", "‚Ñπ –°—Ç–∞—Ç—É—Å"],
            ["üë• –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", "üìã –õ–æ–≥–∏"],
            ["üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "üõë –°—Ç–æ–ø", "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"]
        ], resize_keyboard=True, one_time_keyboard=False)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_keyboard = ReplyKeyboardMarkup([
            ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ûñ –£–¥–∞–ª–∏—Ç—å"],
            ["üìã –°–ø–∏—Å–æ–∫", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
            ["üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á", "‚Ñπ –°—Ç–∞—Ç—É—Å"],
            ["üõë –°—Ç–æ–ø"]
        ], resize_keyboard=True, one_time_keyboard=False)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.main_keyboard = self.admin_keyboard

        self.settings_keyboard = ReplyKeyboardMarkup([
            ["üìä –û–±—ä—ë–º", "‚áÑ –°–ø—Ä–µ–¥"],
            ["üìà NATR", "üîÑ –°–±—Ä–æ—Å"],
            ["üîô –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)

        self.back_keyboard = ReplyKeyboardMarkup([
            ["üîô –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)

    async def _start_message_queue_processor(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –≤ —Ç–µ–∫—É—â–µ–º event loop
            try:
                current_loop = asyncio.get_running_loop()
                if self._message_queue is not None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ event loop
                    try:
                        self._message_queue.qsize()  # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                    except RuntimeError:
                        # –û—á–µ—Ä–µ–¥—å –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –¥—Ä—É–≥–æ–º—É loop
                        self._message_queue = None

                if self._message_queue is None:
                    self._message_queue = asyncio.Queue()
                    bot_logger.debug("üîÑ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π")

            except Exception as e:
                bot_logger.debug(f"–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
                self._message_queue = asyncio.Queue()

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if self._queue_processor_task and not self._queue_processor_task.done():
                self._queue_processor_task.cancel()
                try:
                    await self._queue_processor_task
                except asyncio.CancelledError:
                    pass

            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            self._queue_processor_task = asyncio.create_task(self._process_message_queue())
            bot_logger.debug("üîÑ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")

    async def _process_message_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
        consecutive_errors = 0
        max_consecutive_errors = 5

        while self.bot_running and consecutive_errors < max_consecutive_errors:
            try:
                if self._message_queue is None:
                    await asyncio.sleep(1.0)
                    continue

                # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    message_data = await asyncio.wait_for(
                        self._message_queue.get(), 
                        timeout=2.0
                    )
                    consecutive_errors = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ

                    await self._execute_telegram_message(message_data)
                    await asyncio.sleep(0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

                except asyncio.TimeoutError:
                    consecutive_errors = 0  # –¢–∞–π–º–∞—É—Ç –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π
                    continue
                except RuntimeError as e:
                    if "different event loop" in str(e):
                        bot_logger.warning("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –∏–∑-–∑–∞ —Å–º–µ–Ω—ã event loop")
                        self._message_queue = asyncio.Queue()
                        consecutive_errors = 0
                        continue
                    else:
                        raise

            except Exception as e:
                consecutive_errors += 1
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ({consecutive_errors}/{max_consecutive_errors}): {e}")
                await asyncio.sleep(min(0.5 * consecutive_errors, 3.0))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

        if consecutive_errors >= max_consecutive_errors:
            bot_logger.error("üö® –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
            self._queue_processor_task = None

    async def _execute_telegram_message(self, message_data: Dict):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É Telegram —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            action = message_data['action']

            if action == 'send':
                response = await self._direct_telegram_send(
                    message_data['text'],
                    message_data.get('reply_markup'),
                    message_data.get('parse_mode', ParseMode.HTML)
                )

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ callback –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'callback' in message_data:
                    message_data['callback'](response)

            elif action == 'edit':
                await self._direct_telegram_edit(
                    message_data['message_id'],
                    message_data['text'],
                    message_data.get('reply_markup')
                )

            elif action == 'delete':
                await self._direct_telegram_delete(message_data['message_id'])

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Telegram –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")

    async def _direct_telegram_send(self, text: str, reply_markup=None, parse_mode=ParseMode.HTML):
        """–ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram API"""
        if not self.app or not self.app.bot:
            return None

        try:
            current_time = time.time()
            if current_time - self.last_message_time < 0.5:
                await asyncio.sleep(0.5 - (current_time - self.last_message_time))

            message = await self.app.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )

            self.last_message_time = time.time()

            if message and hasattr(message, 'message_id'):
                return message.message_id
            return None

        except Exception as e:
            bot_logger.debug(f"–ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {type(e).__name__}")
            return None

    async def _direct_telegram_edit(self, message_id: int, text: str, reply_markup=None):
        """–ü—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API"""
        if not self.app or not self.app.bot:
            return

        try:
            await self.app.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            if "message is not modified" not in str(e).lower():
                bot_logger.debug(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –Ω–µ —É–¥–∞–ª–æ—Å—å: {type(e).__name__}")

    async def _direct_telegram_delete(self, message_id: int):
        """–ü—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API"""
        if not self.app or not self.app.bot:
            return

        try:
            await self.app.bot.delete_message(chat_id=self.chat_id, message_id=message_id)
            if message_id in self.message_cache:
                del self.message_cache[message_id]
        except Exception as e:
            bot_logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –Ω–µ —É–¥–∞–ª–æ—Å—å: {type(e).__name__}")

    async def send_message(self, text: str, reply_markup=None, parse_mode=ParseMode.HTML) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å —Å callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if not self.bot_running:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—á–µ—Ä–µ–¥–∏
        if self._message_queue is None:
            bot_logger.warning("–û—á–µ—Ä–µ–¥—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
            return await self._direct_telegram_send(text, reply_markup, parse_mode)

        # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_future = asyncio.Future()

        def callback(result):
            if not result_future.done():
                result_future.set_result(result)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        message_data = {
            'action': 'send',
            'text': text,
            'reply_markup': reply_markup,
            'parse_mode': parse_mode,
            'callback': callback
        }

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
            try:
                await self._message_queue.put(message_data)
            except RuntimeError as e:
                if "different event loop" in str(e):
                    bot_logger.warning("Event loop –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
                    return await self._direct_telegram_send(text, reply_markup, parse_mode)
                else:
                    raise

            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            result = await asyncio.wait_for(result_future, timeout=10.0)

            if result:
                bot_logger.info(f"[SEND_MESSAGE_SUCCESS] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, msg_id: {result}")
            return result

        except asyncio.TimeoutError:
            bot_logger.error("[SEND_MESSAGE_TIMEOUT] –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return None
        except Exception as e:
            bot_logger.error(f"[SEND_MESSAGE_ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            # Fallback –Ω–∞ –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            return await self._direct_telegram_send(text, reply_markup, parse_mode)

    async def edit_message(self, message_id: int, text: str, reply_markup=None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"""
        if not self.bot_running:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–µ—à–µ
        cached_message = self.message_cache.get(message_id)
        if cached_message == text:
            return

        message_data = {
            'action': 'edit',
            'message_id': message_id,
            'text': text,
            'reply_markup': reply_markup
        }

        try:
            await self._message_queue.put(message_data)
            self.message_cache[message_id] = text
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è edit –≤ –æ—á–µ—Ä–µ–¥—å: {e}")

    async def delete_message(self, message_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"""
        if not message_id or not isinstance(message_id, int) or message_id <= 0:
            return False

        if not self.bot_running:
            return False

        message_data = {
            'action': 'delete',
            'message_id': message_id
        }

        try:
            await self._message_queue.put(message_data)
            return True
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è delete –≤ –æ—á–µ—Ä–µ–¥—å: {e}")

    def _chunks(self, lst: List, size: int):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞–Ω–∫–∏"""
        for i in range(0, len(lst), size):
            yield lst[i:i + size]

    async def _stop_current_mode(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        async with self._operation_lock:
            if self._switching_mode:
                bot_logger.debug("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return

            if not self.bot_mode:
                return

            self._switching_mode = True

            try:
                bot_logger.info(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º: {self.bot_mode}")

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å
                try:
                    if self.bot_mode == 'notification':
                        await asyncio.wait_for(self.notification_mode.stop(), timeout=5.0)
                    elif self.bot_mode == 'monitoring':
                        await asyncio.wait_for(self.monitoring_mode.stop(), timeout=5.0)
                except asyncio.TimeoutError:
                    bot_logger.warning("–¢–∞–π–º–∞—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º")
                except Exception as e:
                    bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞: {e}")

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏
                if self._queue_processor_task and not self._queue_processor_task.done():
                    self._queue_processor_task.cancel()
                    try:
                        await asyncio.wait_for(self._queue_processor_task, timeout=1.0)
                    except (asyncio.CancelledError, asyncio.TimeoutError):
                        pass
                    self._queue_processor_task = None

                # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ
                try:
                    if self._message_queue:
                        queue_size = 0
                        while not self._message_queue.empty() and queue_size < 100:
                            try:
                                self._message_queue.get_nowait()
                                queue_size += 1
                            except asyncio.QueueEmpty:
                                break

                        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                        self._message_queue = asyncio.Queue()

                except Exception as e:
                    bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                    self._message_queue = asyncio.Queue()

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.bot_running = False
                self.bot_mode = None
                self.message_cache.clear()
                bot_state_manager.set_last_mode(None)

                # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
                await asyncio.sleep(0.3)

                bot_logger.info("‚úÖ –†–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            finally:
                self._switching_mode = False



    # Telegram Handlers
    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = update.effective_chat.id
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_manager.is_admin(chat_id):
            await self._handle_admin_start(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–¥–æ–±—Ä–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_manager.is_user_approved(chat_id):
            return await self._handle_approved_user_start(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_manager.is_user_pending(chat_id):
            await update.message.reply_text(
                "‚è≥ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        user_info = {
            'username': user.username or 'no_username',
            'first_name': user.first_name or 'Unknown',
            'last_name': user.last_name or ''
        }

        if user_manager.add_pending_request(chat_id, user_info):
            await update.message.reply_text(
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MEXCScalping Assistant!</b>\n\n"
                "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                "‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è</b>\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É.\n\n"
                "üí° –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode=ParseMode.HTML
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
            try:
                await self.app.bot.send_message(
                    chat_id=user_manager.admin_chat_id,
                    text=(
                        f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!</b>\n\n"
                        f"üë§ <b>{user_info['first_name']}</b>\n"
                        f"‚Ä¢ Username: @{user_info['username']}\n"
                        f"‚Ä¢ ID: <code>{chat_id}</code>\n\n"
                        f"–ù–∞–∂–º–∏—Ç–µ 'üë• –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                    ),
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ: {e}")

        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.HTML
            )

    async def _handle_admin_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        last_mode = bot_state_manager.get_last_mode()

        welcome_text = (
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n\n"
            "üìä <b>–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</b>\n"
            "‚Ä¢ üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö\n"
            "‚Ä¢ üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b> - –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞\n\n"
            "üë• <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ üë• –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ üìã –õ–æ–≥–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤\n"
            "‚Ä¢ üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
        )

        # –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if last_mode and not self.bot_running:
            welcome_text += f"üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–µ–∂–∏–º {last_mode}...</b>\n\n"
            await update.message.reply_text(welcome_text + "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.admin_keyboard, parse_mode=ParseMode.HTML)

            self.bot_mode = last_mode
            self.bot_running = True

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏
            await self._start_message_queue_processor()

            if last_mode == 'notification':
                await self.notification_mode.start()
                await self.send_message(
                    "‚úÖ <b>–†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n"
                    "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö."
                )
            elif last_mode == 'monitoring':
                await self.monitoring_mode.start()
                await self.send_message(
                    "‚úÖ <b>–†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n"
                    "–°–≤–æ–¥–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                )
            return

        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await update.message.reply_text(welcome_text, reply_markup=self.admin_keyboard, parse_mode=ParseMode.HTML)

    async def _handle_approved_user_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = update.effective_chat.id
        user_watchlist = user_manager.get_user_watchlist(chat_id)

        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        welcome_text = (
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MEXCScalping Assistant!</b>\n\n"
            "üìä <b>–í–∞—à–∏ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</b>\n"
            "‚Ä¢ üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n"
            "‚Ä¢ üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –º–æ–Ω–µ—Ç\n\n"
            "‚öô <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
            "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫\n"
            "‚Ä¢ ‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
            "‚Ä¢ üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã\n"
            "‚Ä¢ ‚öô –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
        )

        # –ï—Å–ª–∏ –Ω–µ—Ç –º–æ–Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if not user_watchlist:
            welcome_text += (
                "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –£ –≤–∞—Å –Ω–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!\n"
                "–ù–∞–∂–º–∏—Ç–µ ‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å</b> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É.\n\n"
            )
        else:
            welcome_text += f"üìã <b>–í–∞—à–∏ –º–æ–Ω–µ—Ç—ã:</b> {len(user_watchlist)} —à—Ç.\n\n"

        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        await update.message.reply_text(
            welcome_text, 
            reply_markup=self.user_keyboard, 
            parse_mode=ParseMode.HTML
        )
        
        # –û—Ç–º–µ—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_manager.mark_setup_completed(chat_id)
        user_manager.update_user_data(chat_id, {'setup_state': 'completed'})
        return ConversationHandler.END

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç spam"""
        text = update.message.text
        chat_id = update.effective_chat.id
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user_manager.is_admin(chat_id) and not user_manager.is_user_approved(chat_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if user_manager.is_user_approved(chat_id) and not user_manager.is_setup_completed(chat_id):
            user_data = user_manager.get_user_data(chat_id)
            setup_state = user_data.get('setup_state', '') if user_data else ''

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –º–æ–Ω–µ—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
            if setup_state == 'initial_coin_setup':
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –º–æ–Ω–µ—Ç—É
                if not text.startswith('/') and text not in ['üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', '‚ûï –î–æ–±–∞–≤–∏—Ç—å', '‚ûñ –£–¥–∞–ª–∏—Ç—å', 
                                                           'üìã –°–ø–∏—Å–æ–∫', '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á', '‚Ñπ –°—Ç–∞—Ç—É—Å', 'üõë –°—Ç–æ–ø']:
                    return await self._handle_initial_coin_input(update, text)
                else:
                    await update.message.reply_text(
                        "üí° <b>–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–µ—Ç—É!</b>\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫.\n\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, ADA, SOL",
                        parse_mode=ParseMode.HTML
                    )
                    return ConversationHandler.END
            elif setup_state.startswith('setting_filters'):
                return await self._handle_initial_filter_input(update, text)
            elif setup_state == 'coin_added_waiting_choice':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –º–æ–Ω–µ—Ç—É –∏ –∂–¥–µ—Ç –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
                await update.message.reply_text(
                    "üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n"
                    "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–æ–Ω–µ—Ç—É\n"
                    "‚Ä¢ ‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    parse_mode=ParseMode.HTML
                )
                return ConversationHandler.END

        # –ó–∞—â–∏—Ç–∞ –æ—Ç spam –Ω–∞–∂–∞—Ç–∏–π (–º–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏)
        if current_time - self._last_operation_time < 1.0:
            bot_logger.debug("–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–µ –Ω–∞–∂–∞—Ç–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return ConversationHandler.END

        self._last_operation_time = current_time
        user_keyboard = self.get_user_keyboard(chat_id)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –º–æ–Ω–µ—Ç (–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        if (user_manager.is_user_approved(chat_id) and 
            user_manager.is_setup_completed(chat_id) and 
            not user_manager.get_user_watchlist(chat_id) and
            text not in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚Ñπ –°—Ç–∞—Ç—É—Å", "üõë –°—Ç–æ–ø"]):
            
            await update.message.reply_text(
                "‚ö†Ô∏è <b>–£ –≤–∞—Å –Ω–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ ‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å</b> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã.",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
            if self._switching_mode:
                await update.message.reply_text(
                    "‚è≥ –ò–¥–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                    reply_markup=user_keyboard
                )
                return ConversationHandler.END

            message_text = update.message.text

            # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if message_text == "üë• –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫":
                await self.admin_handlers.handle_pending_requests(update, context)
            elif message_text == "üìã –õ–æ–≥–∏":
                await self.admin_handlers.handle_logs_request(update, context)
            elif message_text == "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏":
                await self.admin_handlers.handle_user_management(update, context)
            elif message_text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
                await self.admin_handlers.handle_clear_all_users(update, context)
                return ConversationHandler.END  # –î–æ–±–∞–≤–ª—è–µ–º return —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—â–∏—Ö –∫–Ω–æ–ø–æ–∫

            # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            elif text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
                await self._handle_notification_mode(update)
            elif text == "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
                await self._handle_monitoring_mode(update)
            elif text == "üõë –°—Ç–æ–ø":
                await self._handle_stop(update)
            elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
                return await self._handle_add_coin_start(update)
            elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å":
                return await self._handle_remove_coin_start(update)
            elif text == "üìã –°–ø–∏—Å–æ–∫":
                await self._handle_show_list(update)
            elif text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                await self._handle_settings(update)
            elif text == "üìä –û–±—ä—ë–º":
                return await self._handle_volume_setting_start(update)
            elif text == "‚áÑ –°–ø—Ä–µ–¥":
                return await self._handle_spread_setting_start(update)
            elif text == "üìà NATR":
                return await self._handle_natr_setting_start(update)
            elif text == "üîÑ –°–±—Ä–æ—Å":
                await self._handle_reset_settings(update)
            elif text == "üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á":
                await self._handle_activity_24h(update)
            elif text == "‚Ñπ –°—Ç–∞—Ç—É—Å":
                await self._handle_status(update)
            elif text == "üîô –ù–∞–∑–∞–¥":
                await self._handle_back(update)
            else:
                await update.message.reply_text(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                    reply_markup=user_keyboard
                )
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}", exc_info=True)
            try:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                    reply_markup=user_keyboard
                )
            except Exception as reply_error:
                bot_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {reply_error}")

        return ConversationHandler.END

    async def _handle_notification_mode(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_watchlist = self.get_user_watchlist(chat_id)
        if not user_watchlist:
            await update.message.reply_text(
                "‚ö†Ô∏è <b>–ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!</b>\n\n"
                "–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ ‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å</b> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã.",
                reply_markup=user_keyboard,
                parse_mode="HTML"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_mode = self.user_modes_manager.get_user_mode(chat_id)
        if current_mode == 'notification':
            await update.message.reply_text(
                "‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=user_keyboard
            )
            return

        # –î–ª—è –∞–¥–º–∏–Ω–∞ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        if user_manager.is_admin(chat_id):
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await self._stop_current_mode()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        success = await self.user_modes_manager.start_user_mode(chat_id, 'notification')

        if success:
            await update.message.reply_text(
                "‚úÖ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n"
                "üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.",
                reply_markup=user_keyboard,
                parse_mode="HTML"
            )
            bot_logger.info(f"üîî –†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=user_keyboard
            )

    async def _handle_monitoring_mode(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_watchlist = self.get_user_watchlist(chat_id)
        if not user_watchlist:
            await update.message.reply_text(
                "‚ö†Ô∏è <b>–ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!</b>\n\n"
                "–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ ‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å</b> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã.",
                reply_markup=user_keyboard,
                parse_mode="HTML"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_mode = self.user_modes_manager.get_user_mode(chat_id)
        if current_mode == 'monitoring':
            await update.message.reply_text(
                "‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
                reply_markup=user_keyboard
            )
            return

        # –î–ª—è –∞–¥–º–∏–Ω–∞ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        if user_manager.is_admin(chat_id):
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await self._stop_current_mode()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        success = await self.user_modes_manager.start_user_mode(chat_id, 'monitoring')

        if success:
            await update.message.reply_text(
                "‚úÖ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n"
                "üìä –°–≤–æ–¥–∫–∞ –ø–æ –≤–∞—à–∏–º –º–æ–Ω–µ—Ç–∞–º –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                reply_markup=user_keyboard,
                parse_mode="HTML"
            )
            bot_logger.info(f"üìä –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=user_keyboard
            )

    async def _handle_stop(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stopped = await self.user_modes_manager.stop_user_mode(chat_id)

        # –î–ª—è –∞–¥–º–∏–Ω–∞ —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_manager.is_admin(chat_id):
            await self._stop_current_mode()

        if stopped or (user_manager.is_admin(chat_id) and self.bot_running):
            await update.message.reply_text(
                "üõë <b>–í–∞—à–∏ —Ä–µ–∂–∏–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</b>",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤.",
                reply_markup=user_keyboard
            )

    async def _handle_add_coin_start(self, update: Update):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
        chat_id = update.effective_chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user_manager.is_admin(chat_id) and not user_manager.is_user_approved(chat_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        await update.message.reply_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>BTC</code> –∏–ª–∏ <code>BTC_USDT</code>):",
            reply_markup=self.back_keyboard,
            parse_mode=ParseMode.HTML
        )
        return self.ADDING_COIN

    async def _handle_remove_coin_start(self, update: Update):
        """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not user_manager.is_admin(chat_id) and not user_manager.is_user_approved(chat_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_manager.is_admin(chat_id):
            coins = watchlist_manager.get_all()
            list_title = "–∞–¥–º–∏–Ω—Å–∫–∏–π —Å–ø–∏—Å–æ–∫"
        else:
            coins = user_manager.get_user_watchlist(chat_id)
            list_title = "–≤–∞—à —Å–ø–∏—Å–æ–∫"

        if len(coins) == 0:
            await update.message.reply_text(
                f"‚ùå {list_title.capitalize()} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç.",
                reply_markup=user_keyboard
            )
            return ConversationHandler.END

        coins_list = ", ".join(sorted(coins)[:10])
        if len(coins) > 10:
            coins_list += "..."

        await update.message.reply_text(
            f"‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π {list_title}: {coins_list}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=self.back_keyboard,
            parse_mode=ParseMode.HTML
        )
        return self.REMOVING_COIN

    async def _handle_volume_setting_start(self, update: Update):
        """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä—ë–º–∞"""
        chat_id = update.effective_chat.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_manager.is_admin(chat_id):
            current_value = config_manager.get('VOLUME_THRESHOLD')
        else:
            user_config = user_manager.get_user_config(chat_id)
            current_value = user_config.get('VOLUME_THRESHOLD', 1000)

        await update.message.reply_text(
            f"üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—ë–º–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>${current_value:,}</code>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):",
            reply_markup=self.back_keyboard,
            parse_mode=ParseMode.HTML
        )
        return self.SETTING_VOLUME

    async def _handle_spread_setting_start(self, update: Update):
        """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø—Ä–µ–¥–∞"""
        chat_id = update.effective_chat.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_manager.is_admin(chat_id):
            current_value = config_manager.get('SPREAD_THRESHOLD')
        else:
            user_config = user_manager.get_user_config(chat_id)
            current_value = user_config.get('SPREAD_THRESHOLD', 0.1)

        await update.message.reply_text(
            f"‚áÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{current_value}%</code>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.2):",
            reply_markup=self.back_keyboard,
            parse_mode=ParseMode.HTML
        )
        return self.SETTING_SPREAD

    async def _handle_natr_setting_start(self, update: Update):
        """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NATR"""
        chat_id = update.effective_chat.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_manager.is_admin(chat_id):
            current_value = config_manager.get('NATR_THRESHOLD')
        else:
            user_config = user_manager.get_user_config(chat_id)
            current_value = user_config.get('NATR_THRESHOLD', 0.5)

        await update.message.reply_text(
            f"üìà <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ NATR</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{current_value}%</code>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.8):",
            reply_markup=self.back_keyboard,
            parse_mode=ParseMode.HTML
        )
        return self.SETTING_NATR

    async def _handle_show_list(self, update: Update):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_manager.is_admin(chat_id):
            coins = watchlist_manager.get_all()
            list_title = "üìã <b>–ê–¥–º–∏–Ω—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
        else:
            coins = user_manager.get_user_watchlist(chat_id)
            list_title = "üìã <b>–í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"

        if not coins:
            text = f"{list_title} –ø—É—Å—Ç</b>"
        else:
            sorted_coins = sorted(coins)
            text = f"{list_title} ({len(coins)} –º–æ–Ω–µ—Ç):</b>\n\n"

            for i in range(0, len(sorted_coins), 5):
                batch = sorted_coins[i:i+5]
                text += " ‚Ä¢ ".join(batch) + "\n"

        await update.message.reply_text(text, reply_markup=user_keyboard, parse_mode=ParseMode.HTML)

    async def _handle_settings(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        chat_id = update.effective_chat.id

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_manager.is_admin(chat_id):
            volume_threshold = config_manager.get('VOLUME_THRESHOLD')
            spread_threshold = config_manager.get('SPREAD_THRESHOLD')
            natr_threshold = config_manager.get('NATR_THRESHOLD')
            settings_title = "‚öô <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∞–¥–º–∏–Ω):</b>\n\n"
        else:
            user_config = user_manager.get_user_config(chat_id)
            volume_threshold = user_config.get('VOLUME_THRESHOLD', 1000)
            spread_threshold = user_config.get('SPREAD_THRESHOLD', 0.1)
            natr_threshold = user_config.get('NATR_THRESHOLD', 0.5)
            settings_title = "‚öô <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n\n"

        current_settings = (
            settings_title +
            f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º: <code>${volume_threshold:,}</code>\n"
            f"‚áÑ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: <code>{spread_threshold}%</code>\n"
            f"üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π NATR: <code>{natr_threshold}%</code>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )

        await update.message.reply_text(
            current_settings,
            reply_markup=self.settings_keyboard,
            parse_mode=ParseMode.HTML
        )

    async def _handle_status(self, update: Update):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        status_parts = ["‚Ñπ <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b>\n"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_mode = self.user_modes_manager.get_user_mode(chat_id)
        user_stats = self.user_modes_manager.get_user_stats(chat_id)

        if current_mode:
            status_parts.append(f"üü¢ –í–∞—à —Ä–µ–∂–∏–º: <b>{current_mode}</b>")

            mode_stats = user_stats.get('modes', {}).get(current_mode, {})

            if current_mode == 'notification':
                active_count = mode_stats.get('active_coins_count', 0)
                status_parts.append(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç: <b>{active_count}</b>")
                if mode_stats.get('active_coins'):
                    coins_list = ', '.join(mode_stats['active_coins'][:5])
                    status_parts.append(f"‚Ä¢ –ú–æ–Ω–µ—Ç—ã: {coins_list}")

            elif current_mode == 'monitoring':
                watchlist_size = mode_stats.get('watchlist_size', 0)
                status_parts.append(f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: <b>{watchlist_size}</b> –º–æ–Ω–µ—Ç")
        else:
            status_parts.append("üî¥ –†–µ–∂–∏–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_manager.is_admin(chat_id):
            status_parts.append(f"\nüìã –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫: <b>{watchlist_manager.size()}</b> –º–æ–Ω–µ—Ç")
            user_config = config_manager.get_all()
        else:
            user_watchlist = user_manager.get_user_watchlist(chat_id)
            status_parts.append(f"\nüìã –í–∞—à–∏—Ö –º–æ–Ω–µ—Ç: <b>{len(user_watchlist)}</b>")
            user_config = user_manager.get_user_config(chat_id)

        status_parts.append("\n‚öô <b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:</b>")
        status_parts.append(f"‚Ä¢ –û–±—ä—ë–º: ${user_config.get('VOLUME_THRESHOLD', 1000):,}")
        status_parts.append(f"‚Ä¢ –°–ø—Ä–µ–¥: {user_config.get('SPREAD_THRESHOLD', 0.1)}%")
        status_parts.append(f"‚Ä¢ NATR: {user_config.get('NATR_THRESHOLD', 0.5)}%")

        await update.message.reply_text(
            "\n".join(status_parts),
            reply_markup=user_keyboard,
            parse_mode=ParseMode.HTML
        )

    async def _handle_reset_settings(self, update: Update):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_manager.is_admin(chat_id):
            config_manager.set('VOLUME_THRESHOLD', 1000)
            config_manager.set('SPREAD_THRESHOLD', 0.1)
            config_manager.set('NATR_THRESHOLD', 0.5)
            settings_title = "üîÑ <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\n\n"
        else:
            user_manager.update_user_config(chat_id, 'VOLUME_THRESHOLD', 1000)
            user_manager.update_user_config(chat_id, 'SPREAD_THRESHOLD', 0.1)
            user_manager.update_user_config(chat_id, 'NATR_THRESHOLD', 0.5)
            settings_title = "üîÑ <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\n\n"

        reset_message = (
            settings_title +
            f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º: <code>$1,000</code>\n"
            f"‚áÑ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: <code>0.1%</code>\n"
            f"üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π NATR: <code>0.5%</code>"
        )

        await update.message.reply_text(
            reset_message,
            reply_markup=user_keyboard,
            parse_mode=ParseMode.HTML
        )

    async def _handle_activity_24h(self, update: Update):
        """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        try:
            from datetime import datetime, timedelta
            import json
            import os

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞)
            today = datetime.now().strftime('%Y-%m-%d')
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')

            # –í—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            cutoff_time = time.time() - 24 * 3600

            all_sessions = []
            total_sessions = 0
            total_duration = 0
            total_volume = 0
            total_trades = 0
            unique_coins = set()

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞
            for date in [today, yesterday]:
                filename = f"sessions_{date}.json"
                filepath = os.path.join("session_data", filename)

                if os.path.exists(filepath):
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            daily_data = json.load(f)

                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
                        for session in daily_data.get('sessions', []):
                            start_time = session.get('start_time', 0)
                            if start_time >= cutoff_time:
                                all_sessions.append(session)
                                total_sessions += 1
                                total_duration += session.get('total_duration', 0)
                                summary = session.get('summary', {})
                                total_volume += summary.get('total_volume', 0)
                                total_trades += summary.get('total_trades', 0)
                                unique_coins.add(session.get('symbol', ''))

                    except Exception as e:
                        bot_logger.debug(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}: {e}")

            if not all_sessions:
                await update.message.reply_text(
                    "üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</b>\n\n"
                    "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.",
                    parse_mode=ParseMode.HTML,
                    reply_markup=self.main_keyboard
                )
                return

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            all_sessions.sort(key=lambda x: x.get('start_time', 0), reverse=True)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_parts = [
                "üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</b>\n"
            ]

            # –¢–æ–ø-5 –º–æ–Ω–µ—Ç –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            coin_durations = {}
            for session in all_sessions:
                symbol = session.get('symbol', '')
                duration = session.get('total_duration', 0)
                if symbol in coin_durations:
                    coin_durations[symbol] += duration
                else:
                    coin_durations[symbol] = duration

            top_coins = sorted(coin_durations.items(), key=lambda x: x[1], reverse=True)[:5]

            if top_coins:
                report_parts.append("üèÜ <b>–¢–æ–ø-5 –º–æ–Ω–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>")
                for i, (symbol, duration) in enumerate(top_coins, 1):
                    report_parts.append(f"{i}. <b>{symbol}</b> - {duration/60:.1f} –º–∏–Ω")
                report_parts.append("")

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º —Å —É—Ä–æ–≤–Ω–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è UTC+3)
            recent_sessions = all_sessions[:40]  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if recent_sessions:
                from activity_level_calculator import activity_calculator

                report_parts.append("üïê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ —á–∞—Å–∞–º:</b>")

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º
                sessions_by_hour = {}
                for session in recent_sessions:
                    start_time = session.get('start_time', 0)
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
                    moscow_time = datetime.fromtimestamp(start_time) + timedelta(hours=3)
                    hour_key = moscow_time.strftime('%H:00')

                    if hour_key not in sessions_by_hour:
                        sessions_by_hour[hour_key] = []
                    sessions_by_hour[hour_key].append(session)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
            now_moscow = datetime.now() + timedelta(hours=3)
            hours_to_show = []

            for i in range(24):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                hour_dt = now_moscow - timedelta(hours=i)
                hour_str = hour_dt.strftime('%H:00')
                hour_key_stats = hour_dt.strftime("%Y-%m-%d_%H")

                # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Å–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                hour_sessions = sessions_by_hour.get(hour_str, [])

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —á–∞—Å
                total_activity = activity_calculator.calculate_hourly_activity(hour_sessions, None)

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ë–ï–ó –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
                activity_info = activity_calculator.get_activity_level_info(total_activity)

                hours_to_show.append({
                    'hour': hour_str,
                    'hour_dt': hour_dt,
                    'sessions': hour_sessions,
                    'activity': total_activity,
                    'activity_info': activity_info
                })

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞) –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï 24 —á–∞—Å–∞
            hours_to_show.sort(key=lambda x: x['hour_dt'], reverse=True)

            for hour_data in hours_to_show:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ 24 —á–∞—Å–∞
                hour = hour_data['hour']
                hour_sessions = hour_data['sessions']
                total_activity = hour_data['activity']
                activity_info = hour_data['activity_info']

                report_parts.append(f"\n{hour} {activity_info['color']} {activity_info['emoji']} {activity_info['level']}")

                if hour_sessions:
                    report_parts.append(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {total_activity:.1f} –º–∏–Ω ({len(hour_sessions)} —Å–µ—Å—Å–∏–π, —Å—Ä. {total_activity/len(hour_sessions):.1f}–º) (z={activity_info['z_score']:.1f})")

                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    coin_durations_hour = {}
                    for session in hour_sessions:
                        symbol = session.get('symbol', '')
                        duration = session.get('total_duration', 0) / 60  # –í –º–∏–Ω—É—Ç–∞—Ö
                        if symbol in coin_durations_hour:
                            coin_durations_hour[symbol] += duration
                        else:
                            coin_durations_hour[symbol] = duration

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    top_coins_hour = sorted(coin_durations_hour.items(), key=lambda x: x[1], reverse=True)

                    if top_coins_hour:
                        coins_text = []
                        for symbol, duration in top_coins_hour[:10]:  # –¢–æ–ø-10 –º–æ–Ω–µ—Ç
                            coins_text.append(f"‚Ä¢ {symbol} ({duration:.1f}–º)")
                        report_parts.append("–ú–æ–Ω–µ—Ç—ã:")
                        report_parts.extend(coins_text)
                else:
                    report_parts.append(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 0.0 –º–∏–Ω (0 —Å–µ—Å—Å–∏–π) (z={activity_info['z_score']:.1f})")
                    report_parts.append("–ú–æ–Ω–µ—Ç—ã: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏
            from activity_level_calculator import activity_calculator

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ 24 —á–∞—Å–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            all_24h_activities = activity_calculator.get_last_24_hours_activity()
            stats_24h = activity_calculator.calculate_activity_statistics_welford(all_24h_activities)

            report_parts.append("")
            report_parts.append("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>")
            report_parts.append(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {stats_24h['mean']:.1f} –º–∏–Ω/—á–∞—Å")
            report_parts.append(f"‚Ä¢ –°—Ç–¥. –æ—Ç–∫–ª.: {stats_24h['std']:.1f} –º–∏–Ω")
            report_parts.append(f"‚Ä¢ –í—ã–±–æ—Ä–∫–∞: {stats_24h['count']} —á–∞—Å–æ–≤")

            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            report_text = "\n".join(report_parts)
            max_length = 4000

            if len(report_text) <= max_length:
                await update.message.reply_text(
                    report_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=self.main_keyboard
                )
            else:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                parts = []
                current_part = []
                current_length = 0

                for line in report_parts:
                    line_length = len(line) + 1  # +1 –¥–ª—è \n
                    if current_length + line_length > max_length and current_part:
                        parts.append("\n".join(current_part))
                        current_part = [line]
                        current_length = line_length
                    else:
                        current_part.append(line)
                        current_length += line_length

                if current_part:
                    parts.append("\n".join(current_part))

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
                for i, part in enumerate(parts):
                    reply_markup = self.main_keyboard if i == len(parts) - 1 else None
                    await update.message.reply_text(
                        part,
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_markup
                    )
                    if i < len(parts) - 1:
                        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ 24—á: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
                reply_markup=self.main_keyboard
            )



    async def _handle_back(self, update: Update):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await update.message.reply_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=self.main_keyboard
        )

    # Handlers –¥–ª—è ConversationHandler
    async def add_coin_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
        text = update.message.text.strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_back(update)
            return ConversationHandler.END

        text = text.upper()

        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –∫–æ–º–∞–Ω–¥
        if text.startswith('/ADD'):
            text = text[4:].strip()

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
        if not input_validator.validate_symbol(text):
            await update.message.reply_text(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞</b>\n\n"
                "–°–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (2-10 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
                "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</b>\n"
                "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª\n"
                "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã: <code>BTC</code>, <code>ETH</code>, <code>ADA</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=self.back_keyboard
            )
            return self.ADDING_COIN  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å –≤–≤–æ–¥

        symbol = text.replace('USDT', '').replace('_', '')

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        invalid_symbols = [
            'ADAD', 'XXXX', 'NULL', 'UNDEFINED', 'TEST', 'FAKE',
            'SCAM', '123', 'ABC', 'XYZ', 'QQQ', 'WWW', 'EEE'        ]

        if symbol in invalid_symbols or len(symbol) < 2 or len(symbol) > 10:
            await update.message.reply_text(
                f"‚ùå <b>–°–∏–º–≤–æ–ª '{symbol}' –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n"
                "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</b>\n"
                "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª\n"
                "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã: <code>BTC</code>, <code>ETH</code>, <code>ADA</code>, <code>SOL</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=self.back_keyboard
            )
            return self.ADDING_COIN  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å –≤–≤–æ–¥

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å–ø–∏—Å–∫–µ
        chat_id = update.effective_chat.id
        
        if user_manager.is_admin(chat_id):
            # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            if watchlist_manager.contains(symbol):
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ <b>{symbol}</b> —É–∂–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
                    parse_mode=ParseMode.HTML,
                    reply_markup=self.main_keyboard
                )
                return ConversationHandler.END
        else:
            # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
            user_watchlist = user_manager.get_user_watchlist(chat_id)
            if symbol in user_watchlist:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ <b>{symbol}</b> —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
                    parse_mode=ParseMode.HTML,
                    reply_markup=self.main_keyboard
                )
                return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        loading_msg = None
        try:
            loading_msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –º–æ–Ω–µ—Ç—É...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å–Ω–∞—á–∞–ª–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            from cache_manager import cache_manager
            cached_data = cache_manager.get_ticker_cache(symbol)
            if cached_data:
                ticker_data = cached_data
                bot_logger.debug(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–µ—à –¥–ª—è {symbol}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
                ticker_data = await asyncio.wait_for(
                    api_client.get_ticker_data(symbol), 
                    timeout=10.0
                )

            if not ticker_data:
                try:
                    await update.message.reply_text(
                        f"‚ùå <b>–ú–æ–Ω–µ—Ç–∞ '{symbol}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ MEXC</b>\n\n"
                        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞\n"
                        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å USDT\n"
                        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–æ–Ω–µ—Ç–∞ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ MEXC\n\n"
                        "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</b>\n"
                        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã\n"
                        "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n\n"
                        "–ü—Ä–∏–º–µ—Ä—ã: <code>BTC</code>, <code>ETH</code>, <code>ADA</code>",
                        parse_mode=ParseMode.HTML,
                        reply_markup=self.back_keyboard
                    )
                except Exception:
                    await update.message.reply_text(
                        f"‚ùå <b>–ú–æ–Ω–µ—Ç–∞ '{symbol}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ MEXC</b>\n\n"
                        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥'",
                        parse_mode=ParseMode.HTML,
                        reply_markup=self.back_keyboard
                    )
                return self.ADDING_COIN  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å –≤–≤–æ–¥

        except asyncio.TimeoutError:
            try:
                if loading_msg:
                    await loading_msg.delete()
            except:
                pass
            await update.message.reply_text(
                f"‚è±Ô∏è <b>–¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–Ω–µ—Ç—ã '{symbol}'</b>\n\n"
                "API —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç.\n\n"
                "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
                "‚Ä¢ –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª –µ—â–µ —Ä–∞–∑\n"
                "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–∞—Ç—å 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞",
                parse_mode=ParseMode.HTML,
                reply_markup=self.back_keyboard
            )
            return self.ADDING_COIN  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å –≤–≤–æ–¥
        except Exception as e:
            error_msg = str(e).lower()
            try:
                if loading_msg:
                    await loading_msg.delete()
            except:
                pass

            if ("invalid symbol" in error_msg or "400" in error_msg or 
                "inline keyboard expected" in error_msg or "circuit breaker" in error_msg):
                await update.message.reply_text(
                    f"‚ùå <b>–°–∏–º–≤–æ–ª '{symbol}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n"
                    "–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ MEXC.\n\n"
                    "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</b>\n"
                    "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã\n"
                    "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã: <code>BTC</code>, <code>ETH</code>, <code>ADA</code>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=self.back_keyboard
                )
                return self.ADDING_COIN  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            else:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–Ω–µ—Ç—ã {symbol}: {e}")
                await update.message.reply_text(
                    f"‚ö†Ô∏è <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ '{symbol}'</b>\n\n"
                    "API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
                    "üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª —Å–Ω–æ–≤–∞\n"
                    "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞",
                    parse_mode=ParseMode.HTML,
                    reply_markup=self.back_keyboard
                )
                return self.ADDING_COIN  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å –≤–≤–æ–¥

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ (–∞–¥–º–∏–Ω - –≥–ª–æ–±–∞–ª—å–Ω—ã–π, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ª–∏—á–Ω—ã–π)
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        success = False
        total_count = 0

        if user_manager.is_admin(chat_id):
            # –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            success = watchlist_manager.add(symbol)
            total_count = watchlist_manager.size()
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫
            success = user_manager.add_user_coin(chat_id, symbol)
            total_count = len(user_manager.get_user_watchlist(chat_id))

        if success:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ Circuit Breaker'—ã –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            try:
                from circuit_breaker import api_circuit_breakers
                reset_count = 0
                for name, cb in api_circuit_breakers.items():
                    if cb.state.value in ['open', 'half_open']:
                        cb.force_close()
                        reset_count += 1

                if reset_count > 0:
                    bot_logger.info(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {reset_count} Circuit Breaker'–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã")
            except Exception as e:
                bot_logger.debug(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Circuit Breakers: {e}")

            price = float(ticker_data.get('lastPrice', 0))
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text(
                f"‚úÖ <b>–ú–æ–Ω–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üìä <b>{symbol}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: ${price:.6f}\n"
                f"üìà –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {len(user_watchlist)}\n\n"
                f"üîÑ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
                parse_mode=ParseMode.HTML,
                reply_markup=user_keyboard
            )

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –º–æ–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            if len(user_watchlist) == 1 and not user_manager.is_setup_completed(chat_id):
                user_manager.mark_setup_completed(chat_id)
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                await update.message.reply_text(
                    "üéâ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                    "‚Ä¢ üîî –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                    "‚Ä¢ üìä –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞\n"
                    "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–æ–Ω–µ—Ç—ã\n"
                    "‚Ä¢ ‚öô –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é! üëá",
                    parse_mode=ParseMode.HTML,
                    reply_markup=user_keyboard
                )
            bot_logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞ {symbol} –ø–æ —Ü–µ–Ω–µ ${price:.6f} {'(–∞–¥–º–∏–Ω)' if user_manager.is_admin(chat_id) else '(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)'}")
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã <b>{symbol}</b>",
                parse_mode=ParseMode.HTML,
                reply_markup=user_keyboard
            )

        return ConversationHandler.END

    async def remove_coin_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
        text = update.message.text.strip()
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if text == "üîô –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=user_keyboard
            )
            return ConversationHandler.END

        symbol = text.upper().replace("_USDT", "").replace("USDT", "")

        success = False
        if user_manager.is_admin(chat_id):
            # –ê–¥–º–∏–Ω —É–¥–∞–ª—è–µ—Ç –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            success = watchlist_manager.remove(symbol)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—è–µ—Ç –∏–∑ —Å–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞
            success = user_manager.remove_user_coin(chat_id, symbol)

        if success:
            await update.message.reply_text(
                f"‚úÖ <b>{symbol}</b> —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                f"‚ùå <b>{symbol}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ.",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )

        return ConversationHandler.END

    async def volume_setting_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä—ë–º–∞"""
        text = update.message.text.strip()
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_settings(update)
            return ConversationHandler.END

        try:
            value = int(text)
            if value < 100:
                await update.message.reply_text(
                    "‚ùå –û–±—ä—ë–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ $100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=self.back_keyboard
                )
                return self.SETTING_VOLUME

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            if user_manager.is_admin(chat_id):
                config_manager.set('VOLUME_THRESHOLD', value)
            else:
                user_manager.update_user_config(chat_id, 'VOLUME_THRESHOLD', value)

            await update.message.reply_text(
                f"‚úÖ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> ${value:,}",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=self.back_keyboard
            )
            return self.SETTING_VOLUME

        return ConversationHandler.END

    async def spread_setting_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø—Ä–µ–¥–∞"""
        text = update.message.text.strip()
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_settings(update)
            return ConversationHandler.END

        try:
            value = float(text)
            if value < 0 or value > 10:
                await update.message.reply_text(
                    "‚ùå –°–ø—Ä–µ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=self.back_keyboard
                )
                return self.SETTING_SPREAD

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            if user_manager.is_admin(chat_id):
                config_manager.set('SPREAD_THRESHOLD', value)
            else:
                user_manager.update_user_config(chat_id, 'SPREAD_THRESHOLD', value)

            await update.message.reply_text(
                f"‚úÖ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {value}%",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=self.back_keyboard
            )
            return self.SETTING_SPREAD

        return ConversationHandler.END

    async def natr_setting_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NATR"""
        text = update.message.text.strip()
        chat_id = update.effective_chat.id
        user_keyboard = self.get_user_keyboard(chat_id)

        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_settings(update)
            return ConversationHandler.END

        try:
            value = float(text)
            if value < 0 or value > 20:
                await update.message.reply_text(
                    "‚ùå NATR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 20%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=self.back_keyboard
                )
                return self.SETTING_NATR

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            if user_manager.is_admin(chat_id):
                config_manager.set('NATR_THRESHOLD', value)
            else:
                user_manager.update_user_config(chat_id, 'NATR_THRESHOLD', value)

            await update.message.reply_text(
                f"‚úÖ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π NATR —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {value}%",
                reply_markup=user_keyboard,
                parse_mode=ParseMode.HTML
            )
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=self.back_keyboard
            )
            return self.SETTING_NATR

        return ConversationHandler.END

    async def _monitor_coins(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç"""
        self.bot_running = True

        last_report_time = 0
        report_interval = 300  # 5 –º–∏–Ω—É—Ç

        try:
            while self.bot_running:
                try:
                    current_time = time.time()

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º  
                    watchlist_symbols = watchlist_manager.get_symbols()

                    if not watchlist_symbols:
                        bot_logger.warning("–°–ø–∏—Å–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç")
                        await asyncio.sleep(10)
                        continue

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                    coins_data = await self._get_all_coins_data(watchlist_symbols)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
                    for symbol in watchlist_symbols:
                        coin_data = coins_data.get(symbol)
                        if coin_data and data_validator.validate_coin_data(coin_data):
                            await self._check_coin_activity(symbol, coin_data)

                            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Session Recorder
                            try:
                                from session_recorder import session_recorder
                                session_recorder.update_coin_activity(symbol, coin_data)
                            except Exception as e:
                                bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Session Recorder –¥–ª—è {symbol}: {e}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ Session Recorder
                    try:
                        from session_recorder import session_recorder
                        session_recorder.check_inactive_sessions(self.active_coins)
                    except Exception as e:
                        bot_logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")

                    # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
                    await self._cleanup_inactive_coins()

                except Exception as e:
                    bot_logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–Ω–µ—Ç: {e}")
                    await asyncio.sleep(10)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Ä–∞–∑ –≤ report_interval —Å–µ–∫—É–Ω–¥
                if current_time - last_report_time >= report_interval:
                    await self._generate_and_send_report()
                    last_report_time = current_time

                await asyncio.sleep(5)

        except asyncio.CancelledError:
            bot_logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            bot_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –º–æ–Ω–µ—Ç: {e}")
        finally:
            self.bot_running = False

    async def _get_all_coins_data(self, symbols: List[str]) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç"""
        tasks = [api_client.get_ticker_data(symbol) for symbol in symbols]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        coins_data = {}
        for i, symbol in enumerate(symbols):
            if isinstance(results[i], Exception):
                bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {results[i]}")
            else:
                coins_data[symbol] = results[i]
        return coins_data

    async def _check_coin_activity(self, symbol: str, coin_data: Dict):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–µ"""
        volume = float(coin_data.get('quoteVolume', 0))
        spread = data_validator.calculate_spread(coin_data)
        natr = await data_validator.calculate_natr(symbol)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        volume_threshold = config_manager.get('VOLUME_THRESHOLD')
        spread_threshold = config_manager.get('SPREAD_THRESHOLD')
        natr_threshold = config_manager.get('NATR_THRESHOLD')

        is_active = (
            volume >= volume_threshold and
            spread >= spread_threshold and
            natr >= natr_threshold
        )

        if is_active:
            if symbol not in self.active_coins:
                self.active_coins[symbol] = {
                    'last_active': time.time(),
                    'last_price': float(coin_data.get('lastPrice', 0)),
                    'highest_price': float(coin_data.get('lastPrice', 0)),
                    'lowest_price': float(coin_data.get('lastPrice', 0))
                }

                alert_text = (
                    f"üî• <b>{symbol} –ê–∫—Ç–∏–≤–Ω–∞!</b>\n\n"
                    f"üí∞ –¶–µ–Ω–∞: <code>${self.active_coins[symbol]['last_price']:.6f}</code>\n"
                    f"üìä –û–±—ä—ë–º: <code>${volume:,.2f}</code>\n"
                    f"‚áÑ –°–ø—Ä–µ–¥: <code>{spread:.2f}%</code>\n"
                    f"üìà NATR: <code>{natr:.2f}%</code>"
                )
                await self.send_message(alert_text)
                bot_logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–Ω–µ—Ç–∞: {symbol}")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º last_active
                self.active_coins[symbol]['last_active'] = time.time()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º High/Low
                current_price = float(coin_data.get('lastPrice', 0))
                if current_price > self.active_coins[symbol]['highest_price']:
                    self.active_coins[symbol]['highest_price'] = current_price
                if current_price < self.active_coins[symbol]['lowest_price']:
                    self.active_coins[symbol]['lowest_price'] = current_price
        else:
            if symbol in self.active_coins:
                del self.active_coins[symbol]
                bot_logger.info(f"–ú–æ–Ω–µ—Ç–∞ {symbol} –±–æ–ª–µ–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")

    async def _cleanup_inactive_coins(self):
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö"""
        inactive_time = 300  # 5 –º–∏–Ω—É—Ç
        current_time = time.time()
        inactive_coins = [
            symbol for symbol, data in self.active_coins.items()
            if current_time - data['last_active'] > inactive_time
        ]

        for symbol in inactive_coins:
            del self.active_coins[symbol]
            bot_logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–Ω–µ—Ç–∞: {symbol}")

    async def _generate_and_send_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–æ–Ω–µ—Ç"""
        if not self.active_coins:
            bot_logger.debug("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return

        report_parts = ["üìä <b>–û—Ç—á–µ—Ç –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö:</b>\n"]

        total_volume = 0
        for symbol, data in self.active_coins.items():
            volume = float(await api_client.get_quote_volume(symbol))
            total_volume += volume
            price_change = data['last_price'] - data['lowest_price']
            report_parts.append(
                f"‚Ä¢ <b>{symbol}</b>: <code>${data['last_price']:.6f}</code> "
                f"(<code>+${price_change:.6f}</code>)\n"
                f"  Min: <code>${data['lowest_price']:.6f}</code> "
                f"Max: <code>${data['highest_price']:.6f}</code>"
            )

        report_parts.append(f"\nüí∞ –û–±—â–∏–π –æ–±—ä—ë–º: <code>${total_volume:,.2f}</code>")
        report_text = "\n".join(report_parts)

        await self.send_message(report_text)
        bot_logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö")

    async def _queue_message(self, message_data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        try:
            if self._message_queue is None:
                self._message_queue = asyncio.Queue()

            await self._message_queue.put(message_data)
            bot_logger.debug("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")

    def setup_application(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        from telegram.error import Conflict, NetworkError, TimedOut

        builder = Application.builder()
        builder.token(self.token)
        builder.connection_pool_size(4)
        builder.pool_timeout(15.0)
        builder.read_timeout(20.0)
        builder.write_timeout(20.0)

        async def error_handler(update, context):
            error = context.error

            if isinstance(error, Conflict):
                bot_logger.warning("–ö–æ–Ω—Ñ–ª–∏–∫—Ç Telegram API - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
                return
            elif isinstance(error, (NetworkError, TimedOut)):
                bot_logger.debug(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Telegram: {type(error).__name__}")
                return
            else:
                bot_logger.error(f"–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {error}")

        self.app = builder.build()
        self.app.add_error_handler(error_handler)

        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.TEXT & ~filters.COMMAND, self.button_handler)
            ],
            states={
                self.ADDING_COIN: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.add_coin_handler)
                ],
                self.REMOVING_COIN: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.remove_coin_handler)
                ],
                self.SETTING_VOLUME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.volume_setting_handler)
                ],
                self.SETTING_SPREAD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.spread_setting_handler)
                ],
                self.SETTING_NATR: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.natr_setting_handler)
                ]
            },
            fallbacks=[
                CommandHandler("start", self.start_handler),
                MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥$"), self._handle_back)
            ],
            per_message=False
        )

        self.app.add_handler(CommandHandler("start", self.start_handler))
        self.app.add_handler(conv_handler)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
        self.app.add_handler(CallbackQueryHandler(self.callback_query_handler))

        return self.app

    async def callback_query_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if not user_manager.is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        data = query.data

        if data.startswith("approve_"):
            chat_id = data.replace("approve_", "")
            await self.admin_handlers.handle_approve_user(update, context, chat_id)
        elif data.startswith("reject_"):
            chat_id = data.replace("reject_", "")
            await self.admin_handlers.handle_reject_user(update, context, chat_id)
        elif data.startswith("revoke_"):
            chat_id = data.replace("revoke_", "")
            await self.admin_handlers.handle_revoke_user(update, context, chat_id)
        elif data == "show_all_users":
            await self.admin_handlers.handle_show_all_users(update, context)
        elif data.startswith("users_page_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∑–∂–µ)
            page = int(data.replace("users_page_", ""))
            await self.admin_handlers.handle_show_all_users(update, context)
        elif data == "add_more_coin":
            await self._handle_add_more_coin(update, context)
        elif data == "setup_filters":
            await self._handle_setup_filters_callback(update, context)

    async def _handle_initial_coin_input(self, update: Update, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ–Ω–µ—Ç—ã –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)"""
        chat_id = update.effective_chat.id

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ - –∂–¥–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
        if text.startswith('/') or text in ['üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', '‚ûï –î–æ–±–∞–≤–∏—Ç—å', '‚ûñ –£–¥–∞–ª–∏—Ç—å', 
                                           'üìã –°–ø–∏—Å–æ–∫', '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 24—á', '‚Ñπ –°—Ç–∞—Ç—É—Å', 'üõë –°—Ç–æ–ø']:
            await update.message.reply_text(
                "üí° <b>–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–µ—Ç—É!</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, ADA, SOL",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –º–æ–Ω–µ—Ç—É
        symbol = text.upper().replace('_USDT', '').replace('USDT', '').strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
        if not input_validator.validate_symbol(symbol):
            await update.message.reply_text(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞</b>\n\n"
                "–°–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (2-10 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n"
                "–ü—Ä–∏–º–µ—Ä—ã: BTC, ETH, ADA, SOL",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
        try:
            loading_msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –º–æ–Ω–µ—Ç—É...")

            ticker_data = await api_client.get_ticker_data(symbol)

            if loading_msg:
                await loading_msg.delete()

            if not ticker_data:
                await update.message.reply_text(
                    f"‚ùå <b>–ú–æ–Ω–µ—Ç–∞ '{symbol}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ MEXC</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã.\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã: BTC, ETH, ADA, SOL",
                    parse_mode=ParseMode.HTML
                )
                return ConversationHandler.END

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_watchlist = user_manager.get_user_watchlist(chat_id)
            if symbol in user_watchlist:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ <b>{symbol}</b> —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –º–æ–Ω–µ—Ç—ã:",
                    parse_mode=ParseMode.HTML
                )
                return ConversationHandler.END

            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—É
            if user_manager.add_user_coin(chat_id, symbol):
                user_watchlist = user_manager.get_user_watchlist(chat_id)
                price = float(ticker_data.get('lastPrice', 0))

                # –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ setup, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                user_manager.update_user_data(chat_id, {'setup_state': 'coin_added_waiting_choice'})

                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
                from telegram import InlineKeyboardMarkup, InlineKeyboardButton
                keyboard = [
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–æ–Ω–µ—Ç—É", callback_data="add_more_coin")],
                    [InlineKeyboardButton("‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="setup_filters")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    f"‚úÖ <b>–ú–æ–Ω–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                    f"üìä <b>{symbol}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <code>${price:.6f}</code>\n"
                    f"üìà –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: <b>{len(user_watchlist)}</b>\n\n"
                    "üîÑ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ <b>{symbol}</b> —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –º–æ–Ω–µ—Ç—ã:",
                    parse_mode=ParseMode.HTML
                )

        except Exception as e:
            if 'loading_msg' in locals():
                try:
                    await loading_msg.delete()
                except:
                    pass

            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–Ω–µ—Ç—ã {symbol}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                parse_mode=ParseMode.HTML
            )

        return ConversationHandler.END

    async def _handle_initial_filter_input(self, update: Update, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        chat_id = update.effective_chat.id
        user_data = user_manager.get_user_data(chat_id)
        setup_state = user_data.get('setup_state', '')

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "–¥–∞–ª–µ–µ" –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
        if text.lower() in ['–¥–∞–ª–µ–µ', '–≥–æ—Ç–æ–≤–æ', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'] and user_data.get('setup_state') == 'initial_coin_setup':
            user_watchlist = user_manager.get_user_watchlist(chat_id)
            if user_watchlist:
                await self._start_filter_setup_initial(update, chat_id)
                return ConversationHandler.END
            else:
                await update.message.reply_text(
                    "‚ùå <b>–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã:",
                    parse_mode=ParseMode.HTML
                )
                return ConversationHandler.END

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if setup_state == 'setting_filters_volume':
            try:
                value = int(text)
                if value < 100:
                    await update.message.reply_text(
                        "‚ùå –û–±—ä—ë–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ $100\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
                        parse_mode=ParseMode.HTML
                    )
                    return ConversationHandler.END

                user_manager.update_user_config(chat_id, 'VOLUME_THRESHOLD', value)
                user_manager.update_user_data(chat_id, {'setup_state': 'setting_filters_spread'})

                await update.message.reply_text(
                    f"‚úÖ <b>–û–±—ä—ë–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> ${value:,}\n\n"
                    "üìà <b>2/3 - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.\n\n"
                    "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b> 0.1-0.5\n"
                    "–°–ø—Ä–µ–¥ - —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.1):",
                    parse_mode=ParseMode.HTML
                )

            except ValueError:
                await update.message.reply_text(
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 1000",
                    parse_mode=ParseMode.HTML
                )

        elif setup_state == 'setting_filters_spread':
            try:
                value = float(text)
                if value < 0 or value > 10:
                    await update.message.reply_text(
                        "‚ùå –°–ø—Ä–µ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10%\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
                        parse_mode=ParseMode.HTML
                    )
                    return ConversationHandler.END

                user_manager.update_user_config(chat_id, 'SPREAD_THRESHOLD', value)
                user_manager.update_user_data(chat_id, {'setup_state': 'setting_filters_natr'})

                await update.message.reply_text(
                    f"‚úÖ <b>–°–ø—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {value}%\n\n"
                    "üìä <b>3/3 - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π NATR</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π NATR –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.\n\n"
                    "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b> 0.5-2.0\n"
                    "NATR –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5):",
                    parse_mode=ParseMode.HTML
                )

            except ValueError:
                await update.message.reply_text(
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 0.1",
                    parse_mode=ParseMode.HTML
                )

        elif setup_state == 'setting_filters_natr':
            try:
                value = float(text)
                if value < 0 or value > 20:
                    await update.message.reply_text(
                        "‚ùå NATR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 20%\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
                        parse_mode=ParseMode.HTML
                    )
                    return ConversationHandler.END

                user_manager.update_user_config(chat_id, 'NATR_THRESHOLD', value)
                user_manager.mark_setup_completed(chat_id)
                user_manager.update_user_data(chat_id, {'setup_state': 'completed'})

                user_config = user_manager.get_user_config(chat_id)
                user_watchlist = user_manager.get_user_watchlist(chat_id)

                await update.message.reply_text(
                    f"üéâ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"‚úÖ <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:</b>\n"
                    f"‚Ä¢ –û–±—ä—ë–º: ${user_config.get('VOLUME_THRESHOLD'):,}\n"
                    f"‚Ä¢ –°–ø—Ä–µ–¥: {user_config.get('SPREAD_THRESHOLD')}%\n"
                    f"‚Ä¢ NATR: {user_config.get('NATR_THRESHOLD')}%\n\n"
                    f"üìã <b>–í–∞—à–∏ –º–æ–Ω–µ—Ç—ã:</b> {len(user_watchlist)} —à—Ç.\n"
                    f"‚Ä¢ {', '.join(user_watchlist[:5])}"
                    f"{'...' if len(user_watchlist) > 5 else ''}\n\n"
                    "üöÄ <b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ:",
                    parse_mode=ParseMode.HTML,
                    reply_markup=self.user_keyboard
                )

            except ValueError:
                await update.message.reply_text(
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 0.5",
                    parse_mode=ParseMode.HTML
                )

        return ConversationHandler.END

    async def _start_filter_setup_initial(self, update: Update, chat_id: str):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±–µ–∑ –∫–Ω–æ–ø–æ–∫"""
        user_manager.update_user_data(chat_id, {'setup_state': 'setting_filters_volume'})

        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã, —á—Ç–æ–±—ã –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–ª —Ç–æ–ª—å–∫–æ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –º–æ–Ω–µ—Ç–∞—Ö.\n\n"
            "üìä <b>1/3 - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö.\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b> 500-2000\n"
            "–û–±—ä—ë–º - —Å—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000):",
            parse_mode=ParseMode.HTML
        )

    async def _handle_add_more_coin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–æ–Ω–µ—Ç—É'"""
        query = update.callback_query
        await query.answer()

        chat_id = query.from_user.id

        await query.edit_message_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Å–ª–µ–¥—É—é—â–µ–π –º–æ–Ω–µ—Ç—ã:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã: BTC, ETH, ADA, SOL",
            parse_mode=ParseMode.HTML
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –º–æ–Ω–µ—Ç—ã
        user_manager.update_user_data(chat_id, {'setup_state': 'initial_coin_setup'})

    async def _handle_setup_filters_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º'"""
        query = update.callback_query
        await query.answer()

        chat_id = query.from_user.id

        await query.edit_message_text(
            "‚öôÔ∏è <b>–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç.",
            parse_mode=ParseMode.HTML
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
        await self._start_filter_setup_initial_callback(query, chat_id)

    async def _start_filter_setup_initial_callback(self, query, chat_id: str):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ callback"""
        user_manager.update_user_data(chat_id, {'setup_state': 'setting_filters_volume'})

        await query.message.reply_text(
            "üìä <b>1/3 - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö.\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b> 500-2000\n"
            "–û–±—ä—ë–º - —Å—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000):",
            parse_mode=ParseMode.HTML
        )

    

    async def initial_setup_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤)"""
        chat_id = update.effective_chat.id
        text = update.message.text

        user_data = user_manager.get_user_data(chat_id)
        setup_state = user_data.get('setup_state', '')

        if setup_state == 'initial_coin_setup':
            return await self._handle_initial_coin_input(update, text)
        elif setup_state.startswith('setting_filters'):
            return await self._handle_initial_filter_input(update, text)

        else:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await update.message.reply_text(
                "üí° <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π:",
                parse_mode=ParseMode.HTML,
                reply_markup=self.user_keyboard
            )
            return ConversationHandler.END


    async def approve_user(self, chat_id: str) -> bool:
        """–û–¥–æ–±—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id_str = str(chat_id)

        if chat_id_str not in self.pending_requests:
            return False

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—è–≤–∫–∏ –≤ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        request_data = self.pending_requests[chat_id_str]

        self.users_data[chat_id_str] = {
            'chat_id': chat_id_str,
            'username': request_data.get('username', 'Unknown'),
            'first_name': request_data.get('first_name', 'Unknown'),
            'last_name': request_data.get('last_name', ''),
            'approved_time': time.time(),
            'approved_datetime': datetime.now().isoformat(),
            'setup_completed': False,
            'watchlist': [],
            'config': {
                'VOLUME_THRESHOLD': 1000,
                'SPREAD_THRESHOLD': 0.1,
                'NATR_THRESHOLD': 0.5
            },
            'active_coins': {},
            'last_activity': time.time(),
            'setup_state': 'initial_coin_setup'  # –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        }

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞—è–≤–æ–∫
        del self.pending_requests[chat_id_str]
        self.save_data()

        bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id_str} –æ–¥–æ–±—Ä–µ–Ω")
        return True
# Modified bot to handle initial configuration and filter input, and new functions for manage the states of setup.
telegram_bot = TradingTelegramBot()