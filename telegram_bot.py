import asyncio
import time
import threading
from typing import Dict, Optional, List
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode
from logger import bot_logger
from config import config_manager
from api_client import api_client
from watchlist_manager import watchlist_manager
from bot_state import bot_state_manager
from advanced_alerts import advanced_alert_manager, AlertType, AlertSeverity
import os

class TradingTelegramBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')

        if not self.token or not self.chat_id:
            raise ValueError("TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        self.app = None
        self.bot_running = False
        self.bot_mode = None
        self.active_coins: Dict[str, Dict] = {}
        self.monitoring_message_id = None
        self.last_message_time = 0

        # –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
        self.ADDING_COIN, self.REMOVING_COIN = range(2)
        self.SETTING_VOLUME, self.SETTING_SPREAD, self.SETTING_NATR = range(2, 5)

        self._setup_keyboards()

    def _setup_keyboards(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        self.main_keyboard = ReplyKeyboardMarkup([
            ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ûñ –£–¥–∞–ª–∏—Ç—å"],
            ["üìã –°–ø–∏—Å–æ–∫", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
            ["üõë –°—Ç–æ–ø", "‚Ñπ –°—Ç–∞—Ç—É—Å"]
        ], resize_keyboard=True, one_time_keyboard=False)

        self.settings_keyboard = ReplyKeyboardMarkup([
            ["üìä –û–±—ä—ë–º", "‚áÑ –°–ø—Ä–µ–¥"],
            ["üìà NATR", "üö® –ê–ª–µ—Ä—Ç—ã"],
            ["üîÑ –°–±—Ä–æ—Å", "üîô –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)

        self.back_keyboard = ReplyKeyboardMarkup([
            ["üîô –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)

    async def _rate_limit_message(self):
        """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        current_time = time.time()
        min_interval = config_manager.get('MESSAGE_RATE_LIMIT')

        if current_time - self.last_message_time < min_interval:
            await asyncio.sleep(min_interval - (current_time - self.last_message_time))

        self.last_message_time = time.time()

    async def send_message(self, text: str, reply_markup=None, parse_mode=ParseMode.HTML) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã"""
        if not self.app or not self.app.bot:
            bot_logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º event loop –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        try:
            current_loop = asyncio.get_running_loop()
            if current_loop.is_closed():
                bot_logger.debug("Event loop –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è")
                return None
        except RuntimeError:
            bot_logger.debug("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return None

        await self._rate_limit_message()

        try:
            message = await self.app.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            return message.message_id
        except Exception as e:
            error_message = str(e).lower()
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ event loop –æ—à–∏–±–æ–∫
            if any(phrase in error_message for phrase in [
                "event loop", "different event loop", "asyncio.locks.event",
                "is bound to a different event loop", "runtimeerror"
            ]):
                bot_logger.debug(f"Event loop –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {type(e).__name__}")
                return None
            else:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                return None

    async def edit_message(self, message_id: int, text: str, reply_markup=None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            await self.app.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def delete_message(self, message_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π event loop"""
        if not message_id or not isinstance(message_id, int) or message_id <= 0:
            bot_logger.debug(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}")
            return False

        if not self.app or not self.app.bot:
            bot_logger.debug(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
            return False

        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ event loop
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π loop
                current_loop = asyncio.get_running_loop()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ loop –Ω–µ –∑–∞–∫—Ä—ã—Ç
                if current_loop.is_closed():
                    bot_logger.debug(f"Event loop –∑–∞–∫—Ä—ã—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
                    return False
            except RuntimeError:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ loop, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                bot_logger.debug(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
                return False

            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            await self.app.bot.delete_message(chat_id=self.chat_id, message_id=message_id)
            bot_logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
            return True

        except Exception as e:
            error_message = str(e).lower()
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            ignored_errors = [
                "message to delete not found",
                "message can't be deleted", 
                "message is too old",
                "bad request",
                "not found",
                "event loop",
                "different event loop", 
                "asyncio.locks.event",
                "runtimeerror",
                "is bound to a different event loop",
                "cannot be called from a running event loop",
                "event loop is closed"
            ]

            if any(phrase in error_message for phrase in ignored_errors):
                bot_logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {type(e).__name__}")
                return False
            else:
                bot_logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
                return False

    def _chunks(self, lst: List, size: int):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞–Ω–∫–∏"""
        for i in range(0, len(lst), size):
            yield lst[i:i + size]

    async def _stop_current_mode(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        if self.bot_mode:
            bot_logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞: {self.bot_mode}")

            # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª—ã
            self.bot_running = False

            # –î–∞–µ–º –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
            await asyncio.sleep(0.8)

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º event loop –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
                try:
                    current_loop = asyncio.get_running_loop()
                    if current_loop.is_closed():
                        bot_logger.debug("Event loop –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
                        self.monitoring_message_id = None
                        self.active_coins.clear()
                        self.bot_mode = None
                        bot_state_manager.set_last_mode(None)
                        return
                except RuntimeError:
                    bot_logger.debug("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
                    self.monitoring_message_id = None
                    self.active_coins.clear()
                    self.bot_mode = None
                    bot_state_manager.set_last_mode(None)
                    return

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if self.monitoring_message_id:
                    success = await self.delete_message(self.monitoring_message_id)
                    if success:
                        bot_logger.info("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω–æ")
                    self.monitoring_message_id = None

                # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if self.active_coins:
                    deleted_count = 0
                    for symbol, coin_data in list(self.active_coins.items()):
                        if coin_data.get('msg_id'):
                            success = await self.delete_message(coin_data['msg_id'])
                            if success:
                                deleted_count += 1
                    if deleted_count > 0:
                        bot_logger.info(f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    self.active_coins.clear()

            except Exception as e:
                error_message = str(e).lower()
                if "event loop" in error_message or "asyncio" in error_message:
                    bot_logger.debug(f"Event loop –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {type(e).__name__}")
                else:
                    bot_logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                self.monitoring_message_id = None
                self.active_coins.clear()

            self.bot_mode = None
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bot_state_manager.set_last_mode(None)

            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º API —Å–µ—Å—Å–∏—é
            try:
                await api_client.close()
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                await asyncio.sleep(0.2)
                bot_logger.debug("API —Å–µ—Å—Å–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                bot_logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è API —Å–µ—Å—Å–∏–∏: {e}")

    async def _notification_mode_loop(self):
        """–¶–∏–∫–ª —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ –æ–±—Ä–∞–∑—Ü—É —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        bot_logger.info("–ó–∞–ø—É—â–µ–Ω —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

        while self.bot_running and self.bot_mode == 'notification':
            watchlist = watchlist_manager.get_all()
            if not watchlist:
                await asyncio.sleep(config_manager.get('CHECK_FULL_CYCLE_INTERVAL'))
                continue

            batch_size = config_manager.get('CHECK_BATCH_SIZE')
            for batch in self._chunks(list(watchlist), batch_size):
                if not self.bot_running or self.bot_mode != 'notification':
                    break

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –º–æ–Ω–µ—Ç (BATCH-—Ä–µ–∂–∏–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏)
                batch_data = await api_client.get_batch_coin_data(batch)
                batch_results = [data for data in batch_data.values() if data is not None]

                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if batch_results:
                    await asyncio.sleep(config_manager.get('COIN_DATA_DELAY'))

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –º–æ–Ω–µ—Ç—É –≤ –±–∞—Ç—á–µ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
                processed_symbols = set()
                for data in batch_results:
                    if not self.bot_running or self.bot_mode != 'notification':
                        break

                    try:
                        symbol = data['symbol']
                        
                        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ
                        if symbol in processed_symbols:
                            bot_logger.debug(f"–ú–æ–Ω–µ—Ç–∞ {symbol} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                            
                        processed_symbols.add(symbol)
                        await self._process_coin_notification(symbol, data)
                    except Exception as e:
                        bot_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")

                await asyncio.sleep(config_manager.get('CHECK_BATCH_INTERVAL'))

            await asyncio.sleep(config_manager.get('CHECK_FULL_CYCLE_INTERVAL'))

    async def _process_coin_notification(self, symbol: str, data: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã - —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        now = time.time()
        is_currently_active = symbol in self.active_coins

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã –¥–ª—è –º–æ–Ω–µ—Ç—ã
        advanced_alert_manager.check_coin_alerts(symbol, data)

        if data['active']:
            if not is_currently_active:
                # –£—Å–∏–ª–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∞–∂–¥—ã —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                if symbol in self.active_coins:
                    bot_logger.debug(f"–ú–æ–Ω–µ—Ç–∞ {symbol} —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    return

                # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è - —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–µ—Å—Ç–æ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–∞—Ä–∫–µ—Ä–æ–º
                temp_marker = f"creating_{now}"
                self.active_coins[symbol] = {
                    'start': now,
                    'last_active': now,
                    'msg_id': temp_marker,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    'data': data,
                    'creating': True  # –§–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                }

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
                await asyncio.sleep(0.05)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à –º–∞—Ä–∫–µ—Ä –≤—Å–µ –µ—â–µ –Ω–∞ –º–µ—Å—Ç–µ
                if (symbol not in self.active_coins or 
                    self.active_coins[symbol].get('msg_id') != temp_marker):
                    bot_logger.debug(f"–ú–æ–Ω–µ—Ç–∞ {symbol} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º")
                    return

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = (
                    f"üö® <b>{symbol}_USDT –∞–∫—Ç–∏–≤–µ–Ω</b>\n"
                    f"üîÑ –ò–∑–º: {data['change']:+.2f}%  üîÅ –°–¥–µ–ª–æ–∫: {data['trades']}\n"
                    f"üìä –û–±—ä—ë–º: ${data['volume']:,.2f}  NATR: {data['natr']:.2f}%\n"
                    f"‚áÑ –°–ø—Ä–µ–¥: {data['spread']:.2f}%"
                )

                msg_id = await self.send_message(message)

                if msg_id and symbol in self.active_coins:
                    # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º ID
                    self.active_coins[symbol].update({
                        'msg_id': msg_id,
                        'creating': False
                    })
                    bot_logger.trade_activity(symbol, "STARTED", f"Volume: ${data['volume']:,.2f}, Trades: {data['trades']}")
                else:
                    # –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å - –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º
                    if symbol in self.active_coins:
                        del self.active_coins[symbol]
                    bot_logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {symbol}")
                    
            else:
                # –ú–æ–Ω–µ—Ç–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∞ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è
                coin_info = self.active_coins[symbol]
                if coin_info.get('creating', False):
                    bot_logger.debug(f"–ú–æ–Ω–µ—Ç–∞ {symbol} –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                coin_info['last_active'] = now
                coin_info['data'] = data

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π msg_id
                msg_id = coin_info.get('msg_id')
                if msg_id and isinstance(msg_id, int) and msg_id > 0:
                    message = (
                        f"üö® <b>{symbol}_USDT –∞–∫—Ç–∏–≤–µ–Ω</b>\n"
                        f"üîÑ –ò–∑–º: {data['change']:+.2f}%  üîÅ –°–¥–µ–ª–æ–∫: {data['trades']}\n"
                        f"üìä –û–±—ä—ë–º: ${data['volume']:,.2f}  NATR: {data['natr']:.2f}%\n"
                        f"‚áÑ –°–ø—Ä–µ–¥: {data['spread']:.2f}%"
                    )
                    await self.edit_message(msg_id, message)

        elif is_currently_active:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –º–æ–Ω–µ—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è
            coin_info = self.active_coins[symbol]
            if coin_info.get('creating', False):
                return
                
            inactivity_timeout = config_manager.get('INACTIVITY_TIMEOUT')
            if now - coin_info['last_active'] > inactivity_timeout:
                await self._end_coin_activity(symbol, now)

    async def _end_coin_activity(self, symbol: str, end_time: float):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if symbol not in self.active_coins:
            return
            
        coin_info = self.active_coins[symbol]
        
        # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–Ω–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è
        if coin_info.get('creating', False):
            bot_logger.debug(f"–ú–æ–Ω–µ—Ç–∞ {symbol} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è, –æ—Ç–∫–ª–∞–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            return
            
        duration = end_time - coin_info['start']

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π ID
        msg_id = coin_info.get('msg_id')
        if msg_id and isinstance(msg_id, int) and msg_id > 0:
            await self.delete_message(msg_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ >= 60 —Å–µ–∫—É–Ω–¥
        if duration >= 60:
            duration_min = int(duration // 60)
            duration_sec = int(duration % 60)
            end_message = (
                f"‚úÖ <b>{symbol}_USDT –∑–∞–≤–µ—Ä—à–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_min} –º–∏–Ω {duration_sec} —Å–µ–∫"
            )
            await self.send_message(end_message)
            bot_logger.trade_activity(symbol, "ENDED", f"Duration: {duration_min}m {duration_sec}s")

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
        del self.active_coins[symbol]

    def _format_coin_message(self, data: Dict, status: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–æ–Ω–µ—Ç–µ"""
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_time = time.strftime("%H:%M:%S", time.localtime())

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫
        trades_indicator = "üü¢" if data['trades'] > 0 else "üî¥"

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
        recent_trades_indicator = ""
        if data.get('has_recent_trades'):
            recent_trades_indicator = " üî•"

        return (
            f"{status} <b>{data['symbol']}_USDT</b>{recent_trades_indicator}\n"
            f"üí∞ –¶–µ–Ω–∞: ${data['price']:.6f}\n"
            f"üîÑ 1–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {data['change']:+.2f}%\n"
            f"üìä 1–º –æ–±–æ—Ä–æ—Ç: ${data['volume']:,.2f}\n"
            f"üìà 1–º NATR: {data['natr']:.2f}%\n"
            f"‚áÑ –°–ø—Ä–µ–¥: {data['spread']:.2f}%\n"
            f"{trades_indicator} 1–º —Å–¥–µ–ª–æ–∫: {data['trades']}\n"
            f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}"
        )

    async def _monitoring_mode_loop(self):
        """–¶–∏–∫–ª —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        bot_logger.info("–ó–∞–ø—É—â–µ–Ω —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        initial_text = "üîÑ <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...</b>"
        self.monitoring_message_id = await self.send_message(initial_text)

        cycle_count = 0
        while self.bot_running and self.bot_mode == 'monitoring':
            cycle_count += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            if not await self._check_watchlist_for_monitoring():
                await asyncio.sleep(config_manager.get('MONITORING_UPDATE_INTERVAL'))
                continue

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç
            results, failed_coins = await self._fetch_monitoring_data()

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await self._update_monitoring_report(results, failed_coins)

            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
            await self._periodic_cleanup(cycle_count)

            await asyncio.sleep(config_manager.get('MONITORING_UPDATE_INTERVAL'))

        # –û—á–∏—â–∞–µ–º –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        await self._cleanup_monitoring_mode()

    async def _check_watchlist_for_monitoring(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        watchlist = watchlist_manager.get_all()
        if not watchlist:
            no_coins_text = "‚ùå <b>–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç</b>\n–î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
            if self.monitoring_message_id:
                await self.edit_message(self.monitoring_message_id, no_coins_text)
            return False
        return True

    async def _fetch_monitoring_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (BATCH-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        watchlist = list(watchlist_manager.get_all())
        results = []
        failed_coins = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        batch_size = config_manager.get('CHECK_BATCH_SIZE', 15)

        for batch in self._chunks(watchlist, batch_size):
            if not self.bot_running or self.bot_mode != 'monitoring':
                break

            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–æ –±–∞—Ç—á–∞ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
                batch_data = await api_client.get_batch_coin_data(batch)

                for symbol, coin_data in batch_data.items():
                    if coin_data:
                        results.append(coin_data)
                    else:
                        failed_coins.append(symbol)

            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ batch –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                # Fallback - –ø–æ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç–µ
                for symbol in batch:
                    try:
                        coin_data = await api_client.get_coin_data(symbol)
                        if coin_data:
                            results.append(coin_data)
                        else:
                            failed_coins.append(symbol)
                    except Exception as sym_e:
                        bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {sym_e}")
                        failed_coins.append(symbol)

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–µ–Ω–∞)
            await asyncio.sleep(config_manager.get('CHECK_BATCH_INTERVAL', 0.4))

        return results, failed_coins

    async def _process_monitoring_batch(self, batch) -> tuple:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        results = []
        failed_coins = []

        try:
            symbols_batch = list(batch)
            ticker_results = await api_client.get_multiple_tickers_batch(symbols_batch)

            for symbol in symbols_batch:
                ticker_data = ticker_results.get(symbol)
                if ticker_data:
                    try:
                        coin_data = await api_client.get_coin_data(symbol)
                        if coin_data:
                            results.append(coin_data)
                        else:
                            failed_coins.append(symbol)
                    except Exception as e:
                        bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                        failed_coins.append(symbol)
                else:
                    failed_coins.append(symbol)

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            for symbol in batch:
                try:
                    coin_data = await api_client.get_coin_data(symbol)
                    if coin_data:
                        results.append(coin_data)
                    else:
                        failed_coins.append(symbol)
                except Exception as e:
                    bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                    failed_coins.append(symbol)

        return results, failed_coins

    async def _update_monitoring_report(self, results: list, failed_coins: list):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if results:
            report = self._format_monitoring_report(results, failed_coins)
            if self.monitoring_message_id:
                await self.edit_message(self.monitoring_message_id, report)
            else:
                self.monitoring_message_id = await self.send_message(report)

    async def _periodic_cleanup(self, cycle_count: int):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏"""
        if cycle_count % 50 == 0:
            import gc
            gc.collect()

            from cache_manager import cache_manager
            from metrics_manager import metrics_manager
            cache_manager.clear_expired()
            metrics_manager.cleanup_old_metrics()

            bot_logger.debug(f"–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏, –∫–µ—à–∞ –∏ –º–µ—Ç—Ä–∏–∫ –ø–æ—Å–ª–µ {cycle_count} —Ü–∏–∫–ª–æ–≤")

    async def _cleanup_monitoring_mode(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.monitoring_message_id:
            bot_logger.info(f"–†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {self.monitoring_message_id}")
            await self.delete_message(self.monitoring_message_id)
            self.monitoring_message_id = None

    def _format_monitoring_report(self, results: List[Dict], failed_coins: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
        results.sort(key=lambda x: x['volume'], reverse=True)

        parts = ["<b>üìä –°–∫–∞–ª—å–ø–∏–Ω–≥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (1–º –¥–∞–Ω–Ω—ã–µ)</b>\n"]

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        vol_thresh = config_manager.get('VOLUME_THRESHOLD')
        spread_thresh = config_manager.get('SPREAD_THRESHOLD')
        natr_thresh = config_manager.get('NATR_THRESHOLD')

        parts.append(
            f"<i>–§–∏–ª—å—Ç—Ä—ã: 1–º –æ–±–æ—Ä–æ—Ç ‚â•${vol_thresh:,}, "
            f"–°–ø—Ä–µ–¥ ‚â•{spread_thresh}%, NATR ‚â•{natr_thresh}%</i>\n"
        )

        if failed_coins:
            parts.append(f"‚ö† <i>–û—à–∏–±–∫–∏: {', '.join(failed_coins[:5])}</i>\n")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        active_coins = [r for r in results if r['active']]
        if active_coins:
            parts.append("<b>üü¢ –ê–ö–¢–ò–í–ù–´–ï:</b>")
            for coin in active_coins[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                trades_icon = "üî•" if coin.get('has_recent_trades') else "üìä"
                parts.append(
                    f"‚Ä¢ <b>{coin['symbol']}</b> "
                    f"${coin['volume']:,.0f} | {coin['change']:+.1f}% | "
                    f"{trades_icon}T:{coin['trades']} | S:{coin['spread']:.2f}% | N:{coin['natr']:.2f}%"
                )
            parts.append("")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã (—Ç–æ–ø –ø–æ –æ–±—ä–µ–º—É)
        inactive_coins = [r for r in results if not r['active']]
        if inactive_coins:
            parts.append("<b>üî¥ –ù–ï–ê–ö–¢–ò–í–ù–´–ï (—Ç–æ–ø –ø–æ –æ–±—ä—ë–º—É):</b>")
            for coin in inactive_coins[:8]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
                trades_status = "‚úÖ" if coin['trades'] > 0 else "‚ùå"
                parts.append(
                    f"‚Ä¢ <b>{coin['symbol']}</b> "
                    f"${coin['volume']:,.0f} | {coin['change']:+.1f}% | "
                    f"{trades_status}T:{coin['trades']} | S:{coin['spread']:.2f}% | N:{coin['natr']:.2f}%"
                )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        parts.append(f"\nüìà –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_coins)}/{len(results)}")

        report = "\n".join(parts)

        # –û–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(report) > 4000:
            report = report[:4000] + "\n... <i>(–æ—Ç—á–µ—Ç –æ–±—Ä–µ–∑–∞–Ω)</i>"

        return report

    def start_monitoring_loop(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run_loop():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            if self.bot_mode == 'notification':
                loop.run_until_complete(self._notification_mode_loop())
            elif self.bot_mode == 'monitoring':
                loop.run_until_complete(self._monitoring_mode_loop())

        thread = threading.Thread(target=run_loop, daemon=True)
        thread.start()
        return thread

    # Telegram Handlers
    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∂–∏–º
        last_mode = bot_state_manager.get_last_mode()

        welcome_text = (
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç!</b>\n\n"
            "üìä <b>–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</b>\n"
            "‚Ä¢ üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö\n"
            "‚Ä¢ üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b> - –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞\n\n"
            "‚öô <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
            "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –≤ —Å–ø–∏—Å–æ–∫\n"
            "‚Ä¢ ‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
            "‚Ä¢ üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç\n"
            "‚Ä¢ ‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
        )

        # –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∂–∏–º–∞
        if last_mode and not self.bot_running:
            if last_mode == 'notification':
                welcome_text += "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...</b>\n\n"
                await update.message.reply_text(welcome_text + "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML)

                self.bot_mode = 'notification'
                self.bot_running = True
                self.start_monitoring_loop()

                await self.send_message(
                    "‚úÖ <b>–†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n"
                    "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö."
                )
                return

            elif last_mode == 'monitoring':
                welcome_text += "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...</b>\n\n"
                await update.message.reply_text(welcome_text + "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML)

                self.bot_mode = 'monitoring'
                self.bot_running = True
                self.start_monitoring_loop()

                await self.send_message(
                    "‚úÖ <b>–†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n"
                    "–°–≤–æ–¥–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                )
                return

        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await update.message.reply_text(welcome_text, reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
        text = update.message.text

        try:
            if text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
                await self._handle_notification_mode(update)
            elif text == "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
                await self._handle_monitoring_mode(update)
            elif text == "üõë –°—Ç–æ–ø":
                await self._handle_stop(update)
            elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
                return await self._handle_add_coin_start(update)
            elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å":
                return await self._handle_remove_coin_start(update)
            elif text == "üìã –°–ø–∏—Å–æ–∫":
                await self._handle_show_list(update)
            elif text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                await self._handle_settings(update)
            elif text == "üìä –û–±—ä—ë–º":
                return await self._handle_volume_setting_start(update)
            elif text == "‚áÑ –°–ø—Ä–µ–¥":
                return await self._handle_spread_setting_start(update)
            elif text == "üìà NATR":
                return await self._handle_natr_setting_start(update)
            elif text == "üö® –ê–ª–µ—Ä—Ç—ã":
                await self._handle_alerts(update)
            elif text == "üîÑ –°–±—Ä–æ—Å":
                await self._handle_reset_settings(update)
            elif text == "‚Ñπ –°—Ç–∞—Ç—É—Å":
                await self._handle_status(update)
            elif text == "üîô –ù–∞–∑–∞–¥":
                await self._handle_back(update)
            else:
                await update.message.reply_text(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                    reply_markup=self.main_keyboard
                )
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self.main_keyboard
            )

        return ConversationHandler.END

    async def _handle_notification_mode(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.bot_running and self.bot_mode == 'notification':
            await update.message.reply_text(
                "‚úÖ –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=self.main_keyboard
            )
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π)
        await self._stop_current_mode()

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ event loop
        await asyncio.sleep(1.0)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if self.monitoring_message_id:
            bot_logger.info(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {self.monitoring_message_id}")
            await self.delete_message(self.monitoring_message_id)
            self.monitoring_message_id = None

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
        self.bot_mode = 'notification'
        self.bot_running = True
        bot_state_manager.set_last_mode('notification')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º loop —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ event loop –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            try:
                current_loop = asyncio.get_running_loop()
                if current_loop.is_closed():
                    bot_logger.debug("Event loop –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                else:
                    await update.message.reply_text(
                        "‚úÖ <b>–†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n"
                        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö.\n"
                        "üöÄ <i>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞</i>",
                        reply_markup=self.main_keyboard,
                        parse_mode=ParseMode.HTML
                    )
            except RuntimeError as loop_error:
                if "event loop" in str(loop_error).lower():
                    bot_logger.debug(f"Event loop –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {type(loop_error).__name__}")
                else:
                    raise
        except Exception as e:
            error_msg = str(e).lower()
            if "event loop" in error_msg or "asyncio" in error_msg:
                bot_logger.debug(f"Event loop –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {type(e).__name__}")
            else:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º loop –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.start_monitoring_loop()

    async def _handle_monitoring_mode(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.bot_running and self.bot_mode == 'monitoring':
            await update.message.reply_text(
                "‚úÖ –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
                reply_markup=self.main_keyboard
            )
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π)
        await self._stop_current_mode()

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ event loop
        await asyncio.sleep(1.0)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if self.active_coins:
            for symbol, coin_data in list(self.active_coins.items()):
                if coin_data.get('msg_id'):
                    bot_logger.info(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {symbol}: {coin_data['msg_id']}")
                    await self.delete_message(coin_data['msg_id'])
            self.active_coins.clear()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
        self.bot_mode = 'monitoring'
        self.bot_running = True
        bot_state_manager.set_last_mode('monitoring')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º loop —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ event loop –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            try:
                current_loop = asyncio.get_running_loop()
                if current_loop.is_closed():
                    bot_logger.debug("Event loop –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                else:
                    await update.message.reply_text(
                        "‚úÖ <b>–†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n"
                        "–°–≤–æ–¥–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
                        "üöÄ <i>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞</i>",
                        reply_markup=self.main_keyboard,
                        parse_mode=ParseMode.HTML
                    )
            except RuntimeError as loop_error:
                if "event loop" in str(loop_error).lower():
                    bot_logger.debug(f"Event loop –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {type(loop_error).__name__}")
                else:
                    raise
        except Exception as e:
            error_msg = str(e).lower()
            if "event loop" in error_msg or "asyncio" in error_msg:
                bot_logger.debug(f"Event loop –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {type(e).__name__}")
            else:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º loop –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.start_monitoring_loop()

    async def _handle_stop(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        await self._stop_current_mode()
        await update.message.reply_text(
            "üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>",
            reply_markup=self.main_keyboard,
            parse_mode=ParseMode.HTML
        )

    async def _handle_add_coin_start(self, update: Update):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
        await self._stop_current_mode()
        await update.message.reply_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>BTC</code> –∏–ª–∏ <code>BTC_USDT</code>):",
            reply_markup=self.back_keyboard,
            parse_mode=ParseMode.HTML
        )
        return self.ADDING_COIN

    async def _handle_remove_coin_start(self, update: Update):
        """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
        await self._stop_current_mode()

        if watchlist_manager.size() == 0:
            await update.message.reply_text(
                "‚ùå –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç.",
                reply_markup=self.main_keyboard
            )
            return ConversationHandler.END

        coins_list = ", ".join(sorted(watchlist_manager.get_all())[:10])
        if watchlist_manager.size() > 10:
            coins_list += "..."

        await update.message.reply_text(
            f"‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫: {coins_list}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=self.back_keyboard,
            parse_mode=ParseMode.HTML
        )
        return self.REMOVING_COIN

    async def _handle_volume_setting_start(self, update: Update):
        """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä—ë–º–∞"""
        await self._stop_current_mode()
        current_value = config_manager.get('VOLUME_THRESHOLD')
        await update.message.reply_text(
            f"üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—ë–º–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>${current_value:,}</code>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):",
            reply_markup=self.back_keyboard,
            parse_mode=ParseMode.HTML
        )
        return self.SETTING_VOLUME

    async def _handle_spread_setting_start(self, update: Update):
        """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø—Ä–µ–¥–∞"""
        await self._stop_current_mode()
        current_value = config_manager.get('SPREAD_THRESHOLD')
        await update.message.reply_text(
            f"‚áÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{current_value}%</code>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.2):",
            reply_markup=self.back_keyboard,
            parse_mode=ParseMode.HTML
        )
        return self.SETTING_SPREAD

    async def _handle_natr_setting_start(self, update: Update):
        """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NATR"""
        await self._stop_current_mode()
        current_value = config_manager.get('NATR_THRESHOLD')
        await update.message.reply_text(
            f"üìà <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ NATR</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{current_value}%</code>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.8):",
            reply_markup=self.back_keyboard,
            parse_mode=ParseMode.HTML
        )
        return self.SETTING_NATR

    async def _handle_show_list(self, update: Update):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç"""
        await self._stop_current_mode()

        coins = watchlist_manager.get_all()
        if not coins:
            text = "üìã <b>–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç</b>"
        else:
            sorted_coins = sorted(coins)
            text = f"üìã <b>–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ({len(coins)} –º–æ–Ω–µ—Ç):</b>\n\n"

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 5 –º–æ–Ω–µ—Ç
            for i in range(0, len(sorted_coins), 5):
                batch = sorted_coins[i:i+5]
                text += " ‚Ä¢ ".join(batch) + "\n"

        await update.message.reply_text(text, reply_markup=self.main_keyboard, parse_mode=ParseMode.HTML)

    async def _handle_settings(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await self._stop_current_mode()

        current_settings = (
            "‚öô <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n\n"
            f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º: <code>${config_manager.get('VOLUME_THRESHOLD'):,}</code>\n"
            f"‚áÑ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: <code>{config_manager.get('SPREAD_THRESHOLD')}%</code>\n"
            f"üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π NATR: <code>{config_manager.get('NATR_THRESHOLD')}%</code>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )

        await update.message.reply_text(
            current_settings,
            reply_markup=self.settings_keyboard,
            parse_mode=ParseMode.HTML
        )

    async def _handle_status(self, update: Update):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        status_parts = ["‚Ñπ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n"]

        if self.bot_running:
            status_parts.append(f"üü¢ –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ: <b>{self.bot_mode}</b>")
            if self.bot_mode == 'notification':
                status_parts.append(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç: <b>{len(self.active_coins)}</b>")
        else:
            status_parts.append("üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        status_parts.append(f"üìã –ú–æ–Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ: <b>{watchlist_manager.size()}</b>")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        status_parts.append("\n‚öô <b>–§–∏–ª—å—Ç—Ä—ã:</b>")
        status_parts.append(f"‚Ä¢ –û–±—ä—ë–º: ${config_manager.get('VOLUME_THRESHOLD'):,}")
        status_parts.append(f"‚Ä¢ –°–ø—Ä–µ–¥: {config_manager.get('SPREAD_THRESHOLD')}%")
        status_parts.append(f"‚Ä¢ NATR: {config_manager.get('NATR_THRESHOLD')}%")

        await update.message.reply_text(
            "\n".join(status_parts),
            reply_markup=self.main_keyboard,
            parse_mode=ParseMode.HTML
        )

    async def _handle_alerts(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        await self._stop_current_mode()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤
        stats = advanced_alert_manager.get_alert_stats()
        active_alerts = advanced_alert_manager.get_active_alerts()
        recent_history = advanced_alert_manager.get_alert_history(5)

        alerts_text = f"üö® <b>–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤:</b>\n\n"
        alerts_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        alerts_text += f"‚Ä¢ –í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {stats['total_alerts']}\n"
        alerts_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_alerts']}\n"
        alerts_text += f"‚Ä¢ –û–±—â–∏—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {stats['total_triggers']}\n\n"

        if active_alerts:
            alerts_text += f"üî¥ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã ({len(active_alerts)}):</b>\n"
            for alert in active_alerts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                alerts_text += f"‚Ä¢ {alert['title']} [{alert['severity'].upper()}]\n"
            if len(active_alerts) > 3:
                alerts_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(active_alerts) - 3}\n"
            alerts_text += "\n"

        if recent_history:
            alerts_text += f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è:</b>\n"
            for alert in recent_history:
                time_str = time.strftime("%H:%M", time.localtime(alert['timestamp']))
                alerts_text += f"‚Ä¢ {time_str} - {alert['title']} ({alert['symbol']})\n"
        else:
            alerts_text += f"‚úÖ <b>–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π</b>\n"

        alerts_text += f"\nüí° –ê–ª–µ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"

        await update.message.reply_text(
            alerts_text,
            reply_markup=self.main_keyboard,
            parse_mode=ParseMode.HTML
        )

    async def _handle_reset_settings(self, update: Update):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        await self._stop_current_mode()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        config_manager.set('VOLUME_THRESHOLD', 1000)
        config_manager.set('SPREAD_THRESHOLD', 0.1)
        config_manager.set('NATR_THRESHOLD', 0.5)

        reset_message = (
            "üîÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\n\n"
            f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º: <code>$1,000</code>\n"
            f"‚áÑ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: <code>0.1%</code>\n"
            f"üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π NATR: <code>0.5%</code>"
        )

        await update.message.reply_text(
            reset_message,
            reply_markup=self.main_keyboard,
            parse_mode=ParseMode.HTML
        )

    async def _handle_back(self, update: Update):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await update.message.reply_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=self.main_keyboard
        )

    # Handlers –¥–ª—è ConversationHandler
    async def add_coin_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
        text = update.message.text.strip()

        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_back(update)
            return ConversationHandler.END

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª
        symbol = text.upper().replace("_USDT", "").replace("USDT", "")

        if not symbol or len(symbol) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=self.back_keyboard
            )
            return self.ADDING_COIN

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ
        if watchlist_manager.contains(symbol):
            await update.message.reply_text(
                f"‚ö† <b>{symbol}</b> —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
                reply_markup=self.main_keyboard,
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã
        await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã...")

        try:
            coin_data = await api_client.get_coin_data(symbol)

            if coin_data:
                watchlist_manager.add(symbol)
                await update.message.reply_text(
                    f"‚úÖ <b>{symbol}_USDT</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
                    f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${coin_data['price']:.6f}\n"
                    f"üìä 1–º –æ–±—ä—ë–º: ${coin_data['volume']:,.2f}\n"
                    f"üîÑ 1–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {coin_data['change']:+.2f}%\n"
                    f"‚áÑ –°–ø—Ä–µ–¥: {coin_data['spread']:.2f}%",
                    reply_markup=self.main_keyboard,
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    f"‚ùå <b>{symbol}_USDT</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.",
                    reply_markup=self.main_keyboard,
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–Ω–µ—Ç—ã {symbol}: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ <b>{symbol}</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.main_keyboard,
                parse_mode=ParseMode.HTML
            )

        return ConversationHandler.END

    async def remove_coin_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
        text = update.message.text.strip()

        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_back(update)
            return ConversationHandler.END

        symbol = text.upper().replace("_USDT", "").replace("USDT", "")

        if watchlist_manager.remove(symbol):
            await update.message.reply_text(
                f"‚úÖ <b>{symbol}</b> —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
                reply_markup=self.main_keyboard,
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                f"‚ùå <b>{symbol}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ.",
                reply_markup=self.main_keyboard,
                parse_mode=ParseMode.HTML
            )

        return ConversationHandler.END

    async def volume_setting_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä—ë–º–∞"""
        text = update.message.text.strip()

        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_settings(update)
            return ConversationHandler.END

        try:
            value = int(text)
            if value < 100:
                await update.message.reply_text(
                    "‚ùå –û–±—ä—ë–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ $100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=self.back_keyboard
                )
                return self.SETTING_VOLUME

            config_manager.set('VOLUME_THRESHOLD', value)
            await update.message.reply_text(
                f"‚úÖ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> ${value:,}",
                reply_markup=self.main_keyboard,
                parse_mode=ParseMode.HTML
            )
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=self.back_keyboard
            )
            return self.SETTING_VOLUME

        return ConversationHandler.END

    async def spread_setting_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø—Ä–µ–¥–∞"""
        text = update.message.text.strip()

        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_settings(update)
            return ConversationHandler.END

        try:
            value = float(text)
            if value < 0 or value > 10:
                await update.message.reply_text(
                    "‚ùå –°–ø—Ä–µ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=self.back_keyboard
                )
                return self.SETTING_SPREAD

            config_manager.set('SPREAD_THRESHOLD', value)
            await update.message.reply_text(
                f"‚úÖ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {value}%",
                reply_markup=self.main_keyboard,
                parse_mode=ParseMode.HTML
            )
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=self.back_keyboard
            )
            return self.SETTING_SPREAD

        return ConversationHandler.END

    async def natr_setting_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NATR"""
        text = update.message.text.strip()

        if text == "üîô –ù–∞–∑–∞–¥":
            await self._handle_settings(update)
            return ConversationHandler.END

        try:
            value = float(text)
            if value < 0 or value > 20:
                await update.message.reply_text(
                    "‚ùå NATR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 20%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=self.back_keyboard
                )
                return self.SETTING_NATR

            config_manager.set('NATR_THRESHOLD', value)
            await update.message.reply_text(
                f"‚úÖ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π NATR —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {value}%",
                reply_markup=self.main_keyboard,
                parse_mode=ParseMode.HTML
            )
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=self.back_keyboard
            )
            return self.SETTING_NATR

        return ConversationHandler.END

    def setup_application(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        from telegram.error import Conflict, NetworkError, TimedOut

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        builder = Application.builder()
        builder.token(self.token)
        builder.connection_pool_size(8)
        builder.pool_timeout(20.0)
        builder.read_timeout(30.0)
        builder.write_timeout(30.0)

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        async def error_handler(update, context):
            error = context.error

            if isinstance(error, Conflict):
                bot_logger.warning("–ö–æ–Ω—Ñ–ª–∏–∫—Ç Telegram API - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
                await asyncio.sleep(5)
                return
            elif isinstance(error, (NetworkError, TimedOut)):
                bot_logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Telegram: {error}")
                await asyncio.sleep(2)
                return
            else:
                bot_logger.error(f"–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {error}", exc_info=True)

        self.app = builder.build()
        self.app.add_error_handler(error_handler)

        # –°–æ–∑–¥–∞–µ–º ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.TEXT & ~filters.COMMAND, self.button_handler)
            ],
            states={
                self.ADDING_COIN: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.add_coin_handler)
                ],
                self.REMOVING_COIN: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.remove_coin_handler)
                ],
                self.SETTING_VOLUME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.volume_setting_handler)
                ],
                self.SETTING_SPREAD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.spread_setting_handler)
                ],
                self.SETTING_NATR: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.natr_setting_handler)
                ]
            },
            fallbacks=[
                CommandHandler("start", self.start_handler),
                MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥$"), self._handle_back)
            ],
            per_message=False
        )

        # –î–æ–±–∞–≤–ª—è–µ–º handlers
        self.app.add_handler(CommandHandler("start", self.start_handler))
        self.app.add_handler(conv_handler)

        return self.app

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = TradingTelegramBot()