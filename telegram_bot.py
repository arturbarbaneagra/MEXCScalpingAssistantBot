
#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–í–µ—Ä—Å–∏—è: 2.1
"""

import asyncio
import time
import json
from datetime import datetime
from typing import Dict, Any, Optional, List
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

from logger import bot_logger
from config import config_manager
from watchlist_manager import watchlist_manager

class TradingTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    def __init__(self):
        self.bot_running = False
        self.bot_mode = None
        self.active_coins = {}
        self.monitoring_message_id = None
        self.application = None
        
    def setup_application(self) -> Application:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            token = config_manager.get('telegram_token')
            if not token:
                raise ValueError("TELEGRAM_TOKEN not found")
                
            self.application = Application.builder().token(token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            
            bot_logger.info("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            return self.application
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            raise
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            welcome_message = """
ü§ñ *–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç v2.1*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
‚Ä¢ /help - –ü–æ–º–æ—â—å

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ä—ã–Ω–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.
            """
            
            await update.message.reply_text(
                welcome_message, 
                parse_mode='Markdown'
            )
            
            self.bot_running = True
            bot_logger.info(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            status_info = f"""
üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ v2.1*

ü§ñ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if self.bot_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üìà –†–µ–∂–∏–º: {self.bot_mode or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üí∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç: {len(self.active_coins)}
üìã –†–∞–∑–º–µ—Ä watchlist: {watchlist_manager.size()}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
            """
            
            await update.message.reply_text(
                status_info,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            help_text = """
üÜò *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

*–ö–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–§—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–ø—Ä–µ–¥–æ–≤

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞.
            """
            
            await update.message.reply_text(
                help_text,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")
    
    async def send_notification(self, message: str, parse_mode: str = 'Markdown'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        try:
            if not self.application or not self.application.bot:
                bot_logger.warning("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                return False
                
            chat_id = config_manager.get('telegram_chat_id')
            if not chat_id:
                bot_logger.error("TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode=parse_mode
            )
            
            return True
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_bot = TradingTelegramBot()
