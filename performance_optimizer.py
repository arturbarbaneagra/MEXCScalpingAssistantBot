
import time
import asyncio
from typing import Dict, Any
from logger import bot_logger
from config import config_manager
from metrics_manager import metrics_manager
from advanced_alerts import advanced_alert_manager

class PerformanceOptimizer:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.last_optimization = 0
        self.optimization_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.performance_history = []
        self.auto_optimization_enabled = True
        self.optimization_stats = {
            'total_optimizations': 0,
            'successful_optimizations': 0,
            'last_optimization_time': 0,
            'performance_improvements': []
        }
        
    async def optimize(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω)"""
        try:
            await self.auto_optimize()
            self.optimization_stats['successful_optimizations'] += 1
            bot_logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            bot_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        finally:
            self.optimization_stats['total_optimizations'] += 1
            self.optimization_stats['last_optimization_time'] = time.time()
        
    async def auto_optimize(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫"""
        current_time = time.time()
        
        if not self.auto_optimization_enabled:
            return
            
        if current_time - self.last_optimization < self.optimization_interval:
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics = metrics_manager.get_summary()
            api_stats = metrics.get('api_stats', {})
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            performance_data = self._analyze_performance(api_stats)
            
            if performance_data['needs_optimization']:
                await self._apply_optimizations(performance_data)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.performance_history.append({
                'timestamp': current_time,
                'metrics': performance_data,
                'actions_taken': performance_data.get('actions_taken', [])
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.performance_history) > 100:
                self.performance_history = self.performance_history[-50:]
            
            self.last_optimization = current_time
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
    
    def _analyze_performance(self, api_stats: Dict) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        analysis = {
            'needs_optimization': False,
            'avg_response_time': 0,
            'slow_endpoints': [],
            'actions_taken': [],
            'performance_score': 100
        }
        
        if not api_stats:
            return analysis
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∞
        avg_response_times = []
        slow_endpoints = []
        
        for endpoint, stats in api_stats.items():
            avg_time = stats.get('avg_response_time', 0)
            if avg_time > 0:
                avg_response_times.append(avg_time)
                if avg_time > 1.0:  # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ endpoint'—ã
                    slow_endpoints.append({
                        'endpoint': endpoint,
                        'avg_time': avg_time,
                        'requests': stats.get('total_requests', 0)
                    })
        
        if avg_response_times:
            overall_avg = sum(avg_response_times) / len(avg_response_times)
            analysis['avg_response_time'] = overall_avg
            analysis['slow_endpoints'] = slow_endpoints
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if overall_avg > 0.8 or len(slow_endpoints) > 0:
                analysis['needs_optimization'] = True
                
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            analysis['performance_score'] = self._calculate_performance_score(overall_avg)
        
        return analysis
    
    async def _apply_optimizations(self, performance_data: Dict):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        actions_taken = []
        
        try:
            avg_time = performance_data['avg_response_time']
            
            # –ï—Å–ª–∏ API –º–µ–¥–ª–µ–Ω–Ω—ã–π - —Å–Ω–∏–∂–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
            if avg_time > 1.0:
                current_batch_size = config_manager.get('CHECK_BATCH_SIZE')
                if current_batch_size > 8:
                    new_batch_size = max(8, current_batch_size - 2)
                    config_manager.set('CHECK_BATCH_SIZE', new_batch_size)
                    actions_taken.append(f"–£–º–µ–Ω—å—à–µ–Ω batch_size –¥–æ {new_batch_size}")
                    
                current_interval = config_manager.get('CHECK_BATCH_INTERVAL')
                if current_interval < 1.0:
                    new_interval = min(1.2, current_interval + 0.2)
                    config_manager.set('CHECK_BATCH_INTERVAL', new_interval)
                    actions_taken.append(f"–£–≤–µ–ª–∏—á–µ–Ω interval –¥–æ {new_interval}")
                
                bot_logger.info(f"üîß –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (–º–µ–¥–ª–µ–Ω–Ω—ã–π API): {', '.join(actions_taken)}")
            
            # –ï—Å–ª–∏ API –±—ã—Å—Ç—Ä—ã–π - –º–æ–∂–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É
            elif avg_time < 0.3:
                current_batch_size = config_manager.get('CHECK_BATCH_SIZE')
                if current_batch_size < 20:
                    new_batch_size = min(20, current_batch_size + 1)
                    config_manager.set('CHECK_BATCH_SIZE', new_batch_size)
                    actions_taken.append(f"–£–≤–µ–ª–∏—á–µ–Ω batch_size –¥–æ {new_batch_size}")
                    
                current_interval = config_manager.get('CHECK_BATCH_INTERVAL')
                if current_interval > 0.3:
                    new_interval = max(0.3, current_interval - 0.05)
                    config_manager.set('CHECK_BATCH_INTERVAL', new_interval)
                    actions_taken.append(f"–£–º–µ–Ω—å—à–µ–Ω interval –¥–æ {new_interval}")
                
                if actions_taken:
                    bot_logger.info(f"‚ö° –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (–±—ã—Å—Ç—Ä—ã–π API): {', '.join(actions_taken)}")
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–µ—à–∞
            cache_optimizations = await self._optimize_cache()
            actions_taken.extend(cache_optimizations)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ performance_data
            performance_data['actions_taken'] = actions_taken
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if actions_taken:
                self.optimization_stats['performance_improvements'].append({
                    'timestamp': time.time(),
                    'actions': actions_taken,
                    'performance_before': performance_data['avg_response_time']
                })
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {e}")
    
    async def _optimize_cache(self) -> list:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∞"""
        actions = []
        
        try:
            from cache_manager import cache_manager
            cache_stats = cache_manager.get_stats()
            
            # –ï—Å–ª–∏ –∫–µ—à –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–º–µ–Ω—å—à–∞–µ–º TTL
            if cache_stats.get('total_entries', 0) > 1000:
                current_ttl = config_manager.get('CACHE_TTL_SECONDS', 5)
                if current_ttl > 3:
                    new_ttl = max(3, current_ttl - 1)
                    config_manager.set('CACHE_TTL_SECONDS', new_ttl)
                    actions.append(f"–£–º–µ–Ω—å—à–µ–Ω TTL –∫–µ—à–∞ –¥–æ {new_ttl}—Å")
            
            # –ï—Å–ª–∏ –∫–µ—à –º–∞–ª–æ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º TTL
            elif cache_stats.get('total_entries', 0) < 100:
                current_ttl = config_manager.get('CACHE_TTL_SECONDS', 5)
                if current_ttl < 10:
                    new_ttl = min(10, current_ttl + 1)
                    config_manager.set('CACHE_TTL_SECONDS', new_ttl)
                    actions.append(f"–£–≤–µ–ª–∏—á–µ–Ω TTL –∫–µ—à–∞ –¥–æ {new_ttl}—Å")
            
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞: {e}")
        
        return actions
    
    def _calculate_performance_score(self, avg_response_time: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (0-100)"""
        if avg_response_time <= 0.2:
            return 100.0
        elif avg_response_time <= 0.5:
            return 90.0
        elif avg_response_time <= 1.0:
            return 75.0
        elif avg_response_time <= 2.0:
            return 50.0
        elif avg_response_time <= 3.0:
            return 25.0
        else:
            return 10.0
    
    def get_performance_score(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            metrics = metrics_manager.get_summary()
            api_stats = metrics.get('api_stats', {})
            
            if not api_stats:
                return 100.0
            
            # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            total_time = 0
            total_requests = 0
            
            for stats in api_stats.values():
                avg_time = stats.get('avg_response_time', 0)
                requests = stats.get('total_requests', 0)
                total_time += avg_time * requests
                total_requests += requests
            
            if total_requests == 0:
                return 100.0
            
            avg_response_time = total_time / total_requests
            return self._calculate_performance_score(avg_response_time)
                
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ performance score: {e}")
            return 50.0
    
    def get_optimization_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
        return {
            **self.optimization_stats,
            'optimization_enabled': self.auto_optimization_enabled,
            'recent_history': self.performance_history[-10:] if self.performance_history else [],
            'current_score': self.get_performance_score()
        }
    
    def enable_auto_optimization(self):
        """–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"""
        self.auto_optimization_enabled = True
        bot_logger.info("‚úÖ –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞")
    
    def disable_auto_optimization(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"""
        self.auto_optimization_enabled = False
        bot_logger.info("‚è∏Ô∏è –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    async def force_optimization(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"""
        self.last_optimization = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        await self.auto_optimize()
        bot_logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
performance_optimizer = PerformanceOptimizer()
