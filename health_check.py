import time
import psutil
import asyncio
from typing import Dict, Any
from logger import bot_logger
from config import config_manager
from watchlist_manager import watchlist_manager
from api_client import api_client
from metrics_manager import metrics_manager
from cache_manager import cache_manager
from alert_manager import alert_manager
from circuit_breaker import api_circuit_breakers

class HealthChecker:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self):
        self.last_check_time = 0
        self.check_interval = 30  # —Å–µ–∫—É–Ω–¥

    def get_system_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            return {
                'cpu_percent': psutil.cpu_percent(interval=1),
                'memory_percent': psutil.virtual_memory().percent,
                'disk_percent': psutil.disk_usage('/').percent,
                'uptime': time.time() - psutil.boot_time(),
                'python_memory_mb': psutil.Process().memory_info().rss / 1024 / 1024
            }
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return {
                'cpu_percent': 0,
                'memory_percent': 0,
                'disk_percent': 0,
                'uptime': 0,
                'python_memory_mb': 0,
                'error': str(e)
            }

    def get_bot_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            from telegram_bot import telegram_bot
            return {
                'bot_running': telegram_bot.bot_running,
                'bot_mode': telegram_bot.bot_mode,
                'active_coins_count': len(telegram_bot.active_coins),
                'watchlist_size': watchlist_manager.size(),
                'monitoring_message_id': telegram_bot.monitoring_message_id
            }
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {e}")
            return {
                'bot_running': False,
                'bot_mode': None,
                'active_coins_count': 0,
                'watchlist_size': 0,
                'error': str(e)
            }

    async def check_api_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ API"""
        health_status = {
            'api_accessible': False,
            'response_time': 0,
            'circuit_breakers': {},
            'last_successful_request': 0
        }

        try:
            start_time = time.time()
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            result = await api_client._make_request("/ping")
            health_status['response_time'] = time.time() - start_time
            health_status['api_accessible'] = result is not None

            # –°—Ç–∞—Ç—É—Å Circuit Breaker'–æ–≤
            for name, cb in api_circuit_breakers.items():
                health_status['circuit_breakers'][name] = cb.get_stats()

        except Exception as e:
            bot_logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            health_status['error'] = str(e)

        return health_status

    async def run_diagnostics(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
        diagnostics = {
            'timestamp': time.time(),
            'version': '2.1',
            'status': 'healthy'
        }

        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        system_info = self.get_system_info()
        diagnostics['system'] = system_info

        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        bot_status = self.get_bot_status()
        diagnostics['bot'] = bot_status

        # API –∑–¥–æ—Ä–æ–≤—å–µ
        api_health = await self.check_api_health()
        diagnostics['api'] = api_health

        # –ú–µ—Ç—Ä–∏–∫–∏
        diagnostics['metrics'] = metrics_manager.get_summary()

        # –ö–µ—à
        diagnostics['cache'] = cache_manager.get_stats()

        # –ê–ª–µ—Ä—Ç—ã
        alerts = alert_manager.get_alert_summary()
        diagnostics['alerts'] = alerts

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        diagnostics['config'] = {
            'volume_threshold': config_manager.get('VOLUME_THRESHOLD'),
            'spread_threshold': config_manager.get('SPREAD_THRESHOLD'),
            'natr_threshold': config_manager.get('NATR_THRESHOLD'),
            'batch_size': config_manager.get('CHECK_BATCH_SIZE')
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if alerts['active_count'] > 0:
            critical_alerts = [a for a in alerts['active_alerts'] if a.get('severity') == 'critical']
            if critical_alerts:
                diagnostics['status'] = 'critical'
            else:
                diagnostics['status'] = 'warning'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        if system_info.get('memory_percent', 0) > 90 or system_info.get('cpu_percent', 0) > 90:
            diagnostics['status'] = 'critical'
        elif system_info.get('memory_percent', 0) > 80 or system_info.get('cpu_percent', 0) > 80:
            if diagnostics['status'] == 'healthy':
                diagnostics['status'] = 'warning'

        return diagnostics

    async def full_health_check(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if current_time - self.last_check_time < self.check_interval:
            return {'status': 'cached', 'message': '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}

        try:
            diagnostics = await self.run_diagnostics()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            system_alerts = alert_manager.check_system_alerts(diagnostics['system'])
            api_alerts = alert_manager.check_api_alerts(diagnostics['metrics'].get('api_stats', {}))

            all_alerts = system_alerts + api_alerts
            if all_alerts:
                alert_manager.process_alerts(all_alerts)

            self.last_check_time = current_time
            return diagnostics

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return {
                'status': 'error',
                'error': str(e),
                'timestamp': current_time,
                'version': '2.1'
            }

    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = {
            'last_check_time': self.last_check_time,
            'check_interval': self.check_interval
        }
        return stats

    async def start_health_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è"""
        while True:
            try:
                diagnostics = await self.run_diagnostics()

                # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–∑–¥–æ—Ä–æ–≤–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
                if diagnostics['status'] in ['warning', 'critical']:
                    bot_logger.warning(f"üè• –ü—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º —Å–∏—Å—Ç–µ–º—ã: {diagnostics['status']}")

                    # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if diagnostics['status'] == 'critical':
                        try:
                            from telegram_bot import telegram_bot
                            if telegram_bot.bot_running:
                                await telegram_bot.send_message(
                                    "üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´</b>\n"
                                    "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é."
                                )
                        except Exception as e:
                            bot_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
                await asyncio.sleep(60)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
health_checker = HealthChecker()