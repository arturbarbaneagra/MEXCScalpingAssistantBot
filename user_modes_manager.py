"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –∑–∞–ø—É—Å–∫–∞—Ç—å/–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import time
from typing import Dict, Optional, Any, List
from logger import bot_logger
from user_manager import user_manager


class PersonalBotMode:
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, chat_id: str, bot_instance):
        self.chat_id = chat_id
        self.bot = bot_instance
        self.running = False
        self.start_time = 0
        self.active_coins = {}
        self.monitoring_message_id = None
        self.task = None
        
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"""
        if self.running:
            return False
            
        user_watchlist = user_manager.get_user_watchlist(self.chat_id)
        if not user_watchlist:
            return False
            
        self.running = True
        self.start_time = time.time()
        self.active_coins.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        initial_text = f"üîÑ <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω</b>\n–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è {len(user_watchlist)} –º–æ–Ω–µ—Ç"
        self.monitoring_message_id = await self.bot._send_personal_message(self.chat_id, initial_text)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª
        self.task = asyncio.create_task(self._personal_loop())
        
        bot_logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.chat_id}")
        return True
        
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"""
        if not self.running:
            return False
            
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
        if self.task and not self.task.done():
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
                
        # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for coin_data in list(self.active_coins.values()):
            msg_id = coin_data.get('msg_id')
            if msg_id:
                await self.bot._delete_personal_message(self.chat_id, msg_id)
                
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if self.monitoring_message_id:
            await self.bot._delete_personal_message(self.chat_id, self.monitoring_message_id)
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        stop_text = "üõë <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>"
        await self.bot._send_personal_message(self.chat_id, stop_text)
        
        self.active_coins.clear()
        self.monitoring_message_id = None
        
        bot_logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.chat_id}")
        return True
        
    async def _personal_loop(self):
        """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cycle_count = 0
        
        while self.running:
            try:
                cycle_count += 1
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_watchlist = user_manager.get_user_watchlist(self.chat_id)
                if not user_watchlist:
                    await asyncio.sleep(5)
                    continue
                    
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç
                results, failed_coins = await self.bot._fetch_personal_data(user_watchlist, self.chat_id)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                for coin_data in results:
                    if not self.running:
                        break
                        
                    symbol = coin_data['symbol']
                    await self._process_personal_notification(symbol, coin_data)
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if results:
                    report = self._format_personal_report(results, failed_coins)
                    if self.monitoring_message_id:
                        await self.bot._edit_personal_message(self.chat_id, self.monitoring_message_id, report)
                        
                await asyncio.sleep(10)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º —Ü–∏–∫–ª–µ {self.chat_id}: {e}")
                await asyncio.sleep(2)
                
    async def _process_personal_notification(self, symbol: str, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        now = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        user_config = user_manager.get_user_config(self.chat_id)
        vol_threshold = user_config.get('VOLUME_THRESHOLD', 1000)
        spread_threshold = user_config.get('SPREAD_THRESHOLD', 0.1)
        natr_threshold = user_config.get('NATR_THRESHOLD', 0.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º
        is_active = (
            data.get('volume', 0) >= vol_threshold and
            data.get('spread', 0) >= spread_threshold and
            data.get('natr', 0) >= natr_threshold and
            data.get('trades', 0) > 0
        )
        
        if is_active:
            if symbol not in self.active_coins:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await self._create_personal_notification(symbol, data, now)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
                await self._update_personal_notification(symbol, data, now)
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –±—ã–ª–∞
            if symbol in self.active_coins:
                coin_info = self.active_coins[symbol]
                if now - coin_info['last_active'] > 60:  # –¢–∞–π–º–∞—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    await self._end_personal_activity(symbol, now)
                    
    async def _create_personal_notification(self, symbol: str, data: Dict, now: float):
        """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        message = (
            f"üö® <b>{symbol}_USDT –∞–∫—Ç–∏–≤–µ–Ω (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ)</b>\n"
            f"üîÑ –ò–∑–º: {data['change']:+.2f}%  üîÅ –°–¥–µ–ª–æ–∫: {data['trades']}\n"
            f"üìä –û–±—ä—ë–º: ${data['volume']:,.2f}  NATR: {data['natr']:.2f}%\n"
            f"‚áÑ –°–ø—Ä–µ–¥: {data['spread']:.2f}%"
        )
        
        msg_id = await self.bot._send_personal_message(self.chat_id, message)
        
        if msg_id:
            self.active_coins[symbol] = {
                'start': now,
                'last_active': now,
                'data': data.copy(),
                'msg_id': msg_id
            }
            
    async def _update_personal_notification(self, symbol: str, data: Dict, now: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        coin_info = self.active_coins[symbol]
        coin_info['last_active'] = now
        coin_info['data'] = data
        
        msg_id = coin_info.get('msg_id')
        if msg_id:
            new_message = (
                f"üö® <b>{symbol}_USDT –∞–∫—Ç–∏–≤–µ–Ω (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ)</b>\n"
                f"üîÑ –ò–∑–º: {data['change']:+.2f}%  üîÅ –°–¥–µ–ª–æ–∫: {data['trades']}\n"
                f"üìä –û–±—ä—ë–º: ${data['volume']:,.2f}  NATR: {data['natr']:.2f}%\n"
                f"‚áÑ –°–ø—Ä–µ–¥: {data['spread']:.2f}%"
            )
            await self.bot._edit_personal_message(self.chat_id, msg_id, new_message)
            
    async def _end_personal_activity(self, symbol: str, end_time: float):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        if symbol not in self.active_coins:
            return
            
        coin_info = self.active_coins[symbol]
        duration = end_time - coin_info['start']
        
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        msg_id = coin_info.get('msg_id')
        if msg_id:
            await self.bot._delete_personal_message(self.chat_id, msg_id)
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ >= 60 —Å–µ–∫—É–Ω–¥
        if duration >= 60:
            duration_min = int(duration // 60)
            duration_sec = int(duration % 60)
            end_message = (
                f"‚úÖ <b>{symbol}_USDT –∑–∞–≤–µ—Ä—à–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_min} –º–∏–Ω {duration_sec} —Å–µ–∫"
            )
            await self.bot._send_personal_message(self.chat_id, end_message)
            
        del self.active_coins[symbol]
        
    def _format_personal_report(self, results: List[Dict], failed_coins: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        results.sort(key=lambda x: x['volume'], reverse=True)
        
        parts = ["<b>üìä –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n"]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        user_config = user_manager.get_user_config(self.chat_id)
        vol_thresh = user_config.get('VOLUME_THRESHOLD', 1000)
        spread_thresh = user_config.get('SPREAD_THRESHOLD', 0.1)
        natr_thresh = user_config.get('NATR_THRESHOLD', 0.5)
        
        parts.append(
            f"<i>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã: 1–º –æ–±–æ—Ä–æ—Ç ‚â•${vol_thresh:,}, "
            f"–°–ø—Ä–µ–¥ ‚â•{spread_thresh}%, NATR ‚â•{natr_thresh}%</i>\n"
        )
        
        if failed_coins:
            parts.append(f"‚ö† <i>–û—à–∏–±–∫–∏: {', '.join(failed_coins[:3])}</i>\n")
            
        active_coins = [r for r in results if r.get('active', False)]
        if active_coins:
            parts.append("<b>üü¢ –í–ê–®–ò –ê–ö–¢–ò–í–ù–´–ï:</b>")
            for coin in active_coins[:8]:
                parts.append(
                    f"‚Ä¢ <b>{coin['symbol']}</b> "
                    f"${coin['volume']:,.0f} | {coin['change']:+.1f}% | "
                    f"T:{coin['trades']} | S:{coin['spread']:.2f}% | N:{coin['natr']:.2f}%"
                )
            parts.append("")
            
        inactive_coins = [r for r in results if not r.get('active', False)]
        if inactive_coins:
            parts.append("<b>üî¥ –ù–ï–ê–ö–¢–ò–í–ù–´–ï (—Ç–æ–ø –ø–æ –æ–±—ä—ë–º—É):</b>")
            for coin in inactive_coins[:5]:
                parts.append(
                    f"‚Ä¢ <b>{coin['symbol']}</b> "
                    f"${coin['volume']:,.0f} | {coin['change']:+.1f}% | "
                    f"T:{coin['trades']} | S:{coin['spread']:.2f}% | N:{coin['natr']:.2f}%"
                )
                
        parts.append(f"\nüìà –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_coins)}/{len(results)}")
        
        return "\n".join(parts)


class UserModesManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.personal_modes: Dict[str, PersonalBotMode] = {}
        
    async def start_personal_mode(self, chat_id: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id_str = str(chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user_manager.is_admin(chat_id) and not user_manager.is_user_approved(chat_id):
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
        user_watchlist = user_manager.get_user_watchlist(chat_id_str)
        if not user_watchlist:
            return False
            
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –µ—Å—Ç—å
        if chat_id_str in self.personal_modes:
            await self.stop_personal_mode(chat_id_str)
            
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        personal_mode = PersonalBotMode(chat_id_str, self.bot)
        success = await personal_mode.start()
        
        if success:
            self.personal_modes[chat_id_str] = personal_mode
            bot_logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω –¥–ª—è {chat_id_str}")
            
        return success
        
    async def stop_personal_mode(self, chat_id: str) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id_str = str(chat_id)
        
        if chat_id_str not in self.personal_modes:
            return False
            
        personal_mode = self.personal_modes[chat_id_str]
        success = await personal_mode.stop()
        
        if success:
            del self.personal_modes[chat_id_str]
            bot_logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {chat_id_str}")
            
        return success
        
    def is_personal_mode_running(self, chat_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id_str = str(chat_id)
        if chat_id_str in self.personal_modes:
            return self.personal_modes[chat_id_str].running
        return False
        
    def get_personal_mode_stats(self, chat_id: str) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        chat_id_str = str(chat_id)
        if chat_id_str in self.personal_modes:
            mode = self.personal_modes[chat_id_str]
            return {
                'running': mode.running,
                'start_time': mode.start_time,
                'active_coins': len(mode.active_coins),
                'uptime': time.time() - mode.start_time if mode.running else 0
            }
        return {'running': False}
        
    def get_all_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        stats = {
            'total_users': len(self.personal_modes),
            'running_modes': sum(1 for mode in self.personal_modes.values() if mode.running),
            'users': {}
        }
        
        for chat_id, mode in self.personal_modes.items():
            stats['users'][chat_id] = {
                'running': mode.running,
                'active_coins': len(mode.active_coins),
                'uptime': time.time() - mode.start_time if mode.running else 0
            }
            
        return stats
        
    async def stop_all_personal_modes(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã"""
        for chat_id in list(self.personal_modes.keys()):
            await self.stop_personal_mode(chat_id)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ telegram_bot.py)
user_modes_manager = None