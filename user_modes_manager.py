
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã
"""

import asyncio
import time
from typing import Dict, Optional, Any
from logger import bot_logger
from user_manager import user_manager


class UserMode:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    def __init__(self, user_id: str, bot_instance):
        self.user_id = user_id
        self.bot = bot_instance
        self.running = False
        self.task = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞"""
        if self.running:
            return False
        self.running = True
        return True
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞"""
        if not self.running:
            return False
            
        self.running = False
        
        if self.task and not self.task.done():
            self.task.cancel()
            try:
                await asyncio.wait_for(self.task, timeout=2.0)
            except (asyncio.CancelledError, asyncio.TimeoutError):
                pass
                
        self.task = None
        return True
        
    def get_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∂–∏–º–∞"""
        return {
            'user_id': self.user_id,
            'running': self.running,
            'mode_type': self.__class__.__name__
        }


class UserNotificationMode(UserMode):
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, user_id: str, bot_instance):
        super().__init__(user_id, bot_instance)
        self.active_coins = {}
        
    async def start(self):
        if not await super().start():
            return False
            
        bot_logger.info(f"üîî –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        self.task = asyncio.create_task(self._notification_loop())
        return True
        
    async def _notification_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        from api_client import api_client
        from config import config_manager
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                if user_manager.is_admin(self.user_id):
                    # –î–ª—è –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    from watchlist_manager import watchlist_manager
                    user_watchlist = list(watchlist_manager.get_all())
                else:
                    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    user_watchlist = user_manager.get_user_watchlist(self.user_id)
                
                if not user_watchlist:
                    await asyncio.sleep(30)
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_manager.is_admin(self.user_id):
                    # –î–ª—è –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    from config import config_manager
                    user_config = {
                        'VOLUME_THRESHOLD': config_manager.get('VOLUME_THRESHOLD'),
                        'SPREAD_THRESHOLD': config_manager.get('SPREAD_THRESHOLD'),
                        'NATR_THRESHOLD': config_manager.get('NATR_THRESHOLD')
                    }
                else:
                    user_config = user_manager.get_user_config(self.user_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–æ–Ω–µ—Ç—É
                for symbol in user_watchlist:
                    if not self.running:
                        break
                        
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
                        ticker_data = await api_client.get_ticker_data(symbol)
                        if not ticker_data:
                            continue
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                        volume = float(ticker_data.get('quoteVolume', 0))
                        price = float(ticker_data.get('lastPrice', 0))
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥ –∏ NATR
                        try:
                            from data_validator import data_validator
                            spread = data_validator.calculate_spread(ticker_data)
                            natr = await data_validator.calculate_natr(symbol)
                        except Exception as e:
                            bot_logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")
                            spread = 0.0
                            natr = 0.0
                        
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç coin_data –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        coin_data = {
                            'symbol': symbol,
                            'price': price,
                            'volume': volume,
                            'spread': spread,
                            'natr': natr
                        }
                        
                        is_active = (
                            volume >= user_config.get('VOLUME_THRESHOLD', 1000) and
                            spread >= user_config.get('SPREAD_THRESHOLD', 0.1) and
                            natr >= user_config.get('NATR_THRESHOLD', 0.5)
                        )
                        
                        if is_active and symbol not in self.active_coins:
                            # –ù–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–Ω–µ—Ç–∞
                            self.active_coins[symbol] = {
                                'start_time': time.time(),
                                'last_active': time.time(),
                                'initial_price': coin_data.get('price', 0)
                            }
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            await self._send_activation_alert(symbol, coin_data)
                            
                        elif is_active and symbol in self.active_coins:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                            self.active_coins[symbol]['last_active'] = time.time()
                            
                        elif not is_active and symbol in self.active_coins:
                            # –ú–æ–Ω–µ—Ç–∞ —Å—Ç–∞–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
                            await self._send_deactivation_alert(symbol, coin_data)
                            del self.active_coins[symbol]
                            
                    except Exception as e:
                        bot_logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {symbol} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}: {e}")
                        
                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}: {e}")
                await asyncio.sleep(5)
                
    async def _send_activation_alert(self, symbol: str, coin_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç—ã"""
        try:
            alert_text = (
                f"üî• <b>{symbol} —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π!</b>\n\n"
                f"üí∞ –¶–µ–Ω–∞: <code>${coin_data.get('price', 0):.6f}</code>\n"
                f"üìä –û–±—ä—ë–º: <code>${coin_data.get('volume', 0):,.0f}</code>\n"
                f"‚áÑ –°–ø—Ä–µ–¥: <code>{coin_data.get('spread', 0):.2f}%</code>\n"
                f"üìà NATR: <code>{coin_data.get('natr', 0):.2f}%</code>"
            )
            
            await self.bot.app.bot.send_message(
                chat_id=self.user_id,
                text=alert_text,
                parse_mode="HTML"
            )
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.user_id}: {e}")
            
    async def _send_deactivation_alert(self, symbol: str, coin_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç—ã"""
        try:
            duration = time.time() - self.active_coins[symbol]['start_time']
            alert_text = (
                f"‚èπÔ∏è <b>{symbol} –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>\n\n"
                f"üí∞ –¶–µ–Ω–∞: <code>${coin_data.get('price', 0):.6f}</code>\n"
                f"‚è±Ô∏è –ë—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞: <code>{duration/60:.1f} –º–∏–Ω—É—Ç</code>"
            )
            
            await self.bot.app.bot.send_message(
                chat_id=self.user_id,
                text=alert_text,
                parse_mode="HTML"
            )
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.user_id}: {e}")
            
    def get_stats(self):
        stats = super().get_stats()
        stats.update({
            'active_coins_count': len(self.active_coins),
            'active_coins': list(self.active_coins.keys())
        })
        return stats


class UserMonitoringMode(UserMode):
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, user_id: str, bot_instance):
        super().__init__(user_id, bot_instance)
        self.monitoring_message_id = None
        
    async def start(self):
        if not await super().start():
            return False
            
        bot_logger.info(f"üìä –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            message = await self.bot.app.bot.send_message(
                chat_id=self.user_id,
                text="üîÑ <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...</b>",
                parse_mode="HTML"
            )
            self.monitoring_message_id = message.message_id
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.user_id}: {e}")
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        self.task = asyncio.create_task(self._monitoring_loop())
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            
        return True
        
    async def stop(self):
        if not await super().stop():
            return False
            
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if self.monitoring_message_id:
            try:
                await self.bot.app.bot.delete_message(
                    chat_id=self.user_id,
                    message_id=self.monitoring_message_id
                )
            except Exception as e:
                bot_logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                
        self.monitoring_message_id = None
        return True
        
    async def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        from api_client import api_client
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                if user_manager.is_admin(self.user_id):
                    # –î–ª—è –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    from watchlist_manager import watchlist_manager
                    user_watchlist = list(watchlist_manager.get_all())
                    empty_message = "‚ùå <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç</b>\n–î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
                else:
                    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    user_watchlist = user_manager.get_user_watchlist(self.user_id)
                    empty_message = "‚ùå <b>–í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç</b>\n–î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
                
                if not user_watchlist:
                    if self.monitoring_message_id:
                        await self._edit_monitoring_message(empty_message)
                    await asyncio.sleep(30)
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç
                results = []
                failed_coins = []
                
                for symbol in user_watchlist:
                    if not self.running:
                        break
                        
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
                        ticker_data = await api_client.get_ticker_data(symbol)
                        if ticker_data:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞
                            coin_data = {
                                'symbol': symbol,
                                'price': float(ticker_data.get('lastPrice', 0)),
                                'volume': float(ticker_data.get('quoteVolume', 0)),
                                'change': float(ticker_data.get('priceChangePercent', 0)),
                                'spread': 0.0,  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
                                'natr': 0.0     # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
                            }
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                            try:
                                from data_validator import data_validator
                                coin_data['spread'] = data_validator.calculate_spread(ticker_data)
                            except Exception:
                                pass
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º NATR
                            try:
                                from data_validator import data_validator
                                coin_data['natr'] = await data_validator.calculate_natr(symbol)
                            except Exception:
                                pass
                            
                            results.append(coin_data)
                        else:
                            failed_coins.append(symbol)
                    except Exception as e:
                        bot_logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
                        failed_coins.append(symbol)
                        
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                if results or failed_coins:
                    report = self._format_monitoring_report(results, failed_coins)
                    if self.monitoring_message_id:
                        await self._edit_monitoring_message(report)
                        
                await asyncio.sleep(15)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}: {e}")
                await asyncio.sleep(5)
                
    async def _edit_monitoring_message(self, text: str):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            await self.bot.app.bot.edit_message_text(
                chat_id=self.user_id,
                message_id=self.monitoring_message_id,
                text=text,
                parse_mode="HTML"
            )
        except Exception as e:
            if "message is not modified" not in str(e).lower():
                bot_logger.debug(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                
    def _format_monitoring_report(self, results: list, failed_coins: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_manager.is_admin(self.user_id):
            # –î–ª—è –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            from config import config_manager
            vol_thresh = config_manager.get('VOLUME_THRESHOLD')
            spread_thresh = config_manager.get('SPREAD_THRESHOLD')
            natr_thresh = config_manager.get('NATR_THRESHOLD')
            title = "<b>üìä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n"
            filters_text = f"<i>–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: –û–±—ä—ë–º ‚â•${vol_thresh:,}, –°–ø—Ä–µ–¥ ‚â•{spread_thresh}%, NATR ‚â•{natr_thresh}%</i>\n"
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_config = user_manager.get_user_config(self.user_id)
            vol_thresh = user_config.get('VOLUME_THRESHOLD', 1000)
            spread_thresh = user_config.get('SPREAD_THRESHOLD', 0.1)
            natr_thresh = user_config.get('NATR_THRESHOLD', 0.5)
            title = "<b>üìä –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n"
            filters_text = f"<i>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã: –û–±—ä—ë–º ‚â•${vol_thresh:,}, –°–ø—Ä–µ–¥ ‚â•{spread_thresh}%, NATR ‚â•{natr_thresh}%</i>\n"
        
        results.sort(key=lambda x: x.get('volume', 0), reverse=True)
        
        parts = [
            title,
            filters_text
        ]
        
        if failed_coins:
            parts.append(f"‚ö† <i>–û—à–∏–±–∫–∏: {', '.join(failed_coins[:3])}</i>\n")
            
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        active_coins = []
        inactive_coins = []
        
        for coin in results:
            volume = coin.get('volume', 0)
            spread = coin.get('spread', 0)
            natr = coin.get('natr', 0)
            
            is_active = (
                volume >= vol_thresh and
                spread >= spread_thresh and
                natr >= natr_thresh
            )
            
            if is_active:
                active_coins.append(coin)
            else:
                inactive_coins.append(coin)
                
        if active_coins:
            parts.append("<b>üü¢ –ê–ö–¢–ò–í–ù–´–ï:</b>")
            for coin in active_coins[:8]:
                parts.append(
                    f"‚Ä¢ <b>{coin['symbol']}</b> "
                    f"${coin.get('volume', 0):,.0f} | {coin.get('change', 0):+.1f}% | "
                    f"S:{coin.get('spread', 0):.2f}% | N:{coin.get('natr', 0):.2f}%"
                )
            parts.append("")
            
        if inactive_coins:
            parts.append("<b>üî¥ –ù–ï–ê–ö–¢–ò–í–ù–´–ï:</b>")
            for coin in inactive_coins[:6]:
                parts.append(
                    f"‚Ä¢ <b>{coin['symbol']}</b> "
                    f"${coin.get('volume', 0):,.0f} | {coin.get('change', 0):+.1f}% | "
                    f"S:{coin.get('spread', 0):.2f}% | N:{coin.get('natr', 0):.2f}%"
                )
                
        parts.append(f"\nüìà –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_coins)}/{len(results)}")
        
        report = "\n".join(parts)
        if len(report) > 4000:
            report = report[:4000] + "\n... <i>(–æ—Ç—á–µ—Ç –æ–±—Ä–µ–∑–∞–Ω)</i>"
            
        return report
        
    def get_stats(self):
        stats = super().get_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_manager.is_admin(self.user_id):
            from watchlist_manager import watchlist_manager
            watchlist_size = watchlist_manager.size()
        else:
            user_watchlist = user_manager.get_user_watchlist(self.user_id)
            watchlist_size = len(user_watchlist) if user_watchlist else 0
            
        stats.update({
            'monitoring_message_id': self.monitoring_message_id,
            'watchlist_size': watchlist_size
        })
        return stats


class UserModesManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.user_modes: Dict[str, Dict[str, UserMode]] = {}
        
    async def start_user_mode(self, user_id: str, mode_type: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –µ—Å—Ç—å
        await self.stop_user_mode(user_id_str)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
        if user_id_str not in self.user_modes:
            self.user_modes[user_id_str] = {}
            
        if mode_type == 'notification':
            mode = UserNotificationMode(user_id_str, self.bot)
        elif mode_type == 'monitoring':
            mode = UserMonitoringMode(user_id_str, self.bot)
        else:
            return False
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º
        success = await mode.start()
        if success:
            self.user_modes[user_id_str][mode_type] = mode
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_manager.update_user_data(user_id_str, {
                'current_mode': mode_type,
                'mode_start_time': time.time()
            })
            
            bot_logger.info(f"–†–µ–∂–∏–º {mode_type} –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
            
        return success
        
    async def stop_user_mode(self, user_id: str) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        
        if user_id_str not in self.user_modes:
            return False
            
        stopped_any = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ä–µ–∂–∏–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for mode_type, mode in list(self.user_modes[user_id_str].items()):
            try:
                await mode.stop()
                del self.user_modes[user_id_str][mode_type]
                stopped_any = True
                bot_logger.info(f"–†–µ–∂–∏–º {mode_type} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ {mode_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {e}")
                
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –≤—Å–µ —Ä–µ–∂–∏–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if not self.user_modes[user_id_str]:
            del self.user_modes[user_id_str]
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if stopped_any:
            user_manager.update_user_data(user_id_str, {
                'current_mode': None,
                'mode_stop_time': time.time()
            })
            
        return stopped_any
        
    def get_user_mode(self, user_id: str) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        
        if user_id_str in self.user_modes:
            for mode_type in self.user_modes[user_id_str]:
                return mode_type
                
        return None
        
    def is_user_mode_running(self, user_id: str, mode_type: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        
        if user_id_str not in self.user_modes:
            return False
            
        if mode_type:
            return mode_type in self.user_modes[user_id_str]
        else:
            return len(self.user_modes[user_id_str]) > 0
            
    def get_user_stats(self, user_id: str) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∂–∏–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        
        if user_id_str not in self.user_modes:
            return {'user_id': user_id_str, 'modes': {}}
            
        stats = {'user_id': user_id_str, 'modes': {}}
        
        for mode_type, mode in self.user_modes[user_id_str].items():
            stats['modes'][mode_type] = mode.get_stats()
            
        return stats
        
    def get_all_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return {
            'total_users': len(self.user_modes),
            'users': {user_id: self.get_user_stats(user_id) for user_id in self.user_modes}
        }
        
    async def stop_all_modes(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Ä–µ–∂–∏–º—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        for user_id in list(self.user_modes.keys()):
            await self.stop_user_mode(user_id)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ telegram_bot.py)
user_modes_manager = None
