
"""
–ú–æ–¥—É–ª—å —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏
"""

import asyncio
import time
from typing import List, Dict, Optional
from logger import bot_logger
from config import config_manager
from api_client import api_client
from watchlist_manager import watchlist_manager
from session_recorder import session_recorder


class MonitoringMode:
    def __init__(self, telegram_bot):
        self.bot = telegram_bot
        self.running = False
        self.monitoring_message_id: Optional[int] = None
        self.task = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.running:
            bot_logger.warning("–†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.running = True
        self.monitoring_message_id = None

        bot_logger.info("üìä –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        initial_text = "üîÑ <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...</b>"
        self.monitoring_message_id = await self.bot.send_message(initial_text)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        self.task = asyncio.create_task(self._monitoring_loop())

        await self.bot.send_message(
            "‚úÖ <b>–†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n"
            "üöÄ <i>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞</i>\n"
            "–°–≤–æ–¥–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.running:
            return

        self.running = False

        # –û—Ç–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
        if self.task and not self.task.done():
            self.task.cancel()
            try:
                await asyncio.wait_for(self.task, timeout=2.0)
            except (asyncio.CancelledError, asyncio.TimeoutError):
                pass
            except Exception as e:
                bot_logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

        # –û—á–∏—â–∞–µ–º –≤—Å–µ pending –∫–æ—Ä—É—Ç–∏–Ω—ã
        try:
            pending_tasks = [task for task in asyncio.all_tasks() 
                           if not task.done() and 'get_trades_last_minute' in str(task)]
            if pending_tasks:
                for task in pending_tasks:
                    task.cancel()
                await asyncio.gather(*pending_tasks, return_exceptions=True)
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ pending –∑–∞–¥–∞—á: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if self.monitoring_message_id:
            await self.bot.delete_message(self.monitoring_message_id)
            bot_logger.info("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω–æ")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.monitoring_message_id = None
        self.task = None

    def _chunks(self, lst: List, size: int):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞–Ω–∫–∏"""
        for i in range(0, len(lst), size):
            yield lst[i:i + size]

    async def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        cycle_count = 0

        while self.running:
            try:
                cycle_count += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                watchlist = watchlist_manager.get_all()
                if not watchlist:
                    no_coins_text = "‚ùå <b>–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç</b>\n–î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
                    if self.monitoring_message_id:
                        await self.bot.edit_message(self.monitoring_message_id, no_coins_text)
                    await asyncio.sleep(config_manager.get('MONITORING_UPDATE_INTERVAL'))
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç
                results, failed_coins = await self._fetch_monitoring_data()

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç –≤ —Å–µ—Å—Å–∏–∏
                for coin_data in results:
                    if coin_data.get('active'):
                        session_recorder.update_coin_activity(coin_data['symbol'], coin_data)

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                if results:
                    report = self._format_monitoring_report(results, failed_coins)
                    if self.monitoring_message_id:
                        await self.bot.edit_message(self.monitoring_message_id, report)
                    else:
                        self.monitoring_message_id = await self.bot.send_message(report)

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
                if cycle_count % 50 == 0:
                    import gc
                    gc.collect()
                    try:
                        from cache_manager import cache_manager
                        cache_manager.clear_expired()
                    except:
                        pass

                await asyncio.sleep(config_manager.get('MONITORING_UPDATE_INTERVAL'))

            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(1.0)

    async def _fetch_monitoring_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        watchlist = list(watchlist_manager.get_all())
        results = []
        failed_coins = []

        batch_size = config_manager.get('CHECK_BATCH_SIZE', 15)
        for batch in self._chunks(watchlist, batch_size):
            if not self.running:
                break

            try:
                batch_data = await api_client.get_batch_coin_data(batch)
                for symbol, coin_data in batch_data.items():
                    if coin_data:
                        results.append(coin_data)
                    else:
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
                        try:
                            from cache_manager import cache_manager
                            cached_data = cache_manager.get_ticker_cache(symbol)
                            if cached_data:
                                # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
                                simplified_data = {
                                    'symbol': symbol,
                                    'price': float(cached_data.get('lastPrice', 0)),
                                    'volume': 0,  # –ù–µ –∑–Ω–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º
                                    'change': 0,  # –ù–µ –∑–Ω–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                                    'spread': 0,
                                    'natr': 0,
                                    'trades': 0,
                                    'active': False,  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é
                                    'has_recent_trades': False,
                                    'timestamp': time.time(),
                                    'from_cache': True  # –§–ª–∞–≥ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
                                }
                                results.append(simplified_data)
                            else:
                                failed_coins.append(symbol)
                        except:
                            failed_coins.append(symbol)
            except Exception as e:
                bot_logger.warning(f"API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è batch {batch}: {e}")
                # –ü—Ä–∏ –ø–æ–ª–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à
                for symbol in batch:
                    try:
                        from cache_manager import cache_manager
                        cached_data = cache_manager.get_ticker_cache(symbol)
                        if cached_data:
                            simplified_data = {
                                'symbol': symbol,
                                'price': float(cached_data.get('lastPrice', 0)),
                                'volume': 0,
                                'change': 0,
                                'spread': 0,
                                'natr': 0,
                                'trades': 0,
                                'active': False,
                                'has_recent_trades': False,
                                'timestamp': time.time(),
                                'from_cache': True
                            }
                            results.append(simplified_data)
                        else:
                            failed_coins.append(symbol)
                    except:
                        failed_coins.append(symbol)

            await asyncio.sleep(config_manager.get('CHECK_BATCH_INTERVAL', 0.4))

        return results, failed_coins

    def _format_monitoring_report(self, results: List[Dict], failed_coins: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        results.sort(key=lambda x: x['volume'], reverse=True)

        parts = ["<b>üìä –°–∫–∞–ª—å–ø–∏–Ω–≥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (1–º –¥–∞–Ω–Ω—ã–µ)</b>\n"]

        vol_thresh = config_manager.get('VOLUME_THRESHOLD')
        spread_thresh = config_manager.get('SPREAD_THRESHOLD')
        natr_thresh = config_manager.get('NATR_THRESHOLD')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Circuit Breakers
        api_status = "üü¢"
        try:
            from circuit_breaker import api_circuit_breakers
            open_breakers = [name for name, cb in api_circuit_breakers.items() if cb.state == 'OPEN']
            if open_breakers:
                api_status = f"üü° API –ø—Ä–æ–±–ª–µ–º—ã: {', '.join([name.replace('_api', '') for name in open_breakers[:2]])}"
        except:
            pass

        parts.append(f"<i>API: {api_status}</i>")
        parts.append(
            f"<i>–§–∏–ª—å—Ç—Ä—ã: 1–º –æ–±–æ—Ä–æ—Ç ‚â•${vol_thresh:,}, "
            f"–°–ø—Ä–µ–¥ ‚â•{spread_thresh}%, NATR ‚â•{natr_thresh}%</i>\n"
        )

        if failed_coins:
            parts.append(f"‚ö† <i>–û—à–∏–±–∫–∏: {', '.join(failed_coins[:5])}</i>\n")

        active_coins = [r for r in results if r['active']]
        if active_coins:
            parts.append("<b>üü¢ –ê–ö–¢–ò–í–ù–´–ï:</b>")
            for coin in active_coins[:10]:
                trades_icon = "üî•" if coin.get('has_recent_trades') else "üìä"
                cache_icon = "üíæ" if coin.get('from_cache') else ""
                parts.append(
                    f"‚Ä¢ <b>{coin['symbol']}</b>{cache_icon} "
                    f"${coin['volume']:,.0f} | {coin['change']:+.1f}% | "
                    f"{trades_icon}T:{coin['trades']} | S:{coin['spread']:.2f}% | N:{coin['natr']:.2f}%"
                )
            parts.append("")

        inactive_coins = [r for r in results if not r['active']]
        if inactive_coins:
            parts.append("<b>üî¥ –ù–ï–ê–ö–¢–ò–í–ù–´–ï (—Ç–æ–ø –ø–æ –æ–±—ä—ë–º—É):</b>")
            for coin in inactive_coins[:8]:
                trades_status = "‚úÖ" if coin['trades'] > 0 else "‚ùå"
                cache_icon = "üíæ" if coin.get('from_cache') else ""
                parts.append(
                    f"‚Ä¢ <b>{coin['symbol']}</b>{cache_icon} "
                    f"${coin['volume']:,.0f} | {coin['change']:+.1f}% | "
                    f"{trades_status}T:{coin['trades']} | S:{coin['spread']:.2f}% | N:{coin['natr']:.2f}%"
                )

        parts.append(f"\nüìà –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_coins)}/{len(results)}")

        report = "\n".join(parts)
        if len(report) > 4000:
            report = report[:4000] + "\n... <i>(–æ—Ç—á–µ—Ç –æ–±—Ä–µ–∑–∞–Ω)</i>"

        return report

    def get_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∂–∏–º–∞"""
        return {
            'active': self.running,
            'monitoring_message_id': self.monitoring_message_id,
            'watchlist_size': watchlist_manager.size()
        }
