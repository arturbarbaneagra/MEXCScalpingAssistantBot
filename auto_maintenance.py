import asyncio
import gc
import time
from logger import bot_logger
from cache_manager import cache_manager
from metrics_manager import metrics_manager
from performance_optimizer import performance_optimizer

class AutoMaintenance:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self):
        self.last_cleanup = 0
        self.last_optimization = 0
        self.last_gc = 0
        self.maintenance_interval = 1800  # 30 –º–∏–Ω—É—Ç
        self.running = False

    async def start_maintenance_loop(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        self.running = True
        bot_logger.info("üîß –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")

        while self.running:
            try:
                await self._perform_maintenance()
                await asyncio.sleep(self.maintenance_interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def stop_maintenance(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"""
        self.running = False
        bot_logger.info("üõë –ê–≤—Ç–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    async def _perform_maintenance(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        current_time = time.time()

        tasks = []

        # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        if current_time - self.last_cleanup > 1800:
            tasks.append(self._cleanup_cache())

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        if current_time - self.last_optimization > 900:
            tasks.append(self._optimize_performance())

        # –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        if current_time - self.last_gc > 3600:
            tasks.append(self._garbage_collection())

        if tasks:
            try:
                await asyncio.gather(*tasks, return_exceptions=True)
                bot_logger.info("‚úÖ –¶–∏–∫–ª –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")

    async def _cleanup_cache(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à"""
        try:
            cache_manager.clear_expired()
            metrics_manager.cleanup_old_metrics()
            self.last_cleanup = time.time()
            bot_logger.info("‚úÖ –ö–µ—à –∏ –º–µ—Ç—Ä–∏–∫–∏ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")

    async def _optimize_performance(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        try:
            await performance_optimizer.auto_optimize()
            self.last_optimization = time.time()
            bot_logger.info("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")

    async def _garbage_collection(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–±–æ—Ä–∫—É –º—É—Å–æ—Ä–∞"""
        try:
            before = gc.get_count()
            collected = gc.collect()
            after = gc.get_count()

            if collected > 0:
                bot_logger.info(f"‚úÖ –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞: —Å–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤")
                bot_logger.debug(f"GC —Å—á–µ—Ç—á–∏–∫–∏ –¥–æ: {before}, –ø–æ—Å–ª–µ: {after}")

            self.last_gc = time.time()
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞: {e}")

    def get_maintenance_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        return {
            'running': self.running,
            'last_cleanup': self.last_cleanup,
            'last_optimization': self.last_optimization,
            'last_gc': self.last_gc,
            'maintenance_interval': self.maintenance_interval
        }

    async def force_maintenance(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        bot_logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            await self._cleanup_cache()
            await self._optimize_performance()
            await self._garbage_collection()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            await self._cleanup_logs()
            await self._validate_system()
            
            bot_logger.info("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")

    async def _cleanup_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        try:
            import os
            log_file = "trading_bot.log"
            
            if os.path.exists(log_file):
                file_size = os.path.getsize(log_file)
                # –ï—Å–ª–∏ –ª–æ–≥ –±–æ–ª—å—à–µ 50MB, —Ä–æ—Ç–∏—Ä—É–µ–º
                if file_size > 50 * 1024 * 1024:
                    backup_file = f"{log_file}.backup"
                    if os.path.exists(backup_file):
                        os.remove(backup_file)
                    os.rename(log_file, backup_file)
                    bot_logger.info(f"‚úÖ –õ–æ–≥ —Ñ–∞–π–ª —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω ({file_size / 1024 / 1024:.1f}MB)")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")

    async def _validate_system(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            from data_validator import data_validator
            from config import config_manager
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            critical_configs = ['VOLUME_THRESHOLD', 'SPREAD_THRESHOLD', 'NATR_THRESHOLD']
            for config_key in critical_configs:
                value = config_manager.get(config_key)
                if not data_validator.validate_config_value(config_key, value):
                    bot_logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_key}={value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            validation_stats = data_validator.get_validation_stats()
            if validation_stats['success_rate'] < 90:
                bot_logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {validation_stats['success_rate']:.1f}%")
            
            bot_logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
auto_maintenance = AutoMaintenance()
"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import time
import gc
from typing import Optional
from logger import bot_logger

class AutoMaintenance:
    def __init__(self):
        self.running = False
        self.task: Optional[asyncio.Task] = None

    async def start_maintenance_loop(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        self.running = True
        bot_logger.info("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

        try:
            while self.running:
                await self._perform_maintenance()
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            bot_logger.info("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")

    async def _perform_maintenance(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            gc.collect()
            
            # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            try:
                from cache_manager import cache_manager
                cache_manager.clear_expired()
            except ImportError:
                pass

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
            try:
                from metrics_manager import metrics_manager
                metrics_manager.cleanup_old_metrics()
            except (ImportError, AttributeError) as e:
                bot_logger.debug(f"Metrics manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            except Exception as e:
                bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")

            bot_logger.debug("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")

    def stop_maintenance(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"""
        self.running = False
        if self.task:
            self.task.cancel()
        bot_logger.info("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auto_maintenance = AutoMaintenance()
