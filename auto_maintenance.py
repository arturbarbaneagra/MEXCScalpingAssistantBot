
"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import time
import gc
from typing import Dict, Any
from logger import bot_logger
from config import config_manager
from cache_manager import cache_manager
from metrics_manager import metrics_manager
from performance_optimizer import performance_optimizer

class AutoMaintenance:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.last_cleanup = 0
        self.last_optimization = 0
        self.last_gc = 0
        self.maintenance_interval = 1800  # 30 –º–∏–Ω—É—Ç
        self.running = False

    async def start_maintenance_loop(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        self.running = True
        bot_logger.info("üîß –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
        
        while self.running:
            try:
                await self._perform_maintenance()
                await asyncio.sleep(self.maintenance_interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def stop_maintenance(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"""
        self.running = False
        bot_logger.info("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    async def _perform_maintenance(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"""
        current_time = time.time()
        maintenance_tasks = []

        # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        if current_time - self.last_cleanup > 1800:
            maintenance_tasks.append("cache_cleanup")
            
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        if current_time - self.last_optimization > 900:
            maintenance_tasks.append("performance_optimization")
            
        # –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        if current_time - self.last_gc > 600:
            maintenance_tasks.append("garbage_collection")

        if maintenance_tasks:
            bot_logger.info(f"üîß –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {', '.join(maintenance_tasks)}")
            
            for task in maintenance_tasks:
                try:
                    if task == "cache_cleanup":
                        await self._cleanup_cache()
                    elif task == "performance_optimization":
                        await self._optimize_performance()
                    elif task == "garbage_collection":
                        await self._garbage_collection()
                except Exception as e:
                    bot_logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task}: {e}")

    async def _cleanup_cache(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à"""
        try:
            cache_manager.clear_expired()
            metrics_manager.cleanup_old_metrics()
            self.last_cleanup = time.time()
            bot_logger.info("‚úÖ –ö–µ—à –∏ –º–µ—Ç—Ä–∏–∫–∏ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")

    async def _optimize_performance(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        try:
            await performance_optimizer.auto_optimize()
            self.last_optimization = time.time()
            bot_logger.info("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")

    async def _garbage_collection(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–±–æ—Ä–∫—É –º—É—Å–æ—Ä–∞"""
        try:
            before = gc.get_count()
            collected = gc.collect()
            after = gc.get_count()
            
            if collected > 0:
                bot_logger.info(f"‚úÖ –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞: —Å–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤")
                bot_logger.debug(f"GC —Å—á–µ—Ç—á–∏–∫–∏ –¥–æ: {before}, –ø–æ—Å–ª–µ: {after}")
            
            self.last_gc = time.time()
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞: {e}")

    def get_maintenance_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        current_time = time.time()
        
        return {
            'maintenance_running': self.running,
            'last_cleanup': self.last_cleanup,
            'last_optimization': self.last_optimization,
            'last_gc': self.last_gc,
            'next_maintenance': current_time + (self.maintenance_interval - (current_time % self.maintenance_interval)),
            'maintenance_interval_minutes': self.maintenance_interval / 60
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
auto_maintenance = AutoMaintenance()
