
import time
import asyncio
from logger import bot_logger
from metrics_manager import metrics_manager
from cache_manager import cache_manager
from advanced_alerts import advanced_alert_manager

class AutoMaintenance:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.last_cleanup = 0
        self.last_health_report = 0
        self.cleanup_interval = 3600  # 1 —á–∞—Å
        self.health_report_interval = 21600  # 6 —á–∞—Å–æ–≤
        
    async def run_maintenance(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        current_time = time.time()
        
        # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        if current_time - self.last_cleanup > self.cleanup_interval:
            await self._cleanup_system()
            self.last_cleanup = current_time
        
        # –û—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        if current_time - self.last_health_report > self.health_report_interval:
            await self._health_report()
            self.last_health_report = current_time
    
    async def _cleanup_system(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫
            metrics_manager.cleanup_old_metrics()
            
            # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
            cache_manager.cleanup_expired()
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
            if len(advanced_alert_manager.alert_history) > 1000:
                advanced_alert_manager.alert_history = advanced_alert_manager.alert_history[-500:]
            
            bot_logger.info("üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏: {e}")
    
    async def _health_report(self):
        """–û—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            metrics = metrics_manager.get_summary()
            uptime_hours = metrics.get('uptime_seconds', 0) / 3600
            
            total_requests = sum(
                stats.get('total_requests', 0) 
                for stats in metrics.get('api_stats', {}).values()
            )
            
            cache_stats = cache_manager.get_stats()
            alert_stats = advanced_alert_manager.get_alert_stats()
            
            bot_logger.info(
                f"üìä –û–¢–ß–ï–¢ –û –ó–î–û–†–û–í–¨–ï –°–ò–°–¢–ï–ú–´:\n"
                f"   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours:.1f} —á–∞—Å–æ–≤\n"
                f"   ‚Ä¢ –í—Å–µ–≥–æ API –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
                f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –∫–µ—à–µ: {cache_stats.get('total_entries', 0)}\n"
                f"   ‚Ä¢ –í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {alert_stats.get('total_triggers', 0)}\n"
                f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ ‚úÖ"
            )
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auto_maintenance = AutoMaintenance()
