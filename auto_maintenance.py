import asyncio
import gc
import time
from logger import bot_logger
from cache_manager import cache_manager
from metrics_manager import metrics_manager
from performance_optimizer import performance_optimizer
from circuit_breaker import api_circuit_breakers

class AutoMaintenance:
    def __init__(self):
        self.running = False
        self.maintenance_task = None
        self.last_cleanup = 0
        self.cleanup_interval = 3600  # 1 —á–∞—Å

    async def start_maintenance_loop(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        self.running = True
        bot_logger.info("üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")

        while self.running:
            try:
                current_time = time.time()

                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å
                if current_time - self.last_cleanup > self.cleanup_interval:
                    await self._perform_maintenance()
                    self.last_cleanup = current_time

                # –õ—ë–≥–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                await self._light_maintenance()

                await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç

            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def stop_maintenance(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        self.running = False
        if self.maintenance_task and not self.maintenance_task.done():
            self.maintenance_task.cancel()

    async def _perform_maintenance(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"""
        bot_logger.info("üîß –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")

        try:
            await self._cleanup_cache()
            await self._optimize_performance()
            await self._garbage_collection()
            await self._cleanup_logs()
            await self._validate_system()

            bot_logger.info("‚úÖ –ü–æ–ª–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")

    async def _light_maintenance(self):
        """–õ—ë–≥–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–µ—à–µ–π
            cache_manager.clear_expired()

            # –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if gc.get_count()[0] > 1000:
                gc.collect()

        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –ª—ë–≥–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")

    async def _cleanup_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π"""
        try:
            cache_manager.clear_expired()
            bot_logger.debug("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–µ–π: {e}")

    async def _optimize_performance(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            await performance_optimizer.optimize()
            bot_logger.debug("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")

    async def _garbage_collection(self):
        """–°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞"""
        try:
            collected = gc.collect()
            bot_logger.debug(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤ –º—É—Å–æ—Ä–∞")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞: {e}")

    async def force_maintenance(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        bot_logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")

        try:
            await self._cleanup_cache()
            await self._optimize_performance()
            await self._garbage_collection()
            await self._cleanup_logs()
            await self._validate_system()

            bot_logger.info("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")

    async def _cleanup_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏ —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤"""
        try:
            from log_rotator import log_rotator

            # –†–æ—Ç–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥ —Ñ–∞–π–ª–∞
            main_log = "trading_bot.log"
            if log_rotator.should_rotate(main_log):
                log_rotator.rotate_log(main_log)

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            log_rotator.cleanup_by_age(max_days=30)

            bot_logger.debug("‚úÖ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")

    async def _validate_system(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Circuit Breakers
            for name, cb in api_circuit_breakers.items():
                if cb.state.value == 'open':
                    bot_logger.warning(f"Circuit Breaker {name} –æ—Ç–∫—Ä—ã—Ç")

            bot_logger.debug("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auto_maintenance = AutoMaintenance()