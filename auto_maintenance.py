
#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import time
import os
import gc
from typing import Dict, Any, Optional
from datetime import datetime, timedelta
from logger import bot_logger


class AutoMaintenance:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.running = False
        self.maintenance_task: Optional[asyncio.Task] = None
        self.maintenance_interval = 3600  # 1 —á–∞—Å
        self.last_maintenance = time.time()
        self.maintenance_stats = {
            'total_runs': 0,
            'last_run': None,
            'cache_clears': 0,
            'log_rotations': 0,
            'memory_cleanups': 0
        }
    
    async def start_maintenance_loop(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        if self.running:
            bot_logger.warning("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
        
        self.running = True
        bot_logger.info("üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
        
        while self.running:
            try:
                current_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                if current_time - self.last_maintenance >= self.maintenance_interval:
                    await self._perform_maintenance()
                    self.last_maintenance = current_time
                
                # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(300)
                
            except asyncio.CancelledError:
                bot_logger.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                break
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _perform_maintenance(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        bot_logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ...")
        
        try:
            # 1. –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π
            await self._cleanup_caches()
            
            # 2. –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤
            await self._rotate_logs()
            
            # 3. –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            await self._cleanup_memory()
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            await self._check_system_resources()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.maintenance_stats['total_runs'] += 1
            self.maintenance_stats['last_run'] = datetime.now().isoformat()
            
            bot_logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")
    
    async def _cleanup_caches(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–µ—à–µ–π"""
        try:
            from cache_manager import cache_manager
            
            # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
            cleaned_count = cache_manager.cleanup_expired()
            
            if cleaned_count > 0:
                bot_logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {cleaned_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–µ—à–∞")
                self.maintenance_stats['cache_clears'] += 1
            
        except Exception as e:
            bot_logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–µ–π: {e}")
    
    async def _rotate_logs(self):
        """–†–æ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
        try:
            from log_rotator import log_rotator
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞
            log_file = 'trading_bot.log'
            if os.path.exists(log_file):
                file_size = os.path.getsize(log_file)
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 10MB, –¥–µ–ª–∞–µ–º —Ä–æ—Ç–∞—Ü–∏—é
                if file_size > 10 * 1024 * 1024:
                    log_rotator.rotate_logs()
                    bot_logger.info("üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤")
                    self.maintenance_stats['log_rotations'] += 1
            
        except Exception as e:
            bot_logger.warning(f"–û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤: {e}")
    
    async def _cleanup_memory(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            before = gc.get_count()
            collected = gc.collect()
            after = gc.get_count()
            
            if collected > 0:
                bot_logger.info(f"üßπ –°–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤ –º—É—Å–æ—Ä–∞")
                self.maintenance_stats['memory_cleanups'] += 1
            
        except Exception as e:
            bot_logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
    
    async def _check_system_resources(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            import psutil
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            if memory.percent > 80:
                bot_logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent:.1f}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
            disk = psutil.disk_usage('/')
            if disk.percent > 85:
                bot_logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk.percent:.1f}%")
            
        except ImportError:
            # psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            pass
        except Exception as e:
            bot_logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    def stop_maintenance(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        self.running = False
        if self.maintenance_task and not self.maintenance_task.done():
            self.maintenance_task.cancel()
        bot_logger.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def get_maintenance_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        return {
            **self.maintenance_stats,
            'running': self.running,
            'next_maintenance': self.last_maintenance + self.maintenance_interval,
            'maintenance_interval_hours': self.maintenance_interval / 3600
        }
    
    async def force_maintenance(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        bot_logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è...")
        await self._perform_maintenance()
        self.last_maintenance = time.time()


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auto_maintenance = AutoMaintenance()
