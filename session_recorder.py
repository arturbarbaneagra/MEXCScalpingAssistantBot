
"""
–ú–æ–¥—É–ª—å –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –º–æ–Ω–µ—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –¥–Ω—è–º
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤
"""

import os
import json
import time
import asyncio
import threading
from datetime import datetime
from typing import Dict, Optional, Any
from concurrent.futures import ThreadPoolExecutor
import traceback
import sys


class AutonomousSessionRecorder:
    def __init__(self):
        self.recording = False
        self.active_sessions: Dict[str, Dict] = {}
        self.data_directory = "session_data"
        self.daily_files: Dict[str, str] = {}
        self.session_start_threshold = 60  # –ú–∏–Ω–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–∏
        
        # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.auto_save_interval = 30  # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        self.emergency_save_interval = 10  # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        self.max_session_memory = 1000  # –ú–∞–∫—Å–∏–º—É–º —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏
        self.fallback_logger = self._create_fallback_logger()
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ–µ–≤
        self.error_count = 0
        self.max_errors = 50
        self.last_emergency_save = 0
        self.emergency_mode = False
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π executor –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π
        self.executor = ThreadPoolExecutor(max_workers=2, thread_name_prefix="SessionRecorder")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self._ensure_directories()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        self._restore_state()
        
        self._log("info", f"üìÅ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π Session Recorder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _create_fallback_logger(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ª–æ–≥–≥–µ—Ä"""
        try:
            logs_dir = "logs"
            if not os.path.exists(logs_dir):
                os.makedirs(logs_dir)
                
            class FallbackLogger:
                def __init__(self, logs_dir):
                    self.logs_dir = logs_dir
                    self.emergency_log = os.path.join(logs_dir, "session_recorder_autonomous.log")
                
                def log(self, level, message):
                    try:
                        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        log_line = f"[{timestamp}] SessionRecorder {level.upper()}: {message}\n"
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
                        with open(self.emergency_log, "a", encoding="utf-8") as f:
                            f.write(log_line)
                        
                        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
                        print(f"üìù {log_line.strip()}")
                    except Exception:
                        # –ï—Å–ª–∏ –¥–∞–∂–µ fallback logger –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –≤ –∫–æ–Ω—Å–æ–ª—å
                        print(f"üìù [EMERGENCY] {level.upper()}: {message}")
            
            return FallbackLogger(logs_dir)
        except Exception:
            return None

    def _log(self, level: str, message: str):
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
            try:
                from logger import bot_logger
                if level == "info":
                    bot_logger.info(message)
                elif level == "debug":
                    bot_logger.debug(message)
                elif level == "warning":
                    bot_logger.warning(message)
                elif level == "error":
                    bot_logger.error(message)
                return
            except Exception:
                pass
            
            # Fallback logger
            if self.fallback_logger:
                self.fallback_logger.log(level, message)
            else:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ - –∫–æ–Ω—Å–æ–ª—å
                timestamp = datetime.now().strftime('%H:%M:%S')
                print(f"[{timestamp}] SessionRecorder {level.upper()}: {message}")
                
        except Exception:
            # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –º–∏–Ω–∏–º—É–º
            try:
                print(f"üìù {level.upper()}: {message}")
            except Exception:
                pass

    def _ensure_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            directories = [self.data_directory, "logs", "session_data/backups"]
            for directory in directories:
                if not os.path.exists(directory):
                    os.makedirs(directory)
                    self._log("debug", f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        except Exception as e:
            self._log("error", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")

    def _restore_state(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        try:
            state_file = os.path.join(self.data_directory, "recorder_state.json")
            if os.path.exists(state_file):
                with open(state_file, 'r', encoding='utf-8') as f:
                    state = json.load(f)
                    self.recording = state.get('recording', False)
                    if self.recording:
                        self._log("info", "üìù –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        except Exception as e:
            self._log("error", f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def _save_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        try:
            state_file = os.path.join(self.data_directory, "recorder_state.json")
            state = {
                'recording': self.recording,
                'active_sessions_count': len(self.active_sessions),
                'last_save': time.time(),
                'emergency_mode': self.emergency_mode
            }
            with open(state_file, 'w', encoding='utf-8') as f:
                json.dump(state, f, indent=2)
        except Exception as e:
            self._log("error", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def start_recording(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π"""
        try:
            self.recording = True
            self.emergency_mode = False
            self.error_count = 0
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            self._start_autonomous_processes()
            
            self._save_state()
            self._log("info", "üìù –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π Session Recorder –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            self._log("error", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Session Recorder: {e}")

    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π"""
        try:
            self.recording = False
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            for symbol in list(self.active_sessions.keys()):
                self._finalize_session(symbol, force=True)
            
            self._save_state()
            self._log("info", "üìù Session Recorder –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            self._log("error", f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Session Recorder: {e}")

    def _start_autonomous_processes(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        try:
            # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            def auto_save_loop():
                while self.recording:
                    try:
                        time.sleep(self.auto_save_interval)
                        if self.recording:
                            self._auto_save_sessions()
                    except Exception as e:
                        self._log("error", f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
            # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            def emergency_save_loop():
                while self.recording:
                    try:
                        time.sleep(self.emergency_save_interval)
                        if self.recording:
                            self._emergency_backup()
                    except Exception as e:
                        self._log("error", f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
            self.executor.submit(auto_save_loop)
            self.executor.submit(emergency_save_loop)
            
        except Exception as e:
            self._log("error", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

    def update_coin_activity(self, symbol: str, coin_data: Dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞—â–∏—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        if not self.recording:
            return
        
        try:
            current_time = time.time()
            is_active = coin_data.get('active', False)
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            if len(self.active_sessions) > self.max_session_memory:
                self._cleanup_old_sessions()
            
            if is_active:
                if symbol not in self.active_sessions:
                    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                    self.active_sessions[symbol] = {
                        'symbol': symbol,
                        'start_time': current_time,
                        'last_update': current_time,
                        'data_points': [],
                        'total_minutes': 0,
                        'summary': {
                            'max_volume': 0,
                            'total_volume': 0,
                            'total_trades': 0,
                            'max_change': 0,
                            'min_change': 0,
                            'max_natr': 0,
                            'max_spread': 0,
                            'avg_price': 0,
                            'price_samples': []
                        },
                        'backup_count': 0,  # –°—á–µ—Ç—á–∏–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
                        'last_backup': current_time
                    }
                    self._log("debug", f"üìù –ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏ –¥–ª—è {symbol}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
                session = self.active_sessions[symbol]
                session['last_update'] = current_time
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
                try:
                    data_point = {
                        'timestamp': current_time,
                        'volume': float(coin_data.get('volume', 0)),
                        'trades': int(coin_data.get('trades', 0)),
                        'change': float(coin_data.get('change', 0)),
                        'natr': float(coin_data.get('natr', 0)),
                        'spread': float(coin_data.get('spread', 0)),
                        'price': float(coin_data.get('price', 0))
                    }
                    session['data_points'].append(data_point)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
                    self._update_session_summary(session, data_point)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä data_points
                    if len(session['data_points']) > 1000:
                        session['data_points'] = session['data_points'][-500:]
                    
                except Exception as e:
                    self._log("error", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
                    
        except Exception as e:
            self.error_count += 1
            self._log("error", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ update_coin_activity {symbol}: {e}")
            
            # –í–∫–ª—é—á–∞–µ–º emergency mode –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
            if self.error_count > self.max_errors:
                self.emergency_mode = True
                self._emergency_save_all_sessions()

    def _update_session_summary(self, session: Dict, data_point: Dict):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–µ—Å—Å–∏–∏"""
        try:
            summary = session['summary']
            
            volume = data_point.get('volume', 0)
            trades = data_point.get('trades', 0)
            change = data_point.get('change', 0)
            natr = data_point.get('natr', 0)
            spread = data_point.get('spread', 0)
            price = data_point.get('price', 0)
            
            summary['max_volume'] = max(summary['max_volume'], volume)
            summary['total_volume'] += volume
            summary['total_trades'] += trades
            summary['max_change'] = max(summary['max_change'], change)
            summary['min_change'] = min(summary['min_change'], change)
            summary['max_natr'] = max(summary['max_natr'], natr)
            summary['max_spread'] = max(summary['max_spread'], spread)
            
            if price > 0:
                summary['price_samples'].append(price)
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä price_samples
                if len(summary['price_samples']) > 100:
                    summary['price_samples'] = summary['price_samples'][-50:]
                summary['avg_price'] = sum(summary['price_samples']) / len(summary['price_samples'])
            
            session['total_minutes'] = len(session['data_points'])
            
        except Exception as e:
            self._log("error", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")

    def check_inactive_sessions(self, active_coins: Dict = None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–∑–∞—â–∏—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        if not self.recording:
            return
        
        try:
            current_time = time.time()
            inactive_threshold = 120  # 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            
            sessions_to_finalize = []
            
            for symbol, session in list(self.active_sessions.items()):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    time_since_update = current_time - session.get('last_update', 0)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    coin_still_active = True
                    if active_coins is not None:
                        coin_still_active = symbol in active_coins
                    
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
                    if not coin_still_active or time_since_update > inactive_threshold:
                        sessions_to_finalize.append(symbol)
                        
                except Exception as e:
                    self._log("error", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏ {symbol}: {e}")
                    sessions_to_finalize.append(symbol)  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∑–∞–≤–µ—Ä—à–∞–µ–º
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            for symbol in sessions_to_finalize:
                self._finalize_session(symbol)
                
        except Exception as e:
            self._log("error", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ check_inactive_sessions: {e}")

    def _finalize_session(self, symbol: str, force: bool = False):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞—â–∏—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            if symbol not in self.active_sessions:
                return
            
            session = self.active_sessions[symbol]
            current_time = time.time()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration = current_time - session.get('start_time', current_time)
            session['end_time'] = current_time
            session['total_duration'] = duration
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            try:
                session['start_datetime'] = datetime.fromtimestamp(session['start_time']).isoformat()
                session['end_datetime'] = datetime.fromtimestamp(current_time).isoformat()
            except Exception:
                session['start_datetime'] = "unknown"
                session['end_datetime'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            saved = False
            if duration >= self.session_start_threshold or force:
                saved = self._save_session_to_file(session)
                
                if saved:
                    duration_min = int(duration // 60)
                    duration_sec = int(duration % 60)
                    self._log("info",
                        f"üíæ –°–µ—Å—Å–∏—è {symbol} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {duration_min}–º {duration_sec}—Å, "
                        f"{session.get('total_minutes', 0)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö, "
                        f"–º–∞–∫—Å.–æ–±—ä–µ–º ${session.get('summary', {}).get('max_volume', 0):,.0f}"
                    )
            
            # –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ emergency —Ä–µ–∂–∏–º–µ
            if self.emergency_mode or not saved:
                self._emergency_save_session(session)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            del self.active_sessions[symbol]
            
        except Exception as e:
            self._log("error", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ finalize_session {symbol}: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è —Ö–æ—Ç—è –±—ã —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø–∞–º—è—Ç–∏
            try:
                if symbol in self.active_sessions:
                    del self.active_sessions[symbol]
            except Exception:
                pass

    def _save_session_to_file(self, session: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ —Ñ–∞–π–ª —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        success = False
        attempts = 3
        
        for attempt in range(attempts):
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —Ñ–∞–π–ª–∞
                start_time = session.get('start_time', time.time())
                date_str = datetime.fromtimestamp(start_time).strftime('%Y-%m-%d')
                filepath = os.path.join(self.data_directory, f"sessions_{date_str}.json")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                daily_data = self._load_daily_data(filepath, date_str)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                daily_data['sessions'].append(session)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                self._update_daily_metadata(daily_data)
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                backup_path = f"{filepath}.backup_{int(time.time())}"
                if os.path.exists(filepath):
                    try:
                        import shutil
                        shutil.copy2(filepath, backup_path)
                    except Exception:
                        pass
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(daily_data, f, indent=2, ensure_ascii=False)
                
                self._log("debug", f"üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filepath}")
                success = True
                break
                
            except Exception as e:
                self._log("error", f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session.get('symbol', 'unknown')}: {e}")
                if attempt == attempts - 1:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ emergency —Ñ–∞–π–ª
                    self._emergency_save_session(session)
                    
        return success

    def _load_daily_data(self, filepath: str, date_str: str) -> Dict:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if os.path.exists(filepath):
                with open(filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    if not isinstance(data, dict):
                        raise ValueError("Invalid data format")
                    if 'sessions' not in data:
                        data['sessions'] = []
                    if 'metadata' not in data:
                        data['metadata'] = {}
                    return data
        except Exception as e:
            self._log("warning", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filepath}: {e}, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        return {
            'date': date_str,
            'sessions': [],
            'metadata': {
                'created': datetime.now().isoformat(),
                'file_version': '2.0'
            }
        }

    def _update_daily_metadata(self, daily_data: Dict):
        """–û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            sessions = daily_data.get('sessions', [])
            
            total_sessions = len(sessions)
            total_duration = sum(s.get('total_duration', 0) for s in sessions)
            total_volume = sum(s.get('summary', {}).get('total_volume', 0) for s in sessions)
            unique_symbols = len(set(s.get('symbol') for s in sessions if s.get('symbol')))
            
            daily_data['metadata'] = {
                'total_sessions': total_sessions,
                'total_duration': total_duration,
                'total_volume': total_volume,
                'unique_symbols': unique_symbols,
                'last_updated': datetime.now().isoformat(),
                'file_version': '2.0'
            }
        except Exception as e:
            self._log("error", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")

    def _emergency_save_session(self, session: Dict):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            emergency_dir = os.path.join(self.data_directory, "emergency")
            if not os.path.exists(emergency_dir):
                os.makedirs(emergency_dir)
            
            timestamp = int(time.time())
            symbol = session.get('symbol', 'unknown')
            emergency_file = os.path.join(emergency_dir, f"emergency_{symbol}_{timestamp}.json")
            
            with open(emergency_file, 'w', encoding='utf-8') as f:
                json.dump(session, f, indent=2, ensure_ascii=False)
            
            self._log("warning", f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ {symbol} –≤ {emergency_file}")
            
        except Exception as e:
            self._log("error", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def _auto_save_sessions(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        try:
            if not self.active_sessions:
                return
            
            saved_count = 0
            for symbol, session in list(self.active_sessions.items()):
                try:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    if time.time() - session.get('last_backup', 0) > 60:  # –†–∞–∑ –≤ –º–∏–Ω—É—Ç—É
                        temp_session = session.copy()
                        temp_session['is_partial'] = True
                        temp_session['auto_save_time'] = time.time()
                        
                        if self._save_session_to_file(temp_session):
                            session['last_backup'] = time.time()
                            saved_count += 1
                            
                except Exception as e:
                    self._log("error", f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {symbol}: {e}")
            
            if saved_count > 0:
                self._log("debug", f"üîÑ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {saved_count} —Å–µ—Å—Å–∏–π")
                
        except Exception as e:
            self._log("error", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def _emergency_backup(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            current_time = time.time()
            if current_time - self.last_emergency_save < self.emergency_save_interval:
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._save_state()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–Ω–∏–º–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            if self.active_sessions:
                backup_data = {
                    'timestamp': current_time,
                    'active_sessions_count': len(self.active_sessions),
                    'emergency_mode': self.emergency_mode,
                    'sessions_snapshot': list(self.active_sessions.keys())
                }
                
                backup_file = os.path.join(self.data_directory, "recorder_backup.json")
                with open(backup_file, 'w', encoding='utf-8') as f:
                    json.dump(backup_data, f, indent=2)
            
            self.last_emergency_save = current_time
            
        except Exception as e:
            self._log("error", f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞: {e}")

    def _emergency_save_all_sessions(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        try:
            self._log("warning", "üö® –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π")
            
            for symbol in list(self.active_sessions.keys()):
                try:
                    self._finalize_session(symbol, force=True)
                except Exception as e:
                    self._log("error", f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {symbol}: {e}")
            
            self.active_sessions.clear()
            self.emergency_mode = False
            self.error_count = 0
            
        except Exception as e:
            self._log("error", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π: {e}")

    def _cleanup_old_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ –ø–∞–º—è—Ç–∏"""
        try:
            if len(self.active_sessions) <= self.max_session_memory * 0.8:
                return
            
            current_time = time.time()
            old_sessions = []
            
            for symbol, session in self.active_sessions.items():
                last_update = session.get('last_update', 0)
                if current_time - last_update > 300:  # 5 –º–∏–Ω—É—Ç
                    old_sessions.append(symbol)
            
            for symbol in old_sessions[:10]:  # –£–¥–∞–ª—è–µ–º –Ω–µ –±–æ–ª–µ–µ 10 –∑–∞ —Ä–∞–∑
                self._finalize_session(symbol, force=True)
            
            if old_sessions:
                self._log("info", f"üßπ –û—á–∏—â–µ–Ω–æ {len(old_sessions[:10])} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ –ø–∞–º—è—Ç–∏")
                
        except Exception as e:
            self._log("error", f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π: {e}")

    def get_daily_summary(self, date_str: str) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å"""
        try:
            filepath = os.path.join(self.data_directory, f"sessions_{date_str}.json")
            return self._load_daily_data(filepath, date_str)
        except Exception as e:
            self._log("error", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞ {date_str}: {e}")
            return None

    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Session Recorder"""
        try:
            return {
                'recording': self.recording,
                'active_sessions': len(self.active_sessions),
                'session_symbols': list(self.active_sessions.keys()),
                'data_directory': self.data_directory,
                'emergency_mode': self.emergency_mode,
                'error_count': self.error_count,
                'autonomous': True,
                'version': '2.0_autonomous'
            }
        except Exception as e:
            self._log("error", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'recording': False,
                'active_sessions': 0,
                'session_symbols': [],
                'data_directory': self.data_directory,
                'error': str(e)
            }

    def force_save_all(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        try:
            self._log("info", "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            saved_count = 0
            
            for symbol in list(self.active_sessions.keys()):
                try:
                    session = self.active_sessions[symbol]
                    if self._save_session_to_file(session):
                        saved_count += 1
                except Exception as e:
                    self._log("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {symbol}: {e}")
            
            self._log("info", f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Å–µ—Å—Å–∏–π")
            return saved_count
            
        except Exception as e:
            self._log("error", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return 0

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –∑–∞—â–∏—Ç–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if hasattr(self, 'active_sessions') and self.active_sessions:
                self._emergency_save_all_sessions()
            if hasattr(self, 'executor'):
                self.executor.shutdown(wait=False)
        except Exception:
            pass


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
session_recorder = AutonomousSessionRecorder()

# –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
SessionRecorder = AutonomousSessionRecorder
