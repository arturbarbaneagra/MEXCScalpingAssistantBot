
"""
–ú–æ–¥—É–ª—å –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –º–æ–Ω–µ—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –¥–Ω—è–º
"""

import os
import json
import time
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from logger import bot_logger


class SessionRecorder:
    def __init__(self):
        self.recording = False
        self.active_sessions: Dict[str, Dict] = {}
        self.data_dir = "session_data"
        self.current_date = None
        self.recording_task = None
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        os.makedirs(self.data_dir, exist_ok=True)
        
        bot_logger.info("üìù Session Recorder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def start_recording(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–π"""
        if self.recording:
            bot_logger.warning("Session Recorder —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return
            
        self.recording = True
        self.recording_task = asyncio.create_task(self._recording_loop())
        bot_logger.info("üé¨ Session Recorder –∑–∞–ø—É—â–µ–Ω")

    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–π"""
        if not self.recording:
            return
            
        self.recording = False
        
        if self.recording_task and not self.recording_task.done():
            self.recording_task.cancel()
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        self._save_all_sessions()
        
        bot_logger.info("‚èπÔ∏è Session Recorder –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def update_coin_activity(self, symbol: str, coin_data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã"""
        if not self.recording or not coin_data.get('active'):
            return
            
        current_time = time.time()
        current_minute = int(current_time // 60) * 60  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –º–∏–Ω—É—Ç—ã
        
        # –ï—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ –≤–ø–µ—Ä–≤—ã–µ —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
        if symbol not in self.active_sessions:
            self.active_sessions[symbol] = {
                'symbol': symbol,
                'start_time': current_time,
                'start_datetime': datetime.fromtimestamp(current_time).isoformat(),
                'last_update': current_time,
                'minutes_data': {},
                'total_duration': 0
            }
            bot_logger.debug(f"üìä –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è {symbol}")
        
        session = self.active_sessions[symbol]
        session['last_update'] = current_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â—É—é –º–∏–Ω—É—Ç—É
        minute_key = str(current_minute)
        if minute_key not in session['minutes_data']:
            session['minutes_data'][minute_key] = {
                'timestamp': current_minute,
                'datetime': datetime.fromtimestamp(current_minute).isoformat(),
                'trades': 0,
                'volume': 0.0,
                'price': 0.0,
                'change': 0.0,
                'spread': 0.0,
                'natr': 0.0
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã
        minute_data = session['minutes_data'][minute_key]
        minute_data['trades'] = coin_data.get('trades', 0)
        minute_data['volume'] = coin_data.get('volume', 0.0)
        minute_data['price'] = coin_data.get('price', 0.0)
        minute_data['change'] = coin_data.get('change', 0.0)
        minute_data['spread'] = coin_data.get('spread', 0.0)
        minute_data['natr'] = coin_data.get('natr', 0.0)

    def check_inactive_sessions(self, active_coins: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        if not self.recording:
            return
            
        current_time = time.time()
        inactive_threshold = 90  # 1.5 –º–∏–Ω—É—Ç—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        sessions_to_complete = []
        
        for symbol in list(self.active_sessions.keys()):
            session = self.active_sessions[symbol]
            time_since_update = current_time - session['last_update']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –¥–∞–≤–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å
            is_still_active = symbol in active_coins and active_coins[symbol].get('active', False)
            
            if not is_still_active or time_since_update > inactive_threshold:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ (1 –º–∏–Ω—É—Ç–∞)
                session_duration = current_time - session['start_time']
                if session_duration >= 60:  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
                    sessions_to_complete.append(symbol)
                else:
                    # –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ—Å—Å–∏–∏
                    del self.active_sessions[symbol]
                    bot_logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Å–µ—Å—Å–∏—è {symbol} ({session_duration:.1f}s)")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        for symbol in sessions_to_complete:
            self._complete_session(symbol)

    def _complete_session(self, symbol: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –º–æ–Ω–µ—Ç—ã"""
        if symbol not in self.active_sessions:
            return
            
        session = self.active_sessions[symbol]
        current_time = time.time()
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        session['end_time'] = current_time
        session['end_datetime'] = datetime.fromtimestamp(current_time).isoformat()
        session['total_duration'] = current_time - session['start_time']
        session['total_minutes'] = len(session['minutes_data'])
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if session['minutes_data']:
            total_trades = sum(data['trades'] for data in session['minutes_data'].values())
            total_volume = sum(data['volume'] for data in session['minutes_data'].values())
            avg_price = sum(data['price'] for data in session['minutes_data'].values()) / len(session['minutes_data'])
            
            session['summary'] = {
                'total_trades': total_trades,
                'total_volume': total_volume,
                'avg_price': avg_price,
                'max_trades_per_minute': max(data['trades'] for data in session['minutes_data'].values()),
                'max_volume_per_minute': max(data['volume'] for data in session['minutes_data'].values())
            }
        else:
            session['summary'] = {
                'total_trades': 0,
                'total_volume': 0.0,
                'avg_price': 0.0,
                'max_trades_per_minute': 0,
                'max_volume_per_minute': 0.0
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ —Ñ–∞–π–ª
        self._save_session(session)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        del self.active_sessions[symbol]
        
        bot_logger.info(
            f"‚úÖ –°–µ—Å—Å–∏—è {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {session['total_duration']:.1f}s, "
            f"{session['total_minutes']} –º–∏–Ω—É—Ç, {session['summary']['total_trades']} —Å–¥–µ–ª–æ–∫"
        )

    def _save_session(self, session: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏
            start_date = datetime.fromtimestamp(session['start_time']).strftime('%Y-%m-%d')
            filename = f"sessions_{start_date}.json"
            filepath = os.path.join(self.data_dir, filename)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
            if os.path.exists(filepath):
                with open(filepath, 'r', encoding='utf-8') as f:
                    daily_data = json.load(f)
            else:
                daily_data = {
                    'date': start_date,
                    'sessions': [],
                    'metadata': {
                        'created': datetime.now().isoformat(),
                        'total_sessions': 0,
                        'total_duration': 0
                    }
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            daily_data['sessions'].append(session)
            daily_data['metadata']['total_sessions'] = len(daily_data['sessions'])
            daily_data['metadata']['total_duration'] = sum(s['total_duration'] for s in daily_data['sessions'])
            daily_data['metadata']['last_updated'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(daily_data, f, indent=2, ensure_ascii=False)
                
            bot_logger.debug(f"üíæ –°–µ—Å—Å–∏—è {session['symbol']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session['symbol']}: {e}")

    def _save_all_sessions(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        for symbol in list(self.active_sessions.keys()):
            self._complete_session(symbol)

    async def _recording_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø–∏—Å–∏"""
        try:
            while self.recording:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    from telegram_bot import telegram_bot
                    if hasattr(telegram_bot, 'active_coins'):
                        self.check_inactive_sessions(telegram_bot.active_coins)
                    
                    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑ –≤ —á–∞—Å
                    if int(time.time()) % 3600 < 30:
                        self._cleanup_old_data()
                    
                    await asyncio.sleep(30)
                    
                except Exception as e:
                    bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π: {e}")
                    await asyncio.sleep(5)
                    
        except asyncio.CancelledError:
            bot_logger.info("üîÑ –¶–∏–∫–ª –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            bot_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∑–∞–ø–∏—Å–∏: {e}")

    def _cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)"""
        try:
            cutoff_date = datetime.now() - timedelta(days=30)
            cutoff_str = cutoff_date.strftime('%Y-%m-%d')
            
            for filename in os.listdir(self.data_dir):
                if filename.startswith('sessions_') and filename.endswith('.json'):
                    file_date = filename.replace('sessions_', '').replace('.json', '')
                    if file_date < cutoff_str:
                        filepath = os.path.join(self.data_dir, filename)
                        os.remove(filepath)
                        bot_logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–π: {filename}")
                        
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å–∏"""
        return {
            'recording': self.recording,
            'active_sessions': len(self.active_sessions),
            'data_directory': self.data_dir,
            'session_symbols': list(self.active_sessions.keys())
        }

    def get_daily_summary(self, date: str = None) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞ –¥–µ–Ω—å"""
        if not date:
            date = datetime.now().strftime('%Y-%m-%d')
            
        filename = f"sessions_{date}.json"
        filepath = os.path.join(self.data_dir, filename)
        
        try:
            if os.path.exists(filepath):
                with open(filepath, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return None
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date}: {e}")
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
session_recorder = SessionRecorder()
