"""
–ú–æ–¥—É–ª—å –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –º–æ–Ω–µ—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –¥–Ω—è–º
"""

import os
import json
import time
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional, Any
from logger import bot_logger
from config import config_manager


class SessionRecorder:
    def __init__(self):
        self.recording = False
        self.active_sessions: Dict[str, Dict] = {}
        self.user_session_recorders: Dict[str, 'UserSessionRecorder'] = {}
        self.session_start_threshold = 60  # –ú–∏–Ω–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–∏

    def start_recording(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π"""
        self.recording = True
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∫–æ—Ä–¥–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            from user_manager import user_manager
            all_users = user_manager.get_all_users()
            
            for user_data in all_users:
                chat_id = user_data['chat_id']
                user_recorder = self.get_user_session_recorder(chat_id)
                bot_logger.info(f"üìù Session Recorder –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                
        except Exception as e:
            bot_logger.warning(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–µ–∫–æ—Ä–¥–µ—Ä–æ–≤: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–µ–∫–æ—Ä–¥–µ—Ä–æ–≤
        for user_recorder in self.user_session_recorders.values():
            user_recorder.start_recording()
            
        bot_logger.info("üìù Session Recorder –∑–∞–ø—É—â–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π"""
        self.recording = False

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–µ–∫–æ—Ä–¥–µ—Ä–æ–≤
        for user_recorder in self.user_session_recorders.values():
            user_recorder.stop_recording()

        bot_logger.info("üìù Session Recorder –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_user_session_recorder(self, chat_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ä–µ–∫–æ—Ä–¥–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from user_session_recorder import UserSessionRecorder
        
        chat_id_str = str(chat_id)
        if chat_id_str not in self.user_session_recorders:
            self.user_session_recorders[chat_id_str] = UserSessionRecorder(chat_id_str)
            if self.recording:
                self.user_session_recorders[chat_id_str].start_recording()
        return self.user_session_recorders[chat_id_str]

    def update_coin_activity(self, symbol: str, coin_data: Dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.recording:
            return

        try:
            from user_manager import user_manager
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users = user_manager.get_all_users()
            
            for user_data in all_users:
                chat_id = user_data['chat_id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç—É –º–æ–Ω–µ—Ç—É
                if user_manager.is_admin(chat_id):
                    # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    from watchlist_manager import watchlist_manager
                    user_watchlist = watchlist_manager.get_all()
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    user_watchlist = user_manager.get_user_watchlist(chat_id)
                
                if symbol in user_watchlist:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ—Ä–¥–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    user_recorder = self.get_user_session_recorder(chat_id)
                    user_recorder.update_coin_activity(symbol, coin_data)
                    
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã {symbol}: {e}")

    def check_inactive_sessions(self, active_coins: Dict):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏—Ö –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.recording:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_recorder in self.user_session_recorders.values():
            user_recorder.check_inactive_sessions(active_coins)

    def get_daily_summary(self, date_str: str, chat_id: str = None) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if chat_id:
            user_recorder = self.get_user_session_recorder(chat_id)
            return user_recorder.get_daily_summary(date_str)
        else:
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞
            from user_manager import user_manager
            admin_chat_id = user_manager.admin_chat_id
            user_recorder = self.get_user_session_recorder(admin_chat_id)
            return user_recorder.get_daily_summary(date_str)

    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Session Recorder"""
        total_active_sessions = sum(
            len(recorder.active_sessions) 
            for recorder in self.user_session_recorders.values()
        )
        
        all_session_symbols = []
        for recorder in self.user_session_recorders.values():
            all_session_symbols.extend(recorder.active_sessions.keys())
        
        return {
            'recording': self.recording,
            'active_sessions': total_active_sessions,
            'session_symbols': list(set(all_session_symbols)),
            'user_recorders_count': len(self.user_session_recorders),
            'users': list(self.user_session_recorders.keys())
        }

    def get_user_stats(self, chat_id: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Session Recorder –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id_str = str(chat_id)
        if chat_id_str in self.user_session_recorders:
            return self.user_session_recorders[chat_id_str].get_stats()
        else:
            return {
                'recording': False,
                'active_sessions': 0,
                'session_symbols': [],
                'data_directory': f"user_sessions_{chat_id_str}",
                'chat_id': chat_id_str
            }

    def update_activity_stats(self, sessions: list):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            from user_activity_calculator import user_activity_manager
            from user_manager import user_manager

            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞
            current_hour = datetime.now().replace(minute=0, second=0, microsecond=0)
            hour_sessions = [s for s in sessions if
                           current_hour <= datetime.fromtimestamp(s.get('start_time', 0)) < current_hour + timedelta(hours=1)]

            if hour_sessions:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                all_users = user_manager.get_all_users()
                for user_data in all_users:
                    chat_id = user_data['chat_id']

                    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —ç—Ç–æ—Ç —á–∞—Å
                    user_hour_sessions = []
                    user_data_dir = f"user_sessions_{chat_id}"
                    if os.path.exists(user_data_dir):
                        date_str = current_hour.strftime('%Y-%m-%d')
                        user_filepath = os.path.join(user_data_dir, f"sessions_{date_str}.json")

                        if os.path.exists(user_filepath):
                            try:
                                with open(user_filepath, 'r', encoding='utf-8') as f:
                                    user_daily_data = json.load(f)

                                cutoff_start = current_hour.timestamp()
                                cutoff_end = cutoff_start + 3600

                                user_hour_sessions = [s for s in user_daily_data.get('sessions', [])
                                                    if cutoff_start <= s.get('start_time', 0) < cutoff_end]
                            except Exception as e:
                                bot_logger.debug(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")

                    if user_hour_sessions:
                        calculator = user_activity_manager.get_user_calculator(chat_id)
                        hourly_activity = calculator.calculate_hourly_activity(user_hour_sessions, current_hour)
                        calculator.update_activity_stats(hourly_activity)

        except Exception as e:
            bot_logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
session_recorder = SessionRecorder()