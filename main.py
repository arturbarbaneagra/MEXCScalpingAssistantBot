#!/usr/bin/env python3
"""
–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ MEXC
–í–µ—Ä—Å–∏—è: 2.0
"""

import os
import sys
from datetime import datetime
from flask import Flask
from threading import Thread
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
from logger import bot_logger
from config import config_manager
from watchlist_manager import watchlist_manager
from telegram_bot import telegram_bot

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π)
bot_logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
if not os.getenv('TELEGRAM_TOKEN'):
    print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not os.getenv('TELEGRAM_CHAT_ID'):
    print("‚ùå TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω")

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è keep-alive
app = Flask(__name__)

@app.route('/')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    status = {
        'bot_running': telegram_bot.bot_running,
        'bot_mode': telegram_bot.bot_mode,
        'watchlist_size': watchlist_manager.size()
    }

    return f"""
    <html>
    <head><title>Trading Bot Status</title></head>
    <body>
        <h1>ü§ñ Trading Bot Status</h1>
        <p><strong>Status:</strong> {'üü¢ Running' if status['bot_running'] else 'üî¥ Stopped'}</p>
        <p><strong>Mode:</strong> {status['bot_mode'] or 'None'}</p>
        <p><strong>Watchlist:</strong> {status['watchlist_size']} coins</p>
        <p><strong>Version:</strong> 2.0</p>
        <hr>
        <small>Last updated: {telegram_bot.last_message_time}</small>
    </body>
    </html>
    """

@app.route('/health')
async def health():
    """Health check endpoint"""
    try:
        from health_check import health_checker
        health_data = await health_checker.full_health_check()
        return health_data
    except Exception as e:
        return {'status': 'error', 'error': str(e), 'version': '2.0'}

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        app.run(host='0.0.0.0', port=8080, debug=False)
    except Exception as e:
        bot_logger.error(f"–û—à–∏–±–∫–∞ Flask —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def keep_alive():
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    server_thread = Thread(target=run_flask, daemon=True)
    server_thread.start()
    bot_logger.info("Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

def validate_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = ['TELEGRAM_TOKEN', 'TELEGRAM_CHAT_ID']
    missing_vars = []

    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)

    if missing_vars:
        bot_logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print(f"‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Secrets –≤ Replit –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.")
        return False

    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot_logger.info("=" * 50)
        bot_logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ v2.0")
        bot_logger.info("=" * 50)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not validate_environment():
            sys.exit(1)

        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
        keep_alive()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
        bot_logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞...")
        application = telegram_bot.setup_application()

        bot_logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        bot_logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {watchlist_manager.size()} –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        bot_logger.info("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        application.run_polling(
            drop_pending_updates=True,
            poll_interval=1.0,
            timeout=20,
            close_loop=False
        )

    except KeyboardInterrupt:
        bot_logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        bot_logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
    finally:
        # Graceful shutdown
        try:
            if hasattr(telegram_bot, 'bot_running') and telegram_bot.bot_running:
                import asyncio
                try:
                    loop = asyncio.get_event_loop()
                except RuntimeError:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                
                try:
                    loop.run_until_complete(telegram_bot._stop_current_mode())
                except Exception as shutdown_error:
                    bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∂–∏–º–∞: {shutdown_error}")
                finally:
                    if not loop.is_closed():
                        loop.close()
        except Exception as e:
            bot_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        
        bot_logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()