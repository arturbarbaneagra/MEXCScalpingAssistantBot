#!/usr/bin/env python3
"""
–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ MEXC
–í–µ—Ä—Å–∏—è: 2.0
"""

import os
import sys
import time
import asyncio
import threading
from datetime import datetime
from flask import Flask
from threading import Thread
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
from logger import bot_logger
from config import config_manager
from watchlist_manager import watchlist_manager
from telegram_bot import telegram_bot
from api_client import api_client

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π)
bot_logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
if not os.getenv('TELEGRAM_TOKEN'):
    print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not os.getenv('TELEGRAM_CHAT_ID'):
    print("‚ùå TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω")

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è keep-alive
app = Flask(__name__)

@app.route('/')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        from metrics_manager import metrics_manager
        from cache_manager import cache_manager
        from alert_manager import alert_manager

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        status = {
            'bot_running': telegram_bot.bot_running,
            'bot_mode': telegram_bot.bot_mode,
            'watchlist_size': watchlist_manager.size()
        }

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = metrics_manager.get_summary()
        cache_stats = cache_manager.get_stats()
        alerts = alert_manager.get_active_alerts()

        # –ü–æ–ª—É—á–∞–µ–º –∞–ª–µ—Ä—Ç—ã –∏–∑ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        advanced_alerts = alert_manager.get_active_alerts()
        alert_stats = alert_manager.get_alert_stats()

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        try:
            from performance_optimizer import performance_optimizer
            performance_score = performance_optimizer.get_performance_score()
        except:
            performance_score = 100.0

        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        uptime_hours = metrics.get('uptime_seconds', 0) / 3600

        # –°—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–æ–≤
        alert_status = 'üü¢ OK'
        if alerts:
            critical_alerts = [a for a in alerts if a.get('severity') == 'critical']
            if critical_alerts:
                alert_status = f'üî¥ {len(critical_alerts)} Critical'
            else:
                alert_status = f'üü° {len(alerts)} Warning'

        return f"""
        <html>
        <head>
            <title>Trading Bot Status v2.1</title>
            <meta http-equiv="refresh" content="30">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
                .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }}
                .status-grid {{ display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 20px 0; }}
                .metric-box {{ padding: 15px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #007bff; }}
                .alert-box {{ padding: 10px; background: #fff3cd; border-radius: 5px; margin: 5px 0; }}
                .critical {{ border-left-color: #dc3545; background: #f8d7da; }}
                .warning {{ border-left-color: #ffc107; background: #fff3cd; }}
                .success {{ border-left-color: #28a745; background: #d4edda; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü§ñ Trading Bot Status v2.1</h1>

                <div class="status-grid">
                    <div class="metric-box {'success' if status['bot_running'] else 'critical'}">
                        <strong>Bot Status:</strong> {'üü¢ Running' if status['bot_running'] else 'üî¥ Stopped'}<br>
                        <strong>Mode:</strong> {status['bot_mode'] or 'None'}<br>
                        <strong>Uptime:</strong> {uptime_hours:.1f} hours
                    </div>

                    <div class="metric-box">
                        <strong>Watchlist:</strong> {status['watchlist_size']} coins<br>
                        <strong>Active Coins:</strong> {len(telegram_bot.active_coins)}<br>
                        <strong>Cache Entries:</strong> {cache_stats.get('total_entries', 0)}
                    </div>
                </div>

                <div class="metric-box">
                    <strong>üö® Alerts:</strong> {alert_status}<br>
                    {f"Recent alerts: {', '.join([a.get('message', '')[:50] + '...' if len(a.get('message', '')) > 50 else a.get('message', '') for a in alerts[:2]])}" if alerts else "No active alerts"}<br>
                    <strong>Advanced:</strong> {len(advanced_alerts)} active, {alert_stats.get('total_triggers', 0)} total triggers
                </div>

                <div class="status-grid">
                    <div class="metric-box">
                        <strong>API Performance:</strong><br>
                        Total requests: {sum(stats.get('total_requests', 0) for stats in metrics.get('api_stats', {}).values())}<br>
                        Performance score: {performance_score:.0f}/100<br>
                        Memory usage: {cache_stats.get('memory_usage_kb', 0):.1f} KB
                    </div>

                    <div class="metric-box">
                        <strong>System:</strong><br>
                        Version: 2.1<br>
                        Last update: {time.strftime('%H:%M:%S')}
                    </div>
                </div>

                <p><small>Page auto-refreshes every 30 seconds</small></p>
            </div>
        </body>
        </html>
        """
    except Exception as e:
        return f"""
        <html>
        <body>
            <h1>ü§ñ Trading Bot Status v2.1</h1>
            <p><strong>Status:</strong> {'üü¢ Running' if telegram_bot.bot_running else 'üî¥ Stopped'}</p>
            <p><strong>Mode:</strong> {telegram_bot.bot_mode or 'None'}</p>
            <p><strong>Watchlist:</strong> {watchlist_manager.size()} coins</p>
            <p><strong>Error:</strong> {str(e)}</p>
        </body>
        </html>
        """

@app.route('/health')
def health():
    """Health check endpoint"""
    try:
        from health_check import health_checker
        # Flask –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç async –Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        import asyncio
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            health_data = loop.run_until_complete(health_checker.full_health_check())
            loop.close()
            return health_data
        except Exception as async_error:
            return {
                'status': 'error', 
                'error': f'Async error: {async_error}', 
                'version': '2.0',
                'system_basic': health_checker.get_system_info(),
                'bot_basic': health_checker.get_bot_status()
            }
    except Exception as e:
        return {'status': 'error', 'error': str(e), 'version': '2.0'}

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        app.run(host='0.0.0.0', port=8080, debug=False, threaded=True)
    except Exception as e:
        bot_logger.error(f"–û—à–∏–±–∫–∞ Flask —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def keep_alive():
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    server_thread = Thread(target=run_flask, daemon=True)
    server_thread.start()
    bot_logger.info("Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

def validate_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = ['TELEGRAM_TOKEN', 'TELEGRAM_CHAT_ID']
    missing_vars = []

    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)

    if missing_vars:
        bot_logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print(f"‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Secrets –≤ Replit –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.")
        return False

    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot_logger.info("=" * 50)
        bot_logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ v2.1")
        bot_logger.info("=" * 50)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not validate_environment():
            sys.exit(1)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        from bot_state import bot_state_manager
        bot_state_manager.increment_session()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        from auto_maintenance import auto_maintenance
        maintenance_task = asyncio.create_task(auto_maintenance.start_maintenance_loop())

        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        bot_logger.info("üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
        app = telegram_bot.setup_application()

        bot_logger.info("ü§ñ Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        bot_logger.info("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
        bot_logger.info("=" * 50)

        start_time = time.time()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º event loop
        async with app:
            await app.start()
            await app.updater.start_polling(drop_pending_updates=True)

            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—â–∏–º
            try:
                while True:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                bot_logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            finally:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                auto_maintenance.stop_maintenance()
                maintenance_task.cancel()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                uptime = time.time() - start_time
                bot_state_manager.add_uptime(uptime)

                await app.updater.stop()
                await app.stop()

    except KeyboardInterrupt:
        bot_logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        bot_logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            telegram_bot.bot_running = False
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
            await api_client.close()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
            if hasattr(telegram_bot, 'active_coins') and telegram_bot.active_coins:
                try:
                    with open('active_coins_backup.json', 'w') as f:
                        json.dump({
                            k: {
                                'start_time': v.get('start_time', 0),
                                'last_active': v.get('last_active', 0),
                                'initial_data': v.get('initial_data', {})
                            } for k, v in telegram_bot.active_coins.items()
                        }, f)
                    bot_logger.info("üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                except Exception as e:
                    bot_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: {e}")
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à–∏
            cache_manager.clear_all()
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            try:
                metrics_summary = metrics_manager.get_summary()
                with open('final_metrics.json', 'w') as f:
                    json.dump(metrics_summary, f, indent=2)
            except Exception as e:
                bot_logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {e}")
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            await asyncio.sleep(1.0)
            bot_logger.info("üîí –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")

        bot_logger.info("üëã –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())