
import json
import time
import asyncio
import threading
import os
import websockets
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, ContextTypes

MEXC_WS_URL = "wss://wbs.mexc.com/ws"
VOLUME_THRESHOLD = 1000
SPREAD_THRESHOLD = 0.1
NATR_THRESHOLD = 0.5

TELEGRAM_TOKEN = "8180368589:AAHgiD22KRFzXHTiFkw4n5WPwN3Ho2hA4rA"
TELEGRAM_CHAT_ID = "1090477927"

WATCHLIST_FILE = "watchlist.json"
BOT_RUNNING = False

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
COIN_DATA = {}
ACTIVE_COINS = {}

def load_watchlist():
    if os.path.exists(WATCHLIST_FILE):
        return set([c.upper().replace("_USDT", "") for c in json.load(open(WATCHLIST_FILE, "r", encoding="utf-8"))])
    return set()

def save_watchlist():
    with open(WATCHLIST_FILE, "w", encoding="utf-8") as f:
        json.dump(list(WATCHLIST), f)

WATCHLIST = load_watchlist()

async def send_telegram_message(text, parse_mode="HTML"):
    import requests
    r = requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", data={
        'chat_id': TELEGRAM_CHAT_ID,
        'text': text,
        'parse_mode': parse_mode
    })
    if r.ok:
        return r.json().get("result", {}).get("message_id")
    return None

async def delete_message(message_id):
    import requests
    requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteMessage", data={
        "chat_id": TELEGRAM_CHAT_ID,
        "message_id": message_id
    })

def calculate_metrics(symbol, kline_data):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏"""
    try:
        print(f"üìä –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è {symbol}, –¥–∞–Ω–Ω—ã–µ: {kline_data}")
        
        open_price = float(kline_data.get('o', 0))
        close_price = float(kline_data.get('c', 0))
        high_price = float(kline_data.get('h', 0))
        low_price = float(kline_data.get('l', 0))
        volume = float(kline_data.get('v', 0))
        
        print(f"üî¢ {symbol} OHLCV: O={open_price}, H={high_price}, L={low_price}, C={close_price}, V={volume}")
        
        if close_price == 0 or open_price == 0:
            print(f"‚ö†Ô∏è {symbol}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã (close={close_price}, open={open_price})")
            return None
        
        # NATR (Normalized Average True Range)
        natr = (high_price - low_price) / close_price * 100
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        change = (close_price - open_price) / open_price * 100
        
        print(f"‚úÖ {symbol}: V={volume:.2f}, NATR={natr:.2f}%, Change={change:.2f}%")
        
        return {
            'symbol': symbol,
            'volume': volume,
            'natr': natr,
            'change': change,
            'close': close_price
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è {symbol}: {e}")
        print(f"‚ùå –î–∞–Ω–Ω—ã–µ kline: {kline_data}")
        return None

async def websocket_handler():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    global BOT_RUNNING, COIN_DATA
    
    while BOT_RUNNING:
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –º–æ–Ω–µ—Ç –∏–∑ –≤–æ—Ç—á–ª–∏—Å—Ç–∞
            subscriptions = []
            for coin in WATCHLIST:
                symbol = coin + "USDT"
                subscriptions.extend([
                    f"spot@public.kline.v3.api@{symbol}@Min1",
                    f"spot@public.bookTicker.v3.api@{symbol}"
                ])
            
            if not subscriptions:
                print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –≤–æ—Ç—á–ª–∏—Å—Ç –ø—É—Å—Ç")
                await asyncio.sleep(5)
                continue
            
            print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket: {MEXC_WS_URL}")
            print(f"üìã –ú–æ–Ω–µ—Ç—ã –≤ –≤–æ—Ç—á–ª–∏—Å—Ç–µ: {sorted(WATCHLIST)}")
            print(f"üì° –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: {subscriptions[:5]}... (–≤—Å–µ–≥–æ {len(subscriptions)})")
            
            async with websockets.connect(MEXC_WS_URL) as websocket:
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ
                subscribe_msg = {
                    "method": "SUBSCRIPTION",
                    "params": subscriptions
                }
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É: {json.dumps(subscribe_msg, indent=2)}")
                await websocket.send(json.dumps(subscribe_msg))
                print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {len(subscriptions)} –ø–æ—Ç–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
                
                message_count = 0
                async for message in websocket:
                    if not BOT_RUNNING:
                        break
                    
                    message_count += 1
                    if message_count % 100 == 0:
                        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                        
                    try:
                        if message.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                            data = json.loads(message)
                            await process_websocket_data(data)
                        else:
                            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    except json.JSONDecodeError as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...")
                        continue
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
            if BOT_RUNNING:
                print("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)

async def process_websocket_data(data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç WebSocket"""
    global COIN_DATA, ACTIVE_COINS
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üîç –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω—ã–π –Ω–∞–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    if not isinstance(data, dict):
        print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç MEXC
    print(f"üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys())}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö kline (—Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    kline_processed = False
    
    # –§–æ—Ä–º–∞—Ç 1: –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–µ 'd'
    if 'd' in data and 's' in data:
        print("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç kline —Å –ø–æ–ª–µ–º 'd'")
        symbol_full = data['s']
        if symbol_full.endswith('USDT'):
            symbol = symbol_full.replace('USDT', '')
            if symbol in WATCHLIST:
                kline_data = data['d']
                print(f"üìà –î–∞–Ω–Ω—ã–µ kline –¥–ª—è {symbol}: {kline_data}")
                if isinstance(kline_data, dict):
                    metrics = calculate_metrics(symbol, kline_data)
                    if metrics:
                        if symbol not in COIN_DATA:
                            COIN_DATA[symbol] = {}
                        COIN_DATA[symbol].update({
                            **metrics,
                            'last_update': time.time()
                        })
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: V={metrics['volume']:.2f}, NATR={metrics['natr']:.2f}%")
                        kline_processed = True
    
    # –§–æ—Ä–º–∞—Ç 2: –ø—Ä—è–º—ã–µ –¥–∞–Ω–Ω—ã–µ kline
    elif 'o' in data and 'c' in data and 'h' in data and 'l' in data and 'v' in data and 's' in data:
        print("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç kline")
        symbol_full = data['s']
        if symbol_full.endswith('USDT'):
            symbol = symbol_full.replace('USDT', '')
            if symbol in WATCHLIST:
                print(f"üìà –ü—Ä—è–º—ã–µ –¥–∞–Ω–Ω—ã–µ kline –¥–ª—è {symbol}: {data}")
                metrics = calculate_metrics(symbol, data)
                if metrics:
                    if symbol not in COIN_DATA:
                        COIN_DATA[symbol] = {}
                    COIN_DATA[symbol].update({
                        **metrics,
                        'last_update': time.time()
                    })
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: V={metrics['volume']:.2f}, NATR={metrics['natr']:.2f}%")
                    kline_processed = True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö bookTicker
    ticker_processed = False
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ticker –¥–∞–Ω–Ω—ã—Ö
    if 'b' in data and 'a' in data and 's' in data:
        print("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç bookTicker")
        symbol_full = data['s']
        if symbol_full.endswith('USDT'):
            symbol = symbol_full.replace('USDT', '')
            if symbol in WATCHLIST:
                try:
                    bid = float(data['b'])
                    ask = float(data['a'])
                    print(f"üí∞ Ticker –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: bid={bid}, ask={ask}")
                    if bid > 0:
                        spread = (ask - bid) / bid * 100
                        
                        if symbol not in COIN_DATA:
                            COIN_DATA[symbol] = {}
                        
                        COIN_DATA[symbol]['spread'] = spread
                        COIN_DATA[symbol]['last_update'] = time.time()
                        
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø—Ä–µ–¥ –¥–ª—è {symbol}: {spread:.3f}%")
                        ticker_processed = True
                except (ValueError, ZeroDivisionError) as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø—Ä–µ–¥–∞ –¥–ª—è {symbol}: {e}")
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if not kline_processed and not ticker_processed:
        print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    for symbol in COIN_DATA.keys():
        if symbol in WATCHLIST:
            await check_coin_activity(symbol)

async def check_coin_activity(symbol):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if symbol not in COIN_DATA:
        return
    
    data = COIN_DATA[symbol]
    now = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
    if now - data.get('last_update', 0) > 300:
        return
    
    volume = data.get('volume', 0)
    spread = data.get('spread', 0)
    natr = data.get('natr', 0)
    change = data.get('change', 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if volume == 0 or spread == 0 or natr == 0:
        return
    
    is_active = (volume >= VOLUME_THRESHOLD and 
                 spread >= SPREAD_THRESHOLD and 
                 natr >= NATR_THRESHOLD)
    
    currently_active = symbol in ACTIVE_COINS
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {symbol}: V={volume:.2f} (>{VOLUME_THRESHOLD}), S={spread:.3f}% (>{SPREAD_THRESHOLD}), NATR={natr:.2f}% (>{NATR_THRESHOLD}) = {'–ê–ö–¢–ò–í–ï–ù' if is_active else '–ù–ï –ê–ö–¢–ò–í–ï–ù'}")
    
    if is_active and not currently_active:
        # –ú–æ–Ω–µ—Ç–∞ —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
        msg = (
            f"üö® <b>{symbol}_USDT –∞–∫—Ç–∏–≤–µ–Ω</b>\n"
            f"üîÑ –ò–∑–º: {change:.2f}%\n"
            f"üìä –û–±—ä—ë–º: ${volume:,.2f}  NATR: {natr:.2f}%\n"
            f"‚áÑ –°–ø—Ä–µ–¥: {spread:.2f}%"
        )
        msg_id = await send_telegram_message(msg)
        ACTIVE_COINS[symbol] = {'start': now, 'msg_id': msg_id}
        print(f"üö® {symbol} —Å—Ç–∞–ª –∞–∫—Ç–∏–≤–Ω—ã–º!")
        
    elif not is_active and currently_active:
        # –ú–æ–Ω–µ—Ç–∞ —Å—Ç–∞–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
        duration = now - ACTIVE_COINS[symbol]['start']
        msg_id = ACTIVE_COINS[symbol]['msg_id']
        
        if msg_id:
            await delete_message(msg_id)
        
        if duration >= 60:
            minutes = int(duration // 60)
            seconds = int(duration % 60)
            msg = f"‚úÖ <b>{symbol}_USDT</b> ‚Äî –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes} –º–∏–Ω {seconds} —Å–µ–∫"
            await send_telegram_message(msg)
        
        del ACTIVE_COINS[symbol]
        print(f"‚úÖ {symbol} —Å—Ç–∞–ª –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º")

async def cleanup_old_data():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ"""
    while BOT_RUNNING:
        now = time.time()
        to_remove = []
        
        for symbol, data in COIN_DATA.items():
            if now - data.get('last_update', 0) > 600:  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç
                to_remove.append(symbol)
        
        for symbol in to_remove:
            del COIN_DATA[symbol]
            if symbol in ACTIVE_COINS:
                del ACTIVE_COINS[symbol]
        
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def start_bot_loop():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
    tasks = [
        websocket_handler(),
        cleanup_old_data()
    ]
    
    loop.run_until_complete(asyncio.gather(*tasks))

# ‚Äî‚Äî‚Äî Telegram –º–µ–Ω—é ‚Äî‚Äî‚Äî
MENU_KEYBOARD = ReplyKeyboardMarkup([
    ["–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", "–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"],
    ["–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É", "–ò—Å–∫–ª—é—á–∏—Ç—å –º–æ–Ω–µ—Ç—É"],
    ["–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç", "–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç"],
    ["–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥–∏"]
], resize_keyboard=True)

ADDING, REMOVING, SETTING_THRESHOLDS = range(3)

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MENU_KEYBOARD)

async def button_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global BOT_RUNNING, VOLUME_THRESHOLD, SPREAD_THRESHOLD, NATR_THRESHOLD
    t = update.message.text
    
    if t == "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        if not BOT_RUNNING:
            BOT_RUNNING = True
            threading.Thread(target=start_bot_loop, daemon=True).start()
            await update.message.reply_text("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket MEXC.", reply_markup=MENU_KEYBOARD)
        else:
            await update.message.reply_text("–ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.", reply_markup=MENU_KEYBOARD)
            
    elif t == "–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞":
        BOT_RUNNING = False
        await update.message.reply_text("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=MENU_KEYBOARD)
        
    elif t == "–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC):")
        return ADDING
        
    elif t == "–ò—Å–∫–ª—é—á–∏—Ç—å –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª:")
        return REMOVING
        
    elif t == "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç":
        text = "üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã:\n" + "\n".join(f"‚Ä¢ {coin}" for coin in sorted(WATCHLIST)) if WATCHLIST else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        await update.message.reply_text(text, reply_markup=MENU_KEYBOARD)
        
    elif t == "–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç":
        if ACTIVE_COINS:
            lines = []
            for symbol, info in ACTIVE_COINS.items():
                duration = int(time.time() - info['start'])
                minutes = duration // 60
                seconds = duration % 60
                lines.append(f"üî• {symbol}_USDT ‚Äî {minutes}–º {seconds}—Å")
            text = "‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã:\n" + "\n".join(lines)
        else:
            text = "üí§ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç"
        await update.message.reply_text(text, reply_markup=MENU_KEYBOARD)
        
    elif t == "–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç":
        if COIN_DATA:
            lines = []
            for symbol, data in list(COIN_DATA.items())[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                volume = data.get('volume', 0)
                spread = data.get('spread', 0)
                natr = data.get('natr', 0)
                change = data.get('change', 0)
                lines.append(f"üìä {symbol}: V={volume:.0f}, S={spread:.3f}%, NATR={natr:.2f}%, Œî={change:.2f}%")
            text = "üìà –î–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç:\n" + "\n".join(lines)
        else:
            text = "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω–µ—Ç–∞—Ö"
        await update.message.reply_text(text, reply_markup=MENU_KEYBOARD)
        
    elif t == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥–∏":
        text = (f"üìä –¢–µ–∫—É—â–∏–µ –ø–æ—Ä–æ–≥–∏:\n"
                f"‚Ä¢ –û–±—ä—ë–º: {VOLUME_THRESHOLD}\n"
                f"‚Ä¢ –°–ø—Ä–µ–¥: {SPREAD_THRESHOLD}%\n"
                f"‚Ä¢ NATR: {NATR_THRESHOLD}%\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–æ–±—ä—ë–º —Å–ø—Ä–µ–¥ natr")
        await update.message.reply_text(text)
        return SETTING_THRESHOLDS
        
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é:", reply_markup=MENU_KEYBOARD)
    
    return ConversationHandler.END

async def add_coin(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    coin = update.message.text.upper().strip().replace("_USDT", "")
    if len(coin) >= 2 and coin.isalnum():
        WATCHLIST.add(coin)
        save_watchlist()
        await update.message.reply_text(f"‚úÖ {coin} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.", reply_markup=MENU_KEYBOARD)
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª: {coin}", reply_markup=MENU_KEYBOARD)
    return ConversationHandler.END

async def remove_coin(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    coin = update.message.text.upper().strip().replace("_USDT", "")
    if coin in WATCHLIST:
        WATCHLIST.remove(coin)
        save_watchlist()
        if coin in ACTIVE_COINS:
            del ACTIVE_COINS[coin]
        if coin in COIN_DATA:
            del COIN_DATA[coin]
        await update.message.reply_text(f"üóëÔ∏è {coin} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.", reply_markup=MENU_KEYBOARD)
    else:
        await update.message.reply_text(f"‚ùå {coin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ.", reply_markup=MENU_KEYBOARD)
    return ConversationHandler.END

async def set_thresholds(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global VOLUME_THRESHOLD, SPREAD_THRESHOLD, NATR_THRESHOLD
    try:
        parts = update.message.text.strip().split()
        if len(parts) == 3:
            VOLUME_THRESHOLD = float(parts[0])
            SPREAD_THRESHOLD = float(parts[1])
            NATR_THRESHOLD = float(parts[2])
            text = (f"‚úÖ –ü–æ—Ä–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
                    f"‚Ä¢ –û–±—ä—ë–º: {VOLUME_THRESHOLD}\n"
                    f"‚Ä¢ –°–ø—Ä–µ–¥: {SPREAD_THRESHOLD}%\n"
                    f"‚Ä¢ NATR: {NATR_THRESHOLD}%")
        else:
            text = "‚ùå –í–≤–µ–¥–∏—Ç–µ 3 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª"
    except ValueError:
        text = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞"
    
    await update.message.reply_text(text, reply_markup=MENU_KEYBOARD)
    return ConversationHandler.END

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
if __name__ == '__main__':
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    conv = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler)],
        states={
            ADDING: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_coin)],
            REMOVING: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_coin)],
            SETTING_THRESHOLDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_thresholds)]
        },
        fallbacks=[],
        per_message=False
    )
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv)
    
    print("üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
