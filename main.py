
#!/usr/bin/env python3
"""
–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ MEXC
–í–µ—Ä—Å–∏—è: 2.1 - –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è
"""

import os
import sys
import time
import asyncio
import threading
from datetime import datetime
from flask import Flask
from threading import Thread
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
from logger import bot_logger
from config import config_manager
from watchlist_manager import watchlist_manager
from telegram_bot import telegram_bot
from api_client import api_client
from optimized_api_client import optimized_api_client

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot_logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
if not os.getenv('TELEGRAM_TOKEN'):
    print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not os.getenv('TELEGRAM_CHAT_ID'):
    print("‚ùå TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω")

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route('/')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    try:
        from metrics_manager import metrics_manager
        from cache_manager import cache_manager
        from alert_manager import alert_manager

        status = {
            'bot_running': telegram_bot.bot_running,
            'bot_mode': telegram_bot.bot_mode,
            'watchlist_size': watchlist_manager.size()
        }

        metrics = metrics_manager.get_summary()
        cache_stats = cache_manager.get_stats()
        alerts = alert_manager.get_active_alerts()

        uptime_hours = metrics.get('uptime_seconds', 0) / 3600

        alert_status = 'üü¢ OK'
        if alerts:
            critical_alerts = [a for a in alerts if a.get('severity') == 'critical']
            if critical_alerts:
                alert_status = f'üî¥ {len(critical_alerts)} Critical'
            else:
                alert_status = f'üü° {len(alerts)} Warning'

        return f"""
        <html>
        <head>
            <title>üöÄ Ultra-Fast Trading Bot v2.1</title>
            <meta http-equiv="refresh" content="15">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; background: #0a0a0a; color: #00ff00; }}
                .container {{ max-width: 900px; margin: 0 auto; background: #1a1a1a; padding: 20px; border-radius: 10px; border: 2px solid #00ff00; }}
                .status-grid {{ display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 20px 0; }}
                .metric-box {{ padding: 15px; background: #2a2a2a; border-radius: 8px; border-left: 4px solid #00ff00; }}
                .speed-indicator {{ color: #ff6600; font-weight: bold; }}
                h1 {{ color: #00ff00; text-shadow: 0 0 10px #00ff00; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üöÄ Ultra-Fast Trading Bot v2.1</h1>
                <div class="speed-indicator">‚ö° MAXIMUM SPEED MODE ACTIVE ‚ö°</div>

                <div class="status-grid">
                    <div class="metric-box">
                        <strong>Bot Status:</strong> {'üöÄ Ultra-Fast Running' if status['bot_running'] else 'üî¥ Stopped'}<br>
                        <strong>Mode:</strong> {status['bot_mode'] or 'None'}<br>
                        <strong>Uptime:</strong> {uptime_hours:.1f} hours
                    </div>

                    <div class="metric-box">
                        <strong>Watchlist:</strong> {status['watchlist_size']} coins<br>
                        <strong>Active Coins:</strong> {len(telegram_bot.active_coins)}<br>
                        <strong>Cache Entries:</strong> {cache_stats.get('total_entries', 0)}
                    </div>
                </div>

                <div class="metric-box">
                    <strong>üö® Alerts:</strong> {alert_status}<br>
                    <strong>Speed:</strong> Update every 0.3-0.5 seconds<br>
                    <strong>Memory:</strong> {cache_stats.get('memory_usage_kb', 0):.1f} KB
                </div>

                <div class="status-grid">
                    <div class="metric-box">
                        <strong>API Performance:</strong><br>
                        Total requests: {sum(stats.get('total_requests', 0) for stats in metrics.get('api_stats', {}).values())}<br>
                        Ultra-fast processing enabled
                    </div>

                    <div class="metric-box">
                        <strong>System:</strong><br>
                        Version: 2.1 Ultra-Fast<br>
                        Last update: {time.strftime('%H:%M:%S')}<br>
                        Mode: High Performance
                    </div>
                </div>

                <p style="color: #ff6600;"><small>‚ö° Ultra-fast updates every 15 seconds</small></p>
            </div>
        </body>
        </html>
        """
    except Exception as e:
        return f"""
        <html>
        <body style="background: #0a0a0a; color: #00ff00; font-family: Arial;">
            <h1>üöÄ Ultra-Fast Trading Bot v2.1</h1>
            <p><strong>Status:</strong> {'üöÄ Ultra-Fast Running' if telegram_bot.bot_running else 'üî¥ Stopped'}</p>
            <p><strong>Mode:</strong> {telegram_bot.bot_mode or 'None'}</p>
            <p><strong>Watchlist:</strong> {watchlist_manager.size()} coins</p>
            <p style="color: #ff6600;"><strong>Error:</strong> {str(e)}</p>
        </body>
        </html>
        """

@app.route('/health')
def health():
    """Health check endpoint"""
    try:
        from health_check import health_checker
        import asyncio
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            health_data = loop.run_until_complete(health_checker.full_health_check())
            loop.close()
            return health_data
        except Exception as async_error:
            return {
                'status': 'ultra_fast', 
                'error': f'Async error: {async_error}', 
                'version': '2.1',
                'mode': 'ultra_performance'
            }
    except Exception as e:
        return {'status': 'error', 'error': str(e), 'version': '2.1-ultra'}

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        app.run(host='0.0.0.0', port=8080, debug=False, threaded=True)
    except Exception as e:
        bot_logger.error(f"–û—à–∏–±–∫–∞ Flask —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def validate_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = ['TELEGRAM_TOKEN', 'TELEGRAM_CHAT_ID']
    missing_vars = []

    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)

    if missing_vars:
        bot_logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print(f"‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Secrets –≤ Replit –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.")
        return False

    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    try:
        bot_logger.info("=" * 60)
        bot_logger.info("üöÄ –ó–∞–ø—É—Å–∫ –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ì–û —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ v2.1")
        bot_logger.info("‚ö° MAXIMUM SPEED MODE")
        bot_logger.info("=" * 60)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not validate_environment():
            sys.exit(1)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        from bot_state import bot_state_manager
        bot_state_manager.increment_session()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        from auto_maintenance import auto_maintenance
        maintenance_task = asyncio.create_task(auto_maintenance.start_maintenance_loop())

        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        bot_logger.info("üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
        app = telegram_bot.setup_application()

        bot_logger.info("üöÄ –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π Telegram –±–æ—Ç –≥–æ—Ç–æ–≤")
        bot_logger.info("‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 0.3-0.5 —Å–µ–∫—É–Ω–¥")
        bot_logger.info("üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞")
        bot_logger.info("=" * 60)

        start_time = time.time()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        async with app:
            await app.start()
            await app.updater.start_polling(drop_pending_updates=True)

            try:
                while True:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                bot_logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            finally:
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                bot_logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ...")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                try:
                    auto_maintenance.stop_maintenance()
                    maintenance_task.cancel()
                    bot_logger.debug("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as e:
                    bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                uptime = time.time() - start_time
                bot_state_manager.add_uptime(uptime)

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
                try:
                    await app.updater.stop()
                    await app.stop()
                    bot_logger.debug("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    bot_logger.debug(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞: {e}")

    except KeyboardInterrupt:
        bot_logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        bot_logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        bot_logger.info("üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        
        cleanup_tasks = []
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ API –∫–ª–∏–µ–Ω—Ç–æ–≤
        try:
            cleanup_tasks.append(optimized_api_client.close())
            cleanup_tasks.append(api_client.close())
        except Exception as e:
            bot_logger.debug(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –∑–∞–∫—Ä—ã—Ç–∏—è API: {e}")

        # –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        try:
            from websocket_client import ws_client
            cleanup_tasks.append(ws_client.close())
        except Exception as e:
            bot_logger.debug(f"WebSocket –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç: {e}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        if cleanup_tasks:
            try:
                await asyncio.gather(*cleanup_tasks, return_exceptions=True)
                bot_logger.debug("–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã")
            except Exception as e:
                bot_logger.debug(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        try:
            await asyncio.sleep(0.3)
        except Exception:
            pass

        bot_logger.info("üëã –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–´–ô —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        bot_logger.info("‚ö° –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å event loop –≤ Windows
    if sys.platform == 'win32':
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)
