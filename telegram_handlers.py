
"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞
–°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Ö–æ–¥—è—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å
"""

from typing import Optional, Dict, Any
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from logger import bot_logger
from config import config_manager
from api_client import api_client
from watchlist_manager import watchlist_manager

class ExtendedTelegramHandlers:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance

    async def admin_stats_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            from metrics_manager import metrics_manager
            from cache_manager import cache_manager
            from alert_manager import alert_manager
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            metrics = metrics_manager.get_summary()
            cache_stats = cache_manager.get_stats()
            alert_stats = alert_manager.get_alert_stats()
            
            stats_text = (
                "üìä <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                f"üîÑ <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
                f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {metrics.get('uptime_seconds', 0)/3600:.1f} —á–∞—Å–æ–≤\n"
                f"‚Ä¢ –ö–µ—à —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {cache_stats.get('cache_efficiency', 0):.1f}%\n"
                f"‚Ä¢ –ü–∞–º—è—Ç—å –∫–µ—à–∞: {cache_stats.get('memory_usage_kb', 0):.1f} KB\n\n"
                f"üö® <b>–ê–ª–µ—Ä—Ç—ã:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {alert_stats.get('total_alerts', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {alert_stats.get('active_alerts', 0)}\n"
                f"‚Ä¢ –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {alert_stats.get('total_triggers', 0)}\n\n"
                f"üì° <b>API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            )
            
            api_stats = metrics.get('api_stats', {})
            for endpoint, stats in list(api_stats.items())[:3]:
                stats_text += (
                    f"‚Ä¢ {endpoint}: {stats.get('total_requests', 0)} –∑–∞–ø—Ä–æ—Å–æ–≤, "
                    f"avg {stats.get('avg_response_time', 0):.2f}s\n"
                )
            
            await update.message.reply_text(
                stats_text,
                reply_markup=self.bot.main_keyboard,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_stats_handler: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                reply_markup=self.bot.main_keyboard
            )

    async def bulk_add_coins_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç"""
        if len(context.args) == 0:
            await update.message.reply_text(
                "üìù <b>–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç:</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/bulk_add BTC ETH ADA SOL</code>\n"
                "–ò–ª–∏: <code>/bulk_add BTC,ETH,ADA,SOL</code>",
                parse_mode=ParseMode.HTML
            )
            return

        # –ü–∞—Ä—Å–∏–º —Å–∏–º–≤–æ–ª—ã
        symbols_text = " ".join(context.args)
        symbols = [s.strip().upper() for s in symbols_text.replace(',', ' ').split() if s.strip()]
        
        if not symbols:
            await update.message.reply_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Å–∏–º–≤–æ–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if len(symbols) > 20:
            await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º—É–º 20 –º–æ–Ω–µ—Ç –∑–∞ —Ä–∞–∑")
            return

        await update.message.reply_text(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é {len(symbols)} –º–æ–Ω–µ—Ç...")

        added_count = 0
        failed_symbols = []

        for symbol in symbols:
            try:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª
                clean_symbol = symbol.replace("_USDT", "").replace("USDT", "")
                
                if watchlist_manager.contains(clean_symbol):
                    continue  # –£–∂–µ –≤ —Å–ø–∏—Å–∫–µ
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                coin_data = await api_client.get_coin_data(clean_symbol)
                if coin_data:
                    watchlist_manager.add(clean_symbol)
                    added_count += 1
                else:
                    failed_symbols.append(clean_symbol)
                    
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {symbol}: {e}")
                failed_symbols.append(symbol)

        # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        result_text = f"‚úÖ <b>–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:</b>\n\n"
        result_text += f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count} –º–æ–Ω–µ—Ç\n"
        
        if failed_symbols:
            result_text += f"‚Ä¢ –û—à–∏–±–∫–∏: {len(failed_symbols)} –º–æ–Ω–µ—Ç\n"
            if len(failed_symbols) <= 10:
                result_text += f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {', '.join(failed_symbols)}"

        await update.message.reply_text(
            result_text,
            reply_markup=self.bot.main_keyboard,
            parse_mode=ParseMode.HTML
        )

    async def export_watchlist_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        try:
            coins = watchlist_manager.get_all()
            
            if not coins:
                await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç")
                return

            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç
            export_text = "# –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞\n"
            export_text += f"# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(coins)} –º–æ–Ω–µ—Ç\n\n"
            
            sorted_coins = sorted(coins)
            for i, coin in enumerate(sorted_coins, 1):
                export_text += f"{i:2d}. {coin}_USDT\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
            import io
            file_buffer = io.BytesIO(export_text.encode('utf-8'))
            file_buffer.name = "watchlist_export.txt"

            await update.message.reply_document(
                document=file_buffer,
                caption=f"üìã –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ({len(coins)} –º–æ–Ω–µ—Ç)",
                reply_markup=self.bot.main_keyboard
            )

        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–ø–∏—Å–∫–∞: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–ø–∏—Å–∫–∞",
                reply_markup=self.bot.main_keyboard
            )

    async def system_health_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            from health_check import health_checker
            
            await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            health_data = await health_checker.run_diagnostics()
            
            status_emoji = {
                'healthy': '‚úÖ',
                'warning': '‚ö†Ô∏è',
                'critical': 'üö®',
                'error': '‚ùå'
            }
            
            emoji = status_emoji.get(health_data.get('status', 'error'), '‚ùì')
            
            health_text = (
                f"{emoji} <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {health_data.get('status', 'unknown').upper()}</b>\n\n"
                f"üíæ <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
                f"‚Ä¢ –ü–∞–º—è—Ç—å: {health_data.get('system', {}).get('memory_percent', 0):.1f}%\n"
                f"‚Ä¢ CPU: {health_data.get('system', {}).get('cpu_percent', 0):.1f}%\n"
                f"‚Ä¢ –î–∏—Å–∫: {health_data.get('system', {}).get('disk_percent', 0):.1f}%\n\n"
                f"ü§ñ <b>–ë–æ—Ç:</b>\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if health_data.get('bot', {}).get('bot_running') else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                f"‚Ä¢ –†–µ–∂–∏–º: {health_data.get('bot', {}).get('bot_mode', '–ù–µ—Ç')}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç: {health_data.get('bot', {}).get('active_coins_count', 0)}\n\n"
                f"üì° <b>API:</b>\n"
                f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'‚úÖ' if health_data.get('api', {}).get('api_accessible') else '‚ùå'}\n"
                f"‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health_data.get('api', {}).get('response_time', 0):.2f}s"
            )
            
            await update.message.reply_text(
                health_text,
                reply_markup=self.bot.main_keyboard,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
                reply_markup=self.bot.main_keyboard
            )

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
def create_extended_handlers(bot_instance):
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    return ExtendedTelegramHandlers(bot_instance)
