"""
–ú–æ–¥—É–ª—å —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import time
from typing import Dict, List, Set
from logger import bot_logger
from config import config_manager
from api_client import api_client
from watchlist_manager import watchlist_manager


class NotificationMode:
    def __init__(self, telegram_bot):
        self.bot = telegram_bot
        self.running = False
        self.active_coins: Dict[str, Dict] = {}
        self.processing_coins: Set[str] = set()
        self.notification_locks: Set[str] = set()
        self.task = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.running:
            bot_logger.warning("–†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.running = True
        self.active_coins.clear()
        self.processing_coins.clear()
        self.notification_locks.clear()

        bot_logger.info("üîî –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        self.task = asyncio.create_task(self._notification_loop())

        await self.bot.send_message(
            "‚úÖ <b>–†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n"
            "üöÄ <i>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞</i>\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö."
        )

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.running:
            return

        self.running = False

        # –û—Ç–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
        if self.task and not self.task.done():
            self.task.cancel()
            try:
                await asyncio.wait_for(self.task, timeout=2.0)
            except (asyncio.CancelledError, asyncio.TimeoutError):
                pass

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        deleted_count = 0
        for symbol, coin_data in list(self.active_coins.items()):
            msg_id = coin_data.get('msg_id')
            if msg_id and isinstance(msg_id, int) and msg_id > 0:
                await self.bot.delete_message(msg_id)
                deleted_count += 1

        if deleted_count > 0:
            bot_logger.info(f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.active_coins.clear()
        self.processing_coins.clear()
        self.notification_locks.clear()
        self.task = None

    def _chunks(self, lst: List, size: int):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞–Ω–∫–∏"""
        for i in range(0, len(lst), size):
            yield lst[i:i + size]

    async def _notification_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        cleanup_counter = 0

        while self.running:
            try:
                watchlist = watchlist_manager.get_all()
                if not watchlist:
                    await asyncio.sleep(config_manager.get('CHECK_FULL_CYCLE_INTERVAL'))
                    continue

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
                cleanup_counter += 1
                if cleanup_counter >= 10:
                    await self._cleanup_stale_processes()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                    try:
                        from session_recorder import session_recorder
                        session_recorder.check_inactive_sessions(self.active_coins)
                    except Exception as e:
                        bot_logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
                    cleanup_counter = 0

                batch_size = config_manager.get('CHECK_BATCH_SIZE')
                for batch in self._chunks(list(watchlist), batch_size):
                    if not self.running:
                        break

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞
                    batch_data = await api_client.get_batch_coin_data(batch)

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –º–æ–Ω–µ—Ç—É
                    for symbol, data in batch_data.items():
                        if not self.running:
                            break

                        if not data:
                            continue

                        # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        if symbol in self.processing_coins:
                            continue

                        try:
                            self.processing_coins.add(symbol)
                            await self._process_coin_notification(symbol, data)
                        except Exception as e:
                            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
                        finally:
                            self.processing_coins.discard(symbol)

                        await asyncio.sleep(0.01)

                    await asyncio.sleep(config_manager.get('CHECK_BATCH_INTERVAL'))

                await asyncio.sleep(config_manager.get('CHECK_FULL_CYCLE_INTERVAL'))

            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(1.0)

    async def _cleanup_stale_processes(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        current_time = time.time()
        to_remove = []

        for symbol, coin_info in list(self.active_coins.items()):
            # –ú–æ–Ω–µ—Ç—ã –±–µ–∑ msg_id (orphaned)
            if not coin_info.get('msg_id') and not coin_info.get('creating', False):
                to_remove.append(symbol)
            # –ó–∞–≤–∏—Å—à–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–æ–∑–¥–∞–Ω–∏—è (–±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥)
            elif coin_info.get('creating', False):
                start_time = coin_info.get('creation_start', current_time)
                if current_time - start_time > 10:
                    to_remove.append(symbol)

        for symbol in to_remove:
            try:
                del self.active_coins[symbol]
                bot_logger.info(f"[CLEANUP] –û—á–∏—â–µ–Ω–∞ –∑–∞–≤–∏—Å—à–∞—è –º–æ–Ω–µ—Ç–∞ {symbol}")
            except Exception as e:
                bot_logger.error(f"[CLEANUP] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {symbol}: {e}")

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        self.processing_coins.clear()

    async def _process_coin_notification(self, symbol: str, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–Ω–µ—Ç"""
        now = time.time()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç –≤ —Å–µ—Å—Å–∏–∏
        if data.get('active'):
            try:
                from session_recorder import session_recorder
                session_recorder.update_coin_activity(symbol, data)
                bot_logger.debug(f"üìä –î–∞–Ω–Ω—ã–µ {symbol} –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ Session Recorder")
            except Exception as e:
                bot_logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–∏ {symbol}: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
        try:
            from advanced_alerts import advanced_alert_manager
            advanced_alert_manager.check_coin_alerts(symbol, data)
        except:
            pass

        if data['active']:
            # –ú–æ–Ω–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞
            if symbol not in self.active_coins:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                if symbol in self.notification_locks:
                    return

                self.notification_locks.add(symbol)
                try:
                    await self._create_coin_notification(symbol, data, now)
                finally:
                    self.notification_locks.discard(symbol)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–Ω–µ—Ç—É
                await self._update_coin_notification(symbol, data, now)
        else:
            # –ú–æ–Ω–µ—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if symbol in self.active_coins:
                coin_info = self.active_coins[symbol]

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è
                if coin_info.get('creating', False):
                    return

                inactivity_timeout = config_manager.get('INACTIVITY_TIMEOUT')
                if now - coin_info['last_active'] > inactivity_timeout:
                    await self._end_coin_activity(symbol, now)

    async def _create_coin_notification(self, symbol: str, data: Dict, now: float):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã"""
        if not self.running:
            return

        bot_logger.info(f"[NOTIFICATION_START] {symbol} - –Ω–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–Ω–µ—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å —Ñ–ª–∞–≥–æ–º creating
        self.active_coins[symbol] = {
            'start': now,
            'last_active': now,
            'data': data.copy(),
            'creating': True,
            'creation_start': now
        }

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üö® <b>{symbol}_USDT –∞–∫—Ç–∏–≤–µ–Ω</b>\n"
            f"üîÑ –ò–∑–º: {data['change']:+.2f}%  üîÅ –°–¥–µ–ª–æ–∫: {data['trades']}\n"
            f"üìä –û–±—ä—ë–º: ${data['volume']:,.2f}  NATR: {data['natr']:.2f}%\n"
            f"‚áÑ –°–ø—Ä–µ–¥: {data['spread']:.2f}%"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_id = await self.bot.send_message(message)

        if msg_id and symbol in self.active_coins:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º msg_id
            self.active_coins[symbol].update({
                'msg_id': msg_id,
                'creating': False
            })
            bot_logger.trade_activity(symbol, "STARTED", f"Volume: ${data['volume']:,.2f}")
            bot_logger.info(f"[NOTIFICATION_SUCCESS] {symbol} - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            # –£–¥–∞–ª—è–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –∑–∞–ø–∏—Å—å
            if symbol in self.active_coins:
                del self.active_coins[symbol]
            bot_logger.warning(f"[NOTIFICATION_FAILED] {symbol} - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

    async def _update_coin_notification(self, symbol: str, data: Dict, now: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if not self.running:
            return

        coin_info = self.active_coins[symbol]

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è
        if coin_info.get('creating', False):
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        coin_info['last_active'] = now
        coin_info['data'] = data

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å msg_id
        msg_id = coin_info.get('msg_id')
        if msg_id and isinstance(msg_id, int):
            new_message = (
                f"üö® <b>{symbol}_USDT –∞–∫—Ç–∏–≤–µ–Ω</b>\n"
                f"üîÑ –ò–∑–º: {data['change']:+.2f}%  üîÅ –°–¥–µ–ª–æ–∫: {data['trades']}\n"
                f"üìä –û–±—ä—ë–º: ${data['volume']:,.2f}  NATR: {data['natr']:.2f}%\n"
                f"‚áÑ –°–ø—Ä–µ–¥: {data['spread']:.2f}%"
            )

            await self.bot.edit_message(msg_id, new_message)

    async def _end_coin_activity(self, symbol: str, end_time: float):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã"""
        if symbol not in self.active_coins:
            return

        coin_info = self.active_coins[symbol]
        duration = end_time - coin_info['start']

        bot_logger.info(f"[END] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {symbol}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}—Å")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        msg_id = coin_info.get('msg_id')
        if msg_id and isinstance(msg_id, int) and msg_id > 0:
            await self.bot.delete_message(msg_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ >= 60 —Å–µ–∫—É–Ω–¥
        if duration >= 60:
            duration_min = int(duration // 60)
            duration_sec = int(duration % 60)
            end_message = (
                f"‚úÖ <b>{symbol}_USDT –∑–∞–≤–µ—Ä—à–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_min} –º–∏–Ω {duration_sec} —Å–µ–∫"
            )
            await self.bot.send_message(end_message)
            bot_logger.trade_activity(symbol, "ENDED", f"Duration: {duration_min}m {duration_sec}s")

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
        del self.active_coins[symbol]

    def get_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∂–∏–º–∞"""
        return {
            'active': self.running,
            'active_coins_count': len(self.active_coins),
            'processing_coins_count': len(self.processing_coins),
            'active_coins': list(self.active_coins.keys())
        }